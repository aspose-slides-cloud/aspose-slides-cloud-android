/*
 * --------------------------------------------------------------------------------------------------------------------
 * <copyright company="Aspose">
 *   Copyright (c) 2018 Aspose.Slides for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------------------------------------------
 */

package com.aspose.slides.api;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.aspose.slides.ApiException;
import com.aspose.slides.FileInfo;
import com.aspose.slides.ApiTest;
import com.aspose.slides.model.*;

import com.aspose.slides.model.ApiInfo;
import com.aspose.slides.model.Axis;
import com.aspose.slides.model.Chart;
import com.aspose.slides.model.ChartCategory;
import com.aspose.slides.model.ChartSeriesGroup;
import com.aspose.slides.model.ChartWall;
import com.aspose.slides.model.ColorScheme;
import com.aspose.slides.model.DataPoint;
import com.aspose.slides.model.DiscUsage;
import com.aspose.slides.model.Document;
import com.aspose.slides.model.DocumentProperties;
import com.aspose.slides.model.DocumentProperty;
import com.aspose.slides.model.DocumentReplaceResult;
import com.aspose.slides.model.Effect;
import com.aspose.slides.model.EntityExists;
import com.aspose.slides.model.ExportOptions;
import java.io.File;
import com.aspose.slides.model.FileVersions;
import com.aspose.slides.model.FilesList;
import com.aspose.slides.model.FilesUploadResult;
import com.aspose.slides.model.FontScheme;
import com.aspose.slides.model.FontsData;
import com.aspose.slides.model.FormatScheme;
import com.aspose.slides.model.GeometryPaths;
import com.aspose.slides.model.HeaderFooter;
import com.aspose.slides.model.IShapeExportOptions;
import com.aspose.slides.model.Images;
import com.aspose.slides.model.InteractiveSequence;
import com.aspose.slides.model.LayoutSlide;
import com.aspose.slides.model.LayoutSlides;
import com.aspose.slides.model.Legend;
import com.aspose.slides.model.MasterSlide;
import com.aspose.slides.model.MasterSlides;
import com.aspose.slides.model.NotesSlide;
import com.aspose.slides.model.NotesSlideHeaderFooter;
import com.aspose.slides.model.ObjectExist;
import com.aspose.slides.model.OrderedMergeRequest;
import com.aspose.slides.model.Paragraph;
import com.aspose.slides.model.Paragraphs;
import com.aspose.slides.model.PictureFrame;
import com.aspose.slides.model.Pipeline;
import com.aspose.slides.model.Placeholder;
import com.aspose.slides.model.Placeholders;
import com.aspose.slides.model.Portion;
import com.aspose.slides.model.Portions;
import com.aspose.slides.model.PresentationsMergeRequest;
import com.aspose.slides.model.ProtectionProperties;
import com.aspose.slides.model.Sections;
import com.aspose.slides.model.Series;
import com.aspose.slides.model.Shape;
import com.aspose.slides.model.ShapeBase;
import com.aspose.slides.model.Shapes;
import com.aspose.slides.model.Slide;
import com.aspose.slides.model.SlideAnimation;
import com.aspose.slides.model.SlideBackground;
import com.aspose.slides.model.SlideCommentBase;
import com.aspose.slides.model.SlideComments;
import com.aspose.slides.model.SlideProperties;
import com.aspose.slides.model.SlideReplaceResult;
import com.aspose.slides.model.SlideShowProperties;
import com.aspose.slides.model.Slides;
import com.aspose.slides.model.SmartArt;
import com.aspose.slides.model.SplitDocumentResult;
import com.aspose.slides.model.StorageExist;
import com.aspose.slides.model.TextBounds;
import com.aspose.slides.model.TextItems;
import com.aspose.slides.model.Theme;
import com.aspose.slides.model.ViewProperties;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.startsWith;
import static org.hamcrest.CoreMatchers.anyOf;
import static org.hamcrest.CoreMatchers.equalTo;

/**
 * API tests for SlidesApi
 */
public class SlidesApiTest extends ApiTest {
    
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignShapesTest() throws ApiException, Exception {
        initialize("alignShapes", null, null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "alignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "alignShapes", "subShape");
        response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignShapesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "alignShapes", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "alignShapes", "name");
            initialize("alignShapes", "name", "String", valueName);
            Shapes response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "alignShapes", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "alignShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignShapesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "alignShapes", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "alignShapes", "slideIndex");
            initialize("alignShapes", "slideIndex", "Integer", valueSlideIndex);
            Shapes response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "alignShapes", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "alignShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignShapesInvalidAlignmentTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "alignShapes", "subShape");
        try {
            valueAlignmentType = (ShapesAlignmentType)invalidizeTestValue("ShapesAlignmentType", valueAlignmentType, "alignShapes", "alignmentType");
            initialize("alignShapes", "alignmentType", "ShapesAlignmentType", valueAlignmentType);
            Shapes response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ShapesAlignmentType", "alignmentType", "alignShapes", valueAlignmentType);
        }
        if (needAssertResponse) {
            assertResponse("ShapesAlignmentType", "alignmentType", "alignShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignShapesInvalidAlignToSlideTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "alignShapes", "subShape");
        try {
            valueAlignToSlide = (Boolean)invalidizeTestValue("Boolean", valueAlignToSlide, "alignShapes", "alignToSlide");
            initialize("alignShapes", "alignToSlide", "Boolean", valueAlignToSlide);
            Shapes response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "alignToSlide", "alignShapes", valueAlignToSlide);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "alignToSlide", "alignShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignShapesInvalidShapesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "alignShapes", "subShape");
        try {
            valueShapes = (List<Integer>)invalidizeTestValue("List<Integer>", valueShapes, "alignShapes", "shapes");
            initialize("alignShapes", "shapes", "List<Integer>", valueShapes);
            Shapes response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "List<Integer>", "shapes", "alignShapes", valueShapes);
        }
        if (needAssertResponse) {
            assertResponse("List<Integer>", "shapes", "alignShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignShapesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "alignShapes", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "alignShapes", "password");
            initialize("alignShapes", "password", "String", valuePassword);
            Shapes response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "alignShapes", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "alignShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignShapesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "alignShapes", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "alignShapes", "folder");
            initialize("alignShapes", "folder", "String", valueFolder);
            Shapes response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "alignShapes", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "alignShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignShapesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "alignShapes", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "alignShapes", "storage");
            initialize("alignShapes", "storage", "String", valueStorage);
            Shapes response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "alignShapes", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "alignShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignShapesInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "alignShapes", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "alignShapes", "subShape");
            initialize("alignShapes", "subShape", "String", valueSubShape);
            Shapes response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "alignShapes", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "alignShapes");
        }
    }
    
    /**
     * Changes the placement of selected shapes on the master slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignSpecialSlideShapesTest() throws ApiException, Exception {
        initialize("alignSpecialSlideShapes", null, null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "alignSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "alignSpecialSlideShapes", "slideType");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignSpecialSlideShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignSpecialSlideShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignSpecialSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "alignSpecialSlideShapes", "subShape");
        response = api.alignSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Changes the placement of selected shapes on the master slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignSpecialSlideShapesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "alignSpecialSlideShapes", "slideType");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignSpecialSlideShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignSpecialSlideShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignSpecialSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "alignSpecialSlideShapes", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "alignSpecialSlideShapes", "name");
            initialize("alignSpecialSlideShapes", "name", "String", valueName);
            Shapes response = api.alignSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "alignSpecialSlideShapes", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "alignSpecialSlideShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the master slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignSpecialSlideShapesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "alignSpecialSlideShapes", "slideType");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignSpecialSlideShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignSpecialSlideShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignSpecialSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "alignSpecialSlideShapes", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "alignSpecialSlideShapes", "slideIndex");
            initialize("alignSpecialSlideShapes", "slideIndex", "Integer", valueSlideIndex);
            Shapes response = api.alignSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "alignSpecialSlideShapes", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "alignSpecialSlideShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the master slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignSpecialSlideShapesInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "alignSpecialSlideShapes", "slideType");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignSpecialSlideShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignSpecialSlideShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignSpecialSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "alignSpecialSlideShapes", "subShape");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "alignSpecialSlideShapes", "slideType");
            initialize("alignSpecialSlideShapes", "slideType", "SpecialSlideType", valueSlideType);
            Shapes response = api.alignSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "alignSpecialSlideShapes", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "alignSpecialSlideShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the master slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignSpecialSlideShapesInvalidAlignmentTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "alignSpecialSlideShapes", "slideType");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignSpecialSlideShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignSpecialSlideShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignSpecialSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "alignSpecialSlideShapes", "subShape");
        try {
            valueAlignmentType = (ShapesAlignmentType)invalidizeTestValue("ShapesAlignmentType", valueAlignmentType, "alignSpecialSlideShapes", "alignmentType");
            initialize("alignSpecialSlideShapes", "alignmentType", "ShapesAlignmentType", valueAlignmentType);
            Shapes response = api.alignSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ShapesAlignmentType", "alignmentType", "alignSpecialSlideShapes", valueAlignmentType);
        }
        if (needAssertResponse) {
            assertResponse("ShapesAlignmentType", "alignmentType", "alignSpecialSlideShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the master slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignSpecialSlideShapesInvalidAlignToSlideTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "alignSpecialSlideShapes", "slideType");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignSpecialSlideShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignSpecialSlideShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignSpecialSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "alignSpecialSlideShapes", "subShape");
        try {
            valueAlignToSlide = (Boolean)invalidizeTestValue("Boolean", valueAlignToSlide, "alignSpecialSlideShapes", "alignToSlide");
            initialize("alignSpecialSlideShapes", "alignToSlide", "Boolean", valueAlignToSlide);
            Shapes response = api.alignSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "alignToSlide", "alignSpecialSlideShapes", valueAlignToSlide);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "alignToSlide", "alignSpecialSlideShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the master slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignSpecialSlideShapesInvalidShapesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "alignSpecialSlideShapes", "slideType");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignSpecialSlideShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignSpecialSlideShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignSpecialSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "alignSpecialSlideShapes", "subShape");
        try {
            valueShapes = (List<Integer>)invalidizeTestValue("List<Integer>", valueShapes, "alignSpecialSlideShapes", "shapes");
            initialize("alignSpecialSlideShapes", "shapes", "List<Integer>", valueShapes);
            Shapes response = api.alignSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "List<Integer>", "shapes", "alignSpecialSlideShapes", valueShapes);
        }
        if (needAssertResponse) {
            assertResponse("List<Integer>", "shapes", "alignSpecialSlideShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the master slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignSpecialSlideShapesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "alignSpecialSlideShapes", "slideType");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignSpecialSlideShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignSpecialSlideShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignSpecialSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "alignSpecialSlideShapes", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "alignSpecialSlideShapes", "password");
            initialize("alignSpecialSlideShapes", "password", "String", valuePassword);
            Shapes response = api.alignSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "alignSpecialSlideShapes", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "alignSpecialSlideShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the master slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignSpecialSlideShapesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "alignSpecialSlideShapes", "slideType");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignSpecialSlideShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignSpecialSlideShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignSpecialSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "alignSpecialSlideShapes", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "alignSpecialSlideShapes", "folder");
            initialize("alignSpecialSlideShapes", "folder", "String", valueFolder);
            Shapes response = api.alignSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "alignSpecialSlideShapes", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "alignSpecialSlideShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the master slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignSpecialSlideShapesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "alignSpecialSlideShapes", "slideType");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignSpecialSlideShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignSpecialSlideShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignSpecialSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "alignSpecialSlideShapes", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "alignSpecialSlideShapes", "storage");
            initialize("alignSpecialSlideShapes", "storage", "String", valueStorage);
            Shapes response = api.alignSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "alignSpecialSlideShapes", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "alignSpecialSlideShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the master slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignSpecialSlideShapesInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "alignSpecialSlideShapes", "slideType");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignSpecialSlideShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignSpecialSlideShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignSpecialSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "alignSpecialSlideShapes", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "alignSpecialSlideShapes", "subShape");
            initialize("alignSpecialSlideShapes", "subShape", "String", valueSubShape);
            Shapes response = api.alignSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "alignSpecialSlideShapes", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "alignSpecialSlideShapes");
        }
    }
    
    /**
     * Compresses embedded fonts by removing unused characters.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compressEmbeddedFontsTest() throws ApiException, Exception {
        initialize("compressEmbeddedFonts", null, null, null);
        ;
        String valueName = (String)getTestValue("String", "compressEmbeddedFonts", "name");
        String valuePassword = (String)getTestValue("String", "compressEmbeddedFonts", "password");
        String valueFolder = (String)getTestValue("String", "compressEmbeddedFonts", "folder");
        String valueStorage = (String)getTestValue("String", "compressEmbeddedFonts", "storage");
        api.compressEmbeddedFonts(valueName, valuePassword, valueFolder, valueStorage);
    }

    /**
     * Compresses embedded fonts by removing unused characters.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compressEmbeddedFontsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "compressEmbeddedFonts", "name");
        String valuePassword = (String)getTestValue("String", "compressEmbeddedFonts", "password");
        String valueFolder = (String)getTestValue("String", "compressEmbeddedFonts", "folder");
        String valueStorage = (String)getTestValue("String", "compressEmbeddedFonts", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "compressEmbeddedFonts", "name");
            initialize("compressEmbeddedFonts", "name", "String", valueName);
            api.compressEmbeddedFonts(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "compressEmbeddedFonts", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "compressEmbeddedFonts");
        }
    }
    /**
     * Compresses embedded fonts by removing unused characters.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compressEmbeddedFontsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "compressEmbeddedFonts", "name");
        String valuePassword = (String)getTestValue("String", "compressEmbeddedFonts", "password");
        String valueFolder = (String)getTestValue("String", "compressEmbeddedFonts", "folder");
        String valueStorage = (String)getTestValue("String", "compressEmbeddedFonts", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "compressEmbeddedFonts", "password");
            initialize("compressEmbeddedFonts", "password", "String", valuePassword);
            api.compressEmbeddedFonts(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "compressEmbeddedFonts", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "compressEmbeddedFonts");
        }
    }
    /**
     * Compresses embedded fonts by removing unused characters.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compressEmbeddedFontsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "compressEmbeddedFonts", "name");
        String valuePassword = (String)getTestValue("String", "compressEmbeddedFonts", "password");
        String valueFolder = (String)getTestValue("String", "compressEmbeddedFonts", "folder");
        String valueStorage = (String)getTestValue("String", "compressEmbeddedFonts", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "compressEmbeddedFonts", "folder");
            initialize("compressEmbeddedFonts", "folder", "String", valueFolder);
            api.compressEmbeddedFonts(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "compressEmbeddedFonts", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "compressEmbeddedFonts");
        }
    }
    /**
     * Compresses embedded fonts by removing unused characters.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compressEmbeddedFontsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "compressEmbeddedFonts", "name");
        String valuePassword = (String)getTestValue("String", "compressEmbeddedFonts", "password");
        String valueFolder = (String)getTestValue("String", "compressEmbeddedFonts", "folder");
        String valueStorage = (String)getTestValue("String", "compressEmbeddedFonts", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "compressEmbeddedFonts", "storage");
            initialize("compressEmbeddedFonts", "storage", "String", valueStorage);
            api.compressEmbeddedFonts(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "compressEmbeddedFonts", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "compressEmbeddedFonts");
        }
    }
    
    /**
     * Compresses embedded fonts by removing unused characters.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compressEmbeddedFontsOnlineTest() throws ApiException, Exception {
        initialize("compressEmbeddedFontsOnline", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "compressEmbeddedFontsOnline", "document");
        String valuePassword = (String)getTestValue("String", "compressEmbeddedFontsOnline", "password");
        response = api.compressEmbeddedFontsOnline(valueDocument, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Compresses embedded fonts by removing unused characters.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compressEmbeddedFontsOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "compressEmbeddedFontsOnline", "document");
        String valuePassword = (String)getTestValue("String", "compressEmbeddedFontsOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "compressEmbeddedFontsOnline", "document");
            initialize("compressEmbeddedFontsOnline", "document", "byte[]", valueDocument);
            File response = api.compressEmbeddedFontsOnline(valueDocument, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "compressEmbeddedFontsOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "compressEmbeddedFontsOnline");
        }
    }
    /**
     * Compresses embedded fonts by removing unused characters.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compressEmbeddedFontsOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "compressEmbeddedFontsOnline", "document");
        String valuePassword = (String)getTestValue("String", "compressEmbeddedFontsOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "compressEmbeddedFontsOnline", "password");
            initialize("compressEmbeddedFontsOnline", "password", "String", valuePassword);
            File response = api.compressEmbeddedFontsOnline(valueDocument, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "compressEmbeddedFontsOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "compressEmbeddedFontsOnline");
        }
    }
    
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertTest() throws ApiException, Exception {
        initialize("convert", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convert", "format");
        String valuePassword = (String)getTestValue("String", "convert", "password");
        String valueStorage = (String)getTestValue("String", "convert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convert", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convert", "slides");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "convert", "options");
        response = api.convert(valueDocument, valueFormat, valuePassword, valueStorage, valueFontsFolder, valueSlides, valueOptions);
        assertTrue(response.isFile());
    }

    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convert", "format");
        String valuePassword = (String)getTestValue("String", "convert", "password");
        String valueStorage = (String)getTestValue("String", "convert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convert", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convert", "slides");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "convert", "options");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "convert", "document");
            initialize("convert", "document", "byte[]", valueDocument);
            File response = api.convert(valueDocument, valueFormat, valuePassword, valueStorage, valueFontsFolder, valueSlides, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "convert", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "convert");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convert", "format");
        String valuePassword = (String)getTestValue("String", "convert", "password");
        String valueStorage = (String)getTestValue("String", "convert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convert", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convert", "slides");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "convert", "options");
        try {
            valueFormat = (ExportFormat)invalidizeTestValue("ExportFormat", valueFormat, "convert", "format");
            initialize("convert", "format", "ExportFormat", valueFormat);
            File response = api.convert(valueDocument, valueFormat, valuePassword, valueStorage, valueFontsFolder, valueSlides, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ExportFormat", "format", "convert", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("ExportFormat", "format", "convert");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convert", "format");
        String valuePassword = (String)getTestValue("String", "convert", "password");
        String valueStorage = (String)getTestValue("String", "convert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convert", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convert", "slides");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "convert", "options");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "convert", "password");
            initialize("convert", "password", "String", valuePassword);
            File response = api.convert(valueDocument, valueFormat, valuePassword, valueStorage, valueFontsFolder, valueSlides, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "convert", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "convert");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convert", "format");
        String valuePassword = (String)getTestValue("String", "convert", "password");
        String valueStorage = (String)getTestValue("String", "convert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convert", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convert", "slides");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "convert", "options");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "convert", "storage");
            initialize("convert", "storage", "String", valueStorage);
            File response = api.convert(valueDocument, valueFormat, valuePassword, valueStorage, valueFontsFolder, valueSlides, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "convert", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "convert");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convert", "format");
        String valuePassword = (String)getTestValue("String", "convert", "password");
        String valueStorage = (String)getTestValue("String", "convert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convert", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convert", "slides");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "convert", "options");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "convert", "fontsFolder");
            initialize("convert", "fontsFolder", "String", valueFontsFolder);
            File response = api.convert(valueDocument, valueFormat, valuePassword, valueStorage, valueFontsFolder, valueSlides, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontsFolder", "convert", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontsFolder", "convert");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertInvalidSlidesTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convert", "format");
        String valuePassword = (String)getTestValue("String", "convert", "password");
        String valueStorage = (String)getTestValue("String", "convert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convert", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convert", "slides");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "convert", "options");
        try {
            valueSlides = (List<Integer>)invalidizeTestValue("List<Integer>", valueSlides, "convert", "slides");
            initialize("convert", "slides", "List<Integer>", valueSlides);
            File response = api.convert(valueDocument, valueFormat, valuePassword, valueStorage, valueFontsFolder, valueSlides, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "List<Integer>", "slides", "convert", valueSlides);
        }
        if (needAssertResponse) {
            assertResponse("List<Integer>", "slides", "convert");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convert", "format");
        String valuePassword = (String)getTestValue("String", "convert", "password");
        String valueStorage = (String)getTestValue("String", "convert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convert", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convert", "slides");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "convert", "options");
        try {
            valueOptions = (ExportOptions)invalidizeTestValue("ExportOptions", valueOptions, "convert", "options");
            initialize("convert", "options", "ExportOptions", valueOptions);
            File response = api.convert(valueDocument, valueFormat, valuePassword, valueStorage, valueFontsFolder, valueSlides, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ExportOptions", "options", "convert", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("ExportOptions", "options", "convert");
        }
    }
    
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertAndSaveTest() throws ApiException, Exception {
        initialize("convertAndSave", null, null, null);
        ;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convertAndSave", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convertAndSave", "format");
        String valueOutPath = (String)getTestValue("String", "convertAndSave", "outPath");
        String valuePassword = (String)getTestValue("String", "convertAndSave", "password");
        String valueStorage = (String)getTestValue("String", "convertAndSave", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convertAndSave", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convertAndSave", "slides");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "convertAndSave", "options");
        api.convertAndSave(valueDocument, valueFormat, valueOutPath, valuePassword, valueStorage, valueFontsFolder, valueSlides, valueOptions);
    }

    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertAndSaveInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convertAndSave", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convertAndSave", "format");
        String valueOutPath = (String)getTestValue("String", "convertAndSave", "outPath");
        String valuePassword = (String)getTestValue("String", "convertAndSave", "password");
        String valueStorage = (String)getTestValue("String", "convertAndSave", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convertAndSave", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convertAndSave", "slides");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "convertAndSave", "options");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "convertAndSave", "document");
            initialize("convertAndSave", "document", "byte[]", valueDocument);
            api.convertAndSave(valueDocument, valueFormat, valueOutPath, valuePassword, valueStorage, valueFontsFolder, valueSlides, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "convertAndSave", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "convertAndSave");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertAndSaveInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convertAndSave", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convertAndSave", "format");
        String valueOutPath = (String)getTestValue("String", "convertAndSave", "outPath");
        String valuePassword = (String)getTestValue("String", "convertAndSave", "password");
        String valueStorage = (String)getTestValue("String", "convertAndSave", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convertAndSave", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convertAndSave", "slides");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "convertAndSave", "options");
        try {
            valueFormat = (ExportFormat)invalidizeTestValue("ExportFormat", valueFormat, "convertAndSave", "format");
            initialize("convertAndSave", "format", "ExportFormat", valueFormat);
            api.convertAndSave(valueDocument, valueFormat, valueOutPath, valuePassword, valueStorage, valueFontsFolder, valueSlides, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ExportFormat", "format", "convertAndSave", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("ExportFormat", "format", "convertAndSave");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertAndSaveInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convertAndSave", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convertAndSave", "format");
        String valueOutPath = (String)getTestValue("String", "convertAndSave", "outPath");
        String valuePassword = (String)getTestValue("String", "convertAndSave", "password");
        String valueStorage = (String)getTestValue("String", "convertAndSave", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convertAndSave", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convertAndSave", "slides");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "convertAndSave", "options");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "convertAndSave", "outPath");
            initialize("convertAndSave", "outPath", "String", valueOutPath);
            api.convertAndSave(valueDocument, valueFormat, valueOutPath, valuePassword, valueStorage, valueFontsFolder, valueSlides, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "outPath", "convertAndSave", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("String", "outPath", "convertAndSave");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertAndSaveInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convertAndSave", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convertAndSave", "format");
        String valueOutPath = (String)getTestValue("String", "convertAndSave", "outPath");
        String valuePassword = (String)getTestValue("String", "convertAndSave", "password");
        String valueStorage = (String)getTestValue("String", "convertAndSave", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convertAndSave", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convertAndSave", "slides");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "convertAndSave", "options");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "convertAndSave", "password");
            initialize("convertAndSave", "password", "String", valuePassword);
            api.convertAndSave(valueDocument, valueFormat, valueOutPath, valuePassword, valueStorage, valueFontsFolder, valueSlides, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "convertAndSave", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "convertAndSave");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertAndSaveInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convertAndSave", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convertAndSave", "format");
        String valueOutPath = (String)getTestValue("String", "convertAndSave", "outPath");
        String valuePassword = (String)getTestValue("String", "convertAndSave", "password");
        String valueStorage = (String)getTestValue("String", "convertAndSave", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convertAndSave", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convertAndSave", "slides");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "convertAndSave", "options");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "convertAndSave", "storage");
            initialize("convertAndSave", "storage", "String", valueStorage);
            api.convertAndSave(valueDocument, valueFormat, valueOutPath, valuePassword, valueStorage, valueFontsFolder, valueSlides, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "convertAndSave", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "convertAndSave");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertAndSaveInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convertAndSave", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convertAndSave", "format");
        String valueOutPath = (String)getTestValue("String", "convertAndSave", "outPath");
        String valuePassword = (String)getTestValue("String", "convertAndSave", "password");
        String valueStorage = (String)getTestValue("String", "convertAndSave", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convertAndSave", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convertAndSave", "slides");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "convertAndSave", "options");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "convertAndSave", "fontsFolder");
            initialize("convertAndSave", "fontsFolder", "String", valueFontsFolder);
            api.convertAndSave(valueDocument, valueFormat, valueOutPath, valuePassword, valueStorage, valueFontsFolder, valueSlides, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontsFolder", "convertAndSave", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontsFolder", "convertAndSave");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertAndSaveInvalidSlidesTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convertAndSave", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convertAndSave", "format");
        String valueOutPath = (String)getTestValue("String", "convertAndSave", "outPath");
        String valuePassword = (String)getTestValue("String", "convertAndSave", "password");
        String valueStorage = (String)getTestValue("String", "convertAndSave", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convertAndSave", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convertAndSave", "slides");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "convertAndSave", "options");
        try {
            valueSlides = (List<Integer>)invalidizeTestValue("List<Integer>", valueSlides, "convertAndSave", "slides");
            initialize("convertAndSave", "slides", "List<Integer>", valueSlides);
            api.convertAndSave(valueDocument, valueFormat, valueOutPath, valuePassword, valueStorage, valueFontsFolder, valueSlides, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "List<Integer>", "slides", "convertAndSave", valueSlides);
        }
        if (needAssertResponse) {
            assertResponse("List<Integer>", "slides", "convertAndSave");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertAndSaveInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convertAndSave", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convertAndSave", "format");
        String valueOutPath = (String)getTestValue("String", "convertAndSave", "outPath");
        String valuePassword = (String)getTestValue("String", "convertAndSave", "password");
        String valueStorage = (String)getTestValue("String", "convertAndSave", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convertAndSave", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convertAndSave", "slides");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "convertAndSave", "options");
        try {
            valueOptions = (ExportOptions)invalidizeTestValue("ExportOptions", valueOptions, "convertAndSave", "options");
            initialize("convertAndSave", "options", "ExportOptions", valueOptions);
            api.convertAndSave(valueDocument, valueFormat, valueOutPath, valuePassword, valueStorage, valueFontsFolder, valueSlides, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ExportOptions", "options", "convertAndSave", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("ExportOptions", "options", "convertAndSave");
        }
    }
    
    /**
     * Copy file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFileTest() throws ApiException, Exception {
        initialize("copyFile", null, null, null);
        ;
        String valueSrcPath = (String)getTestValue("String", "copyFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "copyFile", "versionId");
        api.copyFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
    }

    /**
     * Copy file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFileInvalidSrcPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "copyFile", "versionId");
        try {
            valueSrcPath = (String)invalidizeTestValue("String", valueSrcPath, "copyFile", "srcPath");
            initialize("copyFile", "srcPath", "String", valueSrcPath);
            api.copyFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "srcPath", "copyFile", valueSrcPath);
        }
        if (needAssertResponse) {
            assertResponse("String", "srcPath", "copyFile");
        }
    }
    /**
     * Copy file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFileInvalidDestPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "copyFile", "versionId");
        try {
            valueDestPath = (String)invalidizeTestValue("String", valueDestPath, "copyFile", "destPath");
            initialize("copyFile", "destPath", "String", valueDestPath);
            api.copyFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "destPath", "copyFile", valueDestPath);
        }
        if (needAssertResponse) {
            assertResponse("String", "destPath", "copyFile");
        }
    }
    /**
     * Copy file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFileInvalidSrcStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "copyFile", "versionId");
        try {
            valueSrcStorageName = (String)invalidizeTestValue("String", valueSrcStorageName, "copyFile", "srcStorageName");
            initialize("copyFile", "srcStorageName", "String", valueSrcStorageName);
            api.copyFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "srcStorageName", "copyFile", valueSrcStorageName);
        }
        if (needAssertResponse) {
            assertResponse("String", "srcStorageName", "copyFile");
        }
    }
    /**
     * Copy file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFileInvalidDestStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "copyFile", "versionId");
        try {
            valueDestStorageName = (String)invalidizeTestValue("String", valueDestStorageName, "copyFile", "destStorageName");
            initialize("copyFile", "destStorageName", "String", valueDestStorageName);
            api.copyFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "destStorageName", "copyFile", valueDestStorageName);
        }
        if (needAssertResponse) {
            assertResponse("String", "destStorageName", "copyFile");
        }
    }
    /**
     * Copy file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFileInvalidVersionIdTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "copyFile", "versionId");
        try {
            valueVersionId = (String)invalidizeTestValue("String", valueVersionId, "copyFile", "versionId");
            initialize("copyFile", "versionId", "String", valueVersionId);
            api.copyFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "versionId", "copyFile", valueVersionId);
        }
        if (needAssertResponse) {
            assertResponse("String", "versionId", "copyFile");
        }
    }
    
    /**
     * Copy folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFolderTest() throws ApiException, Exception {
        initialize("copyFolder", null, null, null);
        ;
        String valueSrcPath = (String)getTestValue("String", "copyFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFolder", "destStorageName");
        api.copyFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
    }

    /**
     * Copy folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFolderInvalidSrcPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFolder", "destStorageName");
        try {
            valueSrcPath = (String)invalidizeTestValue("String", valueSrcPath, "copyFolder", "srcPath");
            initialize("copyFolder", "srcPath", "String", valueSrcPath);
            api.copyFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "srcPath", "copyFolder", valueSrcPath);
        }
        if (needAssertResponse) {
            assertResponse("String", "srcPath", "copyFolder");
        }
    }
    /**
     * Copy folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFolderInvalidDestPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFolder", "destStorageName");
        try {
            valueDestPath = (String)invalidizeTestValue("String", valueDestPath, "copyFolder", "destPath");
            initialize("copyFolder", "destPath", "String", valueDestPath);
            api.copyFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "destPath", "copyFolder", valueDestPath);
        }
        if (needAssertResponse) {
            assertResponse("String", "destPath", "copyFolder");
        }
    }
    /**
     * Copy folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFolderInvalidSrcStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFolder", "destStorageName");
        try {
            valueSrcStorageName = (String)invalidizeTestValue("String", valueSrcStorageName, "copyFolder", "srcStorageName");
            initialize("copyFolder", "srcStorageName", "String", valueSrcStorageName);
            api.copyFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "srcStorageName", "copyFolder", valueSrcStorageName);
        }
        if (needAssertResponse) {
            assertResponse("String", "srcStorageName", "copyFolder");
        }
    }
    /**
     * Copy folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFolderInvalidDestStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFolder", "destStorageName");
        try {
            valueDestStorageName = (String)invalidizeTestValue("String", valueDestStorageName, "copyFolder", "destStorageName");
            initialize("copyFolder", "destStorageName", "String", valueDestStorageName);
            api.copyFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "destStorageName", "copyFolder", valueDestStorageName);
        }
        if (needAssertResponse) {
            assertResponse("String", "destStorageName", "copyFolder");
        }
    }
    
    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyLayoutSlideTest() throws ApiException, Exception {
        initialize("copyLayoutSlide", null, null, null);
        LayoutSlide response = null;
        String valueName = (String)getTestValue("String", "copyLayoutSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyLayoutSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyLayoutSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyLayoutSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyLayoutSlide", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "copyLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyLayoutSlide", "storage");
        response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyLayoutSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyLayoutSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyLayoutSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyLayoutSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyLayoutSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyLayoutSlide", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "copyLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyLayoutSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "copyLayoutSlide", "name");
            initialize("copyLayoutSlide", "name", "String", valueName);
            LayoutSlide response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "copyLayoutSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "copyLayoutSlide");
        }
    }
    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyLayoutSlideInvalidCloneFromTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyLayoutSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyLayoutSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyLayoutSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyLayoutSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyLayoutSlide", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "copyLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyLayoutSlide", "storage");
        try {
            valueCloneFrom = (String)invalidizeTestValue("String", valueCloneFrom, "copyLayoutSlide", "cloneFrom");
            initialize("copyLayoutSlide", "cloneFrom", "String", valueCloneFrom);
            LayoutSlide response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "cloneFrom", "copyLayoutSlide", valueCloneFrom);
        }
        if (needAssertResponse) {
            assertResponse("String", "cloneFrom", "copyLayoutSlide");
        }
    }
    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyLayoutSlideInvalidCloneFromPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyLayoutSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyLayoutSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyLayoutSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyLayoutSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyLayoutSlide", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "copyLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyLayoutSlide", "storage");
        try {
            valueCloneFromPosition = (Integer)invalidizeTestValue("Integer", valueCloneFromPosition, "copyLayoutSlide", "cloneFromPosition");
            initialize("copyLayoutSlide", "cloneFromPosition", "Integer", valueCloneFromPosition);
            LayoutSlide response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "cloneFromPosition", "copyLayoutSlide", valueCloneFromPosition);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "cloneFromPosition", "copyLayoutSlide");
        }
    }
    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyLayoutSlideInvalidCloneFromPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyLayoutSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyLayoutSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyLayoutSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyLayoutSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyLayoutSlide", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "copyLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyLayoutSlide", "storage");
        try {
            valueCloneFromPassword = (String)invalidizeTestValue("String", valueCloneFromPassword, "copyLayoutSlide", "cloneFromPassword");
            initialize("copyLayoutSlide", "cloneFromPassword", "String", valueCloneFromPassword);
            LayoutSlide response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "cloneFromPassword", "copyLayoutSlide", valueCloneFromPassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "cloneFromPassword", "copyLayoutSlide");
        }
    }
    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyLayoutSlideInvalidCloneFromStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyLayoutSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyLayoutSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyLayoutSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyLayoutSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyLayoutSlide", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "copyLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyLayoutSlide", "storage");
        try {
            valueCloneFromStorage = (String)invalidizeTestValue("String", valueCloneFromStorage, "copyLayoutSlide", "cloneFromStorage");
            initialize("copyLayoutSlide", "cloneFromStorage", "String", valueCloneFromStorage);
            LayoutSlide response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "cloneFromStorage", "copyLayoutSlide", valueCloneFromStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "cloneFromStorage", "copyLayoutSlide");
        }
    }
    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyLayoutSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyLayoutSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyLayoutSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyLayoutSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyLayoutSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyLayoutSlide", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "copyLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyLayoutSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "copyLayoutSlide", "password");
            initialize("copyLayoutSlide", "password", "String", valuePassword);
            LayoutSlide response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "copyLayoutSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "copyLayoutSlide");
        }
    }
    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyLayoutSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyLayoutSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyLayoutSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyLayoutSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyLayoutSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyLayoutSlide", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "copyLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyLayoutSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "copyLayoutSlide", "folder");
            initialize("copyLayoutSlide", "folder", "String", valueFolder);
            LayoutSlide response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "copyLayoutSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "copyLayoutSlide");
        }
    }
    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyLayoutSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyLayoutSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyLayoutSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyLayoutSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyLayoutSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyLayoutSlide", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "copyLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyLayoutSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "copyLayoutSlide", "storage");
            initialize("copyLayoutSlide", "storage", "String", valueStorage);
            LayoutSlide response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "copyLayoutSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "copyLayoutSlide");
        }
    }
    
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyMasterSlideTest() throws ApiException, Exception {
        initialize("copyMasterSlide", null, null, null);
        MasterSlide response = null;
        String valueName = (String)getTestValue("String", "copyMasterSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyMasterSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyMasterSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyMasterSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyMasterSlide", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "copyMasterSlide", "applyToAll");
        String valuePassword = (String)getTestValue("String", "copyMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyMasterSlide", "storage");
        response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyMasterSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyMasterSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyMasterSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyMasterSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyMasterSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyMasterSlide", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "copyMasterSlide", "applyToAll");
        String valuePassword = (String)getTestValue("String", "copyMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyMasterSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "copyMasterSlide", "name");
            initialize("copyMasterSlide", "name", "String", valueName);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "copyMasterSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "copyMasterSlide");
        }
    }
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyMasterSlideInvalidCloneFromTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyMasterSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyMasterSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyMasterSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyMasterSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyMasterSlide", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "copyMasterSlide", "applyToAll");
        String valuePassword = (String)getTestValue("String", "copyMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyMasterSlide", "storage");
        try {
            valueCloneFrom = (String)invalidizeTestValue("String", valueCloneFrom, "copyMasterSlide", "cloneFrom");
            initialize("copyMasterSlide", "cloneFrom", "String", valueCloneFrom);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "cloneFrom", "copyMasterSlide", valueCloneFrom);
        }
        if (needAssertResponse) {
            assertResponse("String", "cloneFrom", "copyMasterSlide");
        }
    }
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyMasterSlideInvalidCloneFromPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyMasterSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyMasterSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyMasterSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyMasterSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyMasterSlide", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "copyMasterSlide", "applyToAll");
        String valuePassword = (String)getTestValue("String", "copyMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyMasterSlide", "storage");
        try {
            valueCloneFromPosition = (Integer)invalidizeTestValue("Integer", valueCloneFromPosition, "copyMasterSlide", "cloneFromPosition");
            initialize("copyMasterSlide", "cloneFromPosition", "Integer", valueCloneFromPosition);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "cloneFromPosition", "copyMasterSlide", valueCloneFromPosition);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "cloneFromPosition", "copyMasterSlide");
        }
    }
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyMasterSlideInvalidCloneFromPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyMasterSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyMasterSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyMasterSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyMasterSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyMasterSlide", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "copyMasterSlide", "applyToAll");
        String valuePassword = (String)getTestValue("String", "copyMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyMasterSlide", "storage");
        try {
            valueCloneFromPassword = (String)invalidizeTestValue("String", valueCloneFromPassword, "copyMasterSlide", "cloneFromPassword");
            initialize("copyMasterSlide", "cloneFromPassword", "String", valueCloneFromPassword);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "cloneFromPassword", "copyMasterSlide", valueCloneFromPassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "cloneFromPassword", "copyMasterSlide");
        }
    }
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyMasterSlideInvalidCloneFromStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyMasterSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyMasterSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyMasterSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyMasterSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyMasterSlide", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "copyMasterSlide", "applyToAll");
        String valuePassword = (String)getTestValue("String", "copyMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyMasterSlide", "storage");
        try {
            valueCloneFromStorage = (String)invalidizeTestValue("String", valueCloneFromStorage, "copyMasterSlide", "cloneFromStorage");
            initialize("copyMasterSlide", "cloneFromStorage", "String", valueCloneFromStorage);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "cloneFromStorage", "copyMasterSlide", valueCloneFromStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "cloneFromStorage", "copyMasterSlide");
        }
    }
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyMasterSlideInvalidApplyToAllTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyMasterSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyMasterSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyMasterSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyMasterSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyMasterSlide", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "copyMasterSlide", "applyToAll");
        String valuePassword = (String)getTestValue("String", "copyMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyMasterSlide", "storage");
        try {
            valueApplyToAll = (Boolean)invalidizeTestValue("Boolean", valueApplyToAll, "copyMasterSlide", "applyToAll");
            initialize("copyMasterSlide", "applyToAll", "Boolean", valueApplyToAll);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "applyToAll", "copyMasterSlide", valueApplyToAll);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "applyToAll", "copyMasterSlide");
        }
    }
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyMasterSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyMasterSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyMasterSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyMasterSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyMasterSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyMasterSlide", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "copyMasterSlide", "applyToAll");
        String valuePassword = (String)getTestValue("String", "copyMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyMasterSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "copyMasterSlide", "password");
            initialize("copyMasterSlide", "password", "String", valuePassword);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "copyMasterSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "copyMasterSlide");
        }
    }
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyMasterSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyMasterSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyMasterSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyMasterSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyMasterSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyMasterSlide", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "copyMasterSlide", "applyToAll");
        String valuePassword = (String)getTestValue("String", "copyMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyMasterSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "copyMasterSlide", "folder");
            initialize("copyMasterSlide", "folder", "String", valueFolder);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "copyMasterSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "copyMasterSlide");
        }
    }
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyMasterSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyMasterSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyMasterSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyMasterSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyMasterSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyMasterSlide", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "copyMasterSlide", "applyToAll");
        String valuePassword = (String)getTestValue("String", "copyMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyMasterSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "copyMasterSlide", "storage");
            initialize("copyMasterSlide", "storage", "String", valueStorage);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "copyMasterSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "copyMasterSlide");
        }
    }
    
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copySlideTest() throws ApiException, Exception {
        initialize("copySlide", null, null, null);
        Slides response = null;
        String valueName = (String)getTestValue("String", "copySlide", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "copySlide", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "copySlide", "position");
        String valueSource = (String)getTestValue("String", "copySlide", "source");
        String valueSourcePassword = (String)getTestValue("String", "copySlide", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "copySlide", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "copySlide", "password");
        String valueFolder = (String)getTestValue("String", "copySlide", "folder");
        String valueStorage = (String)getTestValue("String", "copySlide", "storage");
        response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copySlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copySlide", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "copySlide", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "copySlide", "position");
        String valueSource = (String)getTestValue("String", "copySlide", "source");
        String valueSourcePassword = (String)getTestValue("String", "copySlide", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "copySlide", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "copySlide", "password");
        String valueFolder = (String)getTestValue("String", "copySlide", "folder");
        String valueStorage = (String)getTestValue("String", "copySlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "copySlide", "name");
            initialize("copySlide", "name", "String", valueName);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "copySlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "copySlide");
        }
    }
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copySlideInvalidSlideToCopyTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copySlide", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "copySlide", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "copySlide", "position");
        String valueSource = (String)getTestValue("String", "copySlide", "source");
        String valueSourcePassword = (String)getTestValue("String", "copySlide", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "copySlide", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "copySlide", "password");
        String valueFolder = (String)getTestValue("String", "copySlide", "folder");
        String valueStorage = (String)getTestValue("String", "copySlide", "storage");
        try {
            valueSlideToCopy = (Integer)invalidizeTestValue("Integer", valueSlideToCopy, "copySlide", "slideToCopy");
            initialize("copySlide", "slideToCopy", "Integer", valueSlideToCopy);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideToCopy", "copySlide", valueSlideToCopy);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideToCopy", "copySlide");
        }
    }
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copySlideInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copySlide", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "copySlide", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "copySlide", "position");
        String valueSource = (String)getTestValue("String", "copySlide", "source");
        String valueSourcePassword = (String)getTestValue("String", "copySlide", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "copySlide", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "copySlide", "password");
        String valueFolder = (String)getTestValue("String", "copySlide", "folder");
        String valueStorage = (String)getTestValue("String", "copySlide", "storage");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "copySlide", "position");
            initialize("copySlide", "position", "Integer", valuePosition);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "position", "copySlide", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "position", "copySlide");
        }
    }
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copySlideInvalidSourceTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copySlide", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "copySlide", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "copySlide", "position");
        String valueSource = (String)getTestValue("String", "copySlide", "source");
        String valueSourcePassword = (String)getTestValue("String", "copySlide", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "copySlide", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "copySlide", "password");
        String valueFolder = (String)getTestValue("String", "copySlide", "folder");
        String valueStorage = (String)getTestValue("String", "copySlide", "storage");
        try {
            valueSource = (String)invalidizeTestValue("String", valueSource, "copySlide", "source");
            initialize("copySlide", "source", "String", valueSource);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "source", "copySlide", valueSource);
        }
        if (needAssertResponse) {
            assertResponse("String", "source", "copySlide");
        }
    }
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copySlideInvalidSourcePasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copySlide", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "copySlide", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "copySlide", "position");
        String valueSource = (String)getTestValue("String", "copySlide", "source");
        String valueSourcePassword = (String)getTestValue("String", "copySlide", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "copySlide", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "copySlide", "password");
        String valueFolder = (String)getTestValue("String", "copySlide", "folder");
        String valueStorage = (String)getTestValue("String", "copySlide", "storage");
        try {
            valueSourcePassword = (String)invalidizeTestValue("String", valueSourcePassword, "copySlide", "sourcePassword");
            initialize("copySlide", "sourcePassword", "String", valueSourcePassword);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "sourcePassword", "copySlide", valueSourcePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "sourcePassword", "copySlide");
        }
    }
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copySlideInvalidSourceStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copySlide", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "copySlide", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "copySlide", "position");
        String valueSource = (String)getTestValue("String", "copySlide", "source");
        String valueSourcePassword = (String)getTestValue("String", "copySlide", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "copySlide", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "copySlide", "password");
        String valueFolder = (String)getTestValue("String", "copySlide", "folder");
        String valueStorage = (String)getTestValue("String", "copySlide", "storage");
        try {
            valueSourceStorage = (String)invalidizeTestValue("String", valueSourceStorage, "copySlide", "sourceStorage");
            initialize("copySlide", "sourceStorage", "String", valueSourceStorage);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "sourceStorage", "copySlide", valueSourceStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "sourceStorage", "copySlide");
        }
    }
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copySlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copySlide", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "copySlide", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "copySlide", "position");
        String valueSource = (String)getTestValue("String", "copySlide", "source");
        String valueSourcePassword = (String)getTestValue("String", "copySlide", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "copySlide", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "copySlide", "password");
        String valueFolder = (String)getTestValue("String", "copySlide", "folder");
        String valueStorage = (String)getTestValue("String", "copySlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "copySlide", "password");
            initialize("copySlide", "password", "String", valuePassword);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "copySlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "copySlide");
        }
    }
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copySlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copySlide", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "copySlide", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "copySlide", "position");
        String valueSource = (String)getTestValue("String", "copySlide", "source");
        String valueSourcePassword = (String)getTestValue("String", "copySlide", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "copySlide", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "copySlide", "password");
        String valueFolder = (String)getTestValue("String", "copySlide", "folder");
        String valueStorage = (String)getTestValue("String", "copySlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "copySlide", "folder");
            initialize("copySlide", "folder", "String", valueFolder);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "copySlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "copySlide");
        }
    }
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copySlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copySlide", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "copySlide", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "copySlide", "position");
        String valueSource = (String)getTestValue("String", "copySlide", "source");
        String valueSourcePassword = (String)getTestValue("String", "copySlide", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "copySlide", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "copySlide", "password");
        String valueFolder = (String)getTestValue("String", "copySlide", "folder");
        String valueStorage = (String)getTestValue("String", "copySlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "copySlide", "storage");
            initialize("copySlide", "storage", "String", valueStorage);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "copySlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "copySlide");
        }
    }
    
    /**
     * Add an effect to slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationEffectTest() throws ApiException, Exception {
        initialize("createAnimationEffect", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "createAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationEffect", "slideIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationEffect", "storage");
        response = api.createAnimationEffect(valueName, valueSlideIndex, valueEffect, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Add an effect to slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationEffectInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationEffect", "slideIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationEffect", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createAnimationEffect", "name");
            initialize("createAnimationEffect", "name", "String", valueName);
            SlideAnimation response = api.createAnimationEffect(valueName, valueSlideIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "createAnimationEffect", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "createAnimationEffect");
        }
    }
    /**
     * Add an effect to slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationEffectInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationEffect", "slideIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationEffect", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createAnimationEffect", "slideIndex");
            initialize("createAnimationEffect", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.createAnimationEffect(valueName, valueSlideIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "createAnimationEffect", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "createAnimationEffect");
        }
    }
    /**
     * Add an effect to slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationEffectInvalidEffectTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationEffect", "slideIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationEffect", "storage");
        try {
            valueEffect = (Effect)invalidizeTestValue("Effect", valueEffect, "createAnimationEffect", "effect");
            initialize("createAnimationEffect", "effect", "Effect", valueEffect);
            SlideAnimation response = api.createAnimationEffect(valueName, valueSlideIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Effect", "effect", "createAnimationEffect", valueEffect);
        }
        if (needAssertResponse) {
            assertResponse("Effect", "effect", "createAnimationEffect");
        }
    }
    /**
     * Add an effect to slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationEffectInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationEffect", "slideIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationEffect", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createAnimationEffect", "password");
            initialize("createAnimationEffect", "password", "String", valuePassword);
            SlideAnimation response = api.createAnimationEffect(valueName, valueSlideIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createAnimationEffect", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createAnimationEffect");
        }
    }
    /**
     * Add an effect to slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationEffectInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationEffect", "slideIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationEffect", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createAnimationEffect", "folder");
            initialize("createAnimationEffect", "folder", "String", valueFolder);
            SlideAnimation response = api.createAnimationEffect(valueName, valueSlideIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "createAnimationEffect", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "createAnimationEffect");
        }
    }
    /**
     * Add an effect to slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationEffectInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationEffect", "slideIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationEffect", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createAnimationEffect", "storage");
            initialize("createAnimationEffect", "storage", "String", valueStorage);
            SlideAnimation response = api.createAnimationEffect(valueName, valueSlideIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "createAnimationEffect", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "createAnimationEffect");
        }
    }
    
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceTest() throws ApiException, Exception {
        initialize("createAnimationInteractiveSequence", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequence", "slideIndex");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "createAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequence", "storage");
        response = api.createAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequence, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequence", "slideIndex");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "createAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequence", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createAnimationInteractiveSequence", "name");
            initialize("createAnimationInteractiveSequence", "name", "String", valueName);
            SlideAnimation response = api.createAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequence, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "createAnimationInteractiveSequence", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "createAnimationInteractiveSequence");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequence", "slideIndex");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "createAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequence", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createAnimationInteractiveSequence", "slideIndex");
            initialize("createAnimationInteractiveSequence", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.createAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequence, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "createAnimationInteractiveSequence", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "createAnimationInteractiveSequence");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceInvalidSequenceTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequence", "slideIndex");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "createAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequence", "storage");
        try {
            valueSequence = (InteractiveSequence)invalidizeTestValue("InteractiveSequence", valueSequence, "createAnimationInteractiveSequence", "sequence");
            initialize("createAnimationInteractiveSequence", "sequence", "InteractiveSequence", valueSequence);
            SlideAnimation response = api.createAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequence, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "InteractiveSequence", "sequence", "createAnimationInteractiveSequence", valueSequence);
        }
        if (needAssertResponse) {
            assertResponse("InteractiveSequence", "sequence", "createAnimationInteractiveSequence");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequence", "slideIndex");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "createAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequence", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createAnimationInteractiveSequence", "password");
            initialize("createAnimationInteractiveSequence", "password", "String", valuePassword);
            SlideAnimation response = api.createAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequence, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createAnimationInteractiveSequence", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createAnimationInteractiveSequence");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequence", "slideIndex");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "createAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequence", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createAnimationInteractiveSequence", "folder");
            initialize("createAnimationInteractiveSequence", "folder", "String", valueFolder);
            SlideAnimation response = api.createAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequence, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "createAnimationInteractiveSequence", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "createAnimationInteractiveSequence");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequence", "slideIndex");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "createAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequence", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createAnimationInteractiveSequence", "storage");
            initialize("createAnimationInteractiveSequence", "storage", "String", valueStorage);
            SlideAnimation response = api.createAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequence, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "createAnimationInteractiveSequence", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "createAnimationInteractiveSequence");
        }
    }
    
    /**
     * Add an animation effect to a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceEffectTest() throws ApiException, Exception {
        initialize("createAnimationInteractiveSequenceEffect", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "storage");
        response = api.createAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Add an animation effect to a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceEffectInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createAnimationInteractiveSequenceEffect", "name");
            initialize("createAnimationInteractiveSequenceEffect", "name", "String", valueName);
            SlideAnimation response = api.createAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "createAnimationInteractiveSequenceEffect", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "createAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Add an animation effect to a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceEffectInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createAnimationInteractiveSequenceEffect", "slideIndex");
            initialize("createAnimationInteractiveSequenceEffect", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.createAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "createAnimationInteractiveSequenceEffect", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "createAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Add an animation effect to a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceEffectInvalidSequenceIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSequenceIndex = (Integer)invalidizeTestValue("Integer", valueSequenceIndex, "createAnimationInteractiveSequenceEffect", "sequenceIndex");
            initialize("createAnimationInteractiveSequenceEffect", "sequenceIndex", "Integer", valueSequenceIndex);
            SlideAnimation response = api.createAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "sequenceIndex", "createAnimationInteractiveSequenceEffect", valueSequenceIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "sequenceIndex", "createAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Add an animation effect to a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceEffectInvalidEffectTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "storage");
        try {
            valueEffect = (Effect)invalidizeTestValue("Effect", valueEffect, "createAnimationInteractiveSequenceEffect", "effect");
            initialize("createAnimationInteractiveSequenceEffect", "effect", "Effect", valueEffect);
            SlideAnimation response = api.createAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Effect", "effect", "createAnimationInteractiveSequenceEffect", valueEffect);
        }
        if (needAssertResponse) {
            assertResponse("Effect", "effect", "createAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Add an animation effect to a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceEffectInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createAnimationInteractiveSequenceEffect", "password");
            initialize("createAnimationInteractiveSequenceEffect", "password", "String", valuePassword);
            SlideAnimation response = api.createAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createAnimationInteractiveSequenceEffect", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Add an animation effect to a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceEffectInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createAnimationInteractiveSequenceEffect", "folder");
            initialize("createAnimationInteractiveSequenceEffect", "folder", "String", valueFolder);
            SlideAnimation response = api.createAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "createAnimationInteractiveSequenceEffect", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "createAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Add an animation effect to a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceEffectInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createAnimationInteractiveSequenceEffect", "storage");
            initialize("createAnimationInteractiveSequenceEffect", "storage", "String", valueStorage);
            SlideAnimation response = api.createAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "createAnimationInteractiveSequenceEffect", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "createAnimationInteractiveSequenceEffect");
        }
    }
    
    /**
     * Add a new category to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartCategoryTest() throws ApiException, Exception {
        initialize("createChartCategory", null, null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "createChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartCategory", "shapeIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "createChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "createChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "createChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "createChartCategory", "storage");
        response = api.createChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategory, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Add a new category to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartCategoryInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartCategory", "shapeIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "createChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "createChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "createChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "createChartCategory", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createChartCategory", "name");
            initialize("createChartCategory", "name", "String", valueName);
            Chart response = api.createChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "createChartCategory", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "createChartCategory");
        }
    }
    /**
     * Add a new category to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartCategoryInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartCategory", "shapeIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "createChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "createChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "createChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "createChartCategory", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createChartCategory", "slideIndex");
            initialize("createChartCategory", "slideIndex", "Integer", valueSlideIndex);
            Chart response = api.createChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "createChartCategory", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "createChartCategory");
        }
    }
    /**
     * Add a new category to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartCategoryInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartCategory", "shapeIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "createChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "createChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "createChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "createChartCategory", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "createChartCategory", "shapeIndex");
            initialize("createChartCategory", "shapeIndex", "Integer", valueShapeIndex);
            Chart response = api.createChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "createChartCategory", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "createChartCategory");
        }
    }
    /**
     * Add a new category to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartCategoryInvalidCategoryTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartCategory", "shapeIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "createChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "createChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "createChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "createChartCategory", "storage");
        try {
            valueCategory = (ChartCategory)invalidizeTestValue("ChartCategory", valueCategory, "createChartCategory", "category");
            initialize("createChartCategory", "category", "ChartCategory", valueCategory);
            Chart response = api.createChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ChartCategory", "category", "createChartCategory", valueCategory);
        }
        if (needAssertResponse) {
            assertResponse("ChartCategory", "category", "createChartCategory");
        }
    }
    /**
     * Add a new category to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartCategoryInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartCategory", "shapeIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "createChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "createChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "createChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "createChartCategory", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createChartCategory", "password");
            initialize("createChartCategory", "password", "String", valuePassword);
            Chart response = api.createChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createChartCategory", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createChartCategory");
        }
    }
    /**
     * Add a new category to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartCategoryInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartCategory", "shapeIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "createChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "createChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "createChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "createChartCategory", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createChartCategory", "folder");
            initialize("createChartCategory", "folder", "String", valueFolder);
            Chart response = api.createChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "createChartCategory", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "createChartCategory");
        }
    }
    /**
     * Add a new category to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartCategoryInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartCategory", "shapeIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "createChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "createChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "createChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "createChartCategory", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createChartCategory", "storage");
            initialize("createChartCategory", "storage", "String", valueStorage);
            Chart response = api.createChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "createChartCategory", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "createChartCategory");
        }
    }
    
    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartDataPointTest() throws ApiException, Exception {
        initialize("createChartDataPoint", null, null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "createChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "createChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "createChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "createChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "createChartDataPoint", "storage");
        response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartDataPointInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "createChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "createChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "createChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "createChartDataPoint", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createChartDataPoint", "name");
            initialize("createChartDataPoint", "name", "String", valueName);
            Chart response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "createChartDataPoint", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "createChartDataPoint");
        }
    }
    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartDataPointInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "createChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "createChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "createChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "createChartDataPoint", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createChartDataPoint", "slideIndex");
            initialize("createChartDataPoint", "slideIndex", "Integer", valueSlideIndex);
            Chart response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "createChartDataPoint", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "createChartDataPoint");
        }
    }
    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartDataPointInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "createChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "createChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "createChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "createChartDataPoint", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "createChartDataPoint", "shapeIndex");
            initialize("createChartDataPoint", "shapeIndex", "Integer", valueShapeIndex);
            Chart response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "createChartDataPoint", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "createChartDataPoint");
        }
    }
    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartDataPointInvalidSeriesIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "createChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "createChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "createChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "createChartDataPoint", "storage");
        try {
            valueSeriesIndex = (Integer)invalidizeTestValue("Integer", valueSeriesIndex, "createChartDataPoint", "seriesIndex");
            initialize("createChartDataPoint", "seriesIndex", "Integer", valueSeriesIndex);
            Chart response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "seriesIndex", "createChartDataPoint", valueSeriesIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "seriesIndex", "createChartDataPoint");
        }
    }
    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartDataPointInvalidDataPointTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "createChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "createChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "createChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "createChartDataPoint", "storage");
        try {
            valueDataPoint = (DataPoint)invalidizeTestValue("DataPoint", valueDataPoint, "createChartDataPoint", "dataPoint");
            initialize("createChartDataPoint", "dataPoint", "DataPoint", valueDataPoint);
            Chart response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "DataPoint", "dataPoint", "createChartDataPoint", valueDataPoint);
        }
        if (needAssertResponse) {
            assertResponse("DataPoint", "dataPoint", "createChartDataPoint");
        }
    }
    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartDataPointInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "createChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "createChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "createChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "createChartDataPoint", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createChartDataPoint", "password");
            initialize("createChartDataPoint", "password", "String", valuePassword);
            Chart response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createChartDataPoint", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createChartDataPoint");
        }
    }
    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartDataPointInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "createChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "createChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "createChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "createChartDataPoint", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createChartDataPoint", "folder");
            initialize("createChartDataPoint", "folder", "String", valueFolder);
            Chart response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "createChartDataPoint", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "createChartDataPoint");
        }
    }
    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartDataPointInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "createChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "createChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "createChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "createChartDataPoint", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createChartDataPoint", "storage");
            initialize("createChartDataPoint", "storage", "String", valueStorage);
            Chart response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "createChartDataPoint", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "createChartDataPoint");
        }
    }
    
    /**
     * Add a new series to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartSeriesTest() throws ApiException, Exception {
        initialize("createChartSeries", null, null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "createChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartSeries", "shapeIndex");
        Series valueSeries = (Series)getTestValue("Series", "createChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "createChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "createChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "createChartSeries", "storage");
        response = api.createChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeries, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Add a new series to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartSeriesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartSeries", "shapeIndex");
        Series valueSeries = (Series)getTestValue("Series", "createChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "createChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "createChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "createChartSeries", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createChartSeries", "name");
            initialize("createChartSeries", "name", "String", valueName);
            Chart response = api.createChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "createChartSeries", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "createChartSeries");
        }
    }
    /**
     * Add a new series to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartSeriesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartSeries", "shapeIndex");
        Series valueSeries = (Series)getTestValue("Series", "createChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "createChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "createChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "createChartSeries", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createChartSeries", "slideIndex");
            initialize("createChartSeries", "slideIndex", "Integer", valueSlideIndex);
            Chart response = api.createChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "createChartSeries", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "createChartSeries");
        }
    }
    /**
     * Add a new series to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartSeriesInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartSeries", "shapeIndex");
        Series valueSeries = (Series)getTestValue("Series", "createChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "createChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "createChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "createChartSeries", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "createChartSeries", "shapeIndex");
            initialize("createChartSeries", "shapeIndex", "Integer", valueShapeIndex);
            Chart response = api.createChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "createChartSeries", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "createChartSeries");
        }
    }
    /**
     * Add a new series to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartSeriesInvalidSeriesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartSeries", "shapeIndex");
        Series valueSeries = (Series)getTestValue("Series", "createChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "createChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "createChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "createChartSeries", "storage");
        try {
            valueSeries = (Series)invalidizeTestValue("Series", valueSeries, "createChartSeries", "series");
            initialize("createChartSeries", "series", "Series", valueSeries);
            Chart response = api.createChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Series", "series", "createChartSeries", valueSeries);
        }
        if (needAssertResponse) {
            assertResponse("Series", "series", "createChartSeries");
        }
    }
    /**
     * Add a new series to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartSeriesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartSeries", "shapeIndex");
        Series valueSeries = (Series)getTestValue("Series", "createChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "createChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "createChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "createChartSeries", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createChartSeries", "password");
            initialize("createChartSeries", "password", "String", valuePassword);
            Chart response = api.createChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createChartSeries", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createChartSeries");
        }
    }
    /**
     * Add a new series to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartSeriesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartSeries", "shapeIndex");
        Series valueSeries = (Series)getTestValue("Series", "createChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "createChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "createChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "createChartSeries", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createChartSeries", "folder");
            initialize("createChartSeries", "folder", "String", valueFolder);
            Chart response = api.createChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "createChartSeries", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "createChartSeries");
        }
    }
    /**
     * Add a new series to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartSeriesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartSeries", "shapeIndex");
        Series valueSeries = (Series)getTestValue("Series", "createChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "createChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "createChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "createChartSeries", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createChartSeries", "storage");
            initialize("createChartSeries", "storage", "String", valueStorage);
            Chart response = api.createChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "createChartSeries", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "createChartSeries");
        }
    }
    
    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentTest() throws ApiException, Exception {
        initialize("createComment", null, null, null);
        SlideComments response = null;
        String valueName = (String)getTestValue("String", "createComment", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createComment", "slideIndex");
        SlideCommentBase valueDto = (SlideCommentBase)getTestValue("SlideCommentBase", "createComment", "dto");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createComment", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "createComment", "password");
        String valueFolder = (String)getTestValue("String", "createComment", "folder");
        String valueStorage = (String)getTestValue("String", "createComment", "storage");
        response = api.createComment(valueName, valueSlideIndex, valueDto, valueShapeIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createComment", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createComment", "slideIndex");
        SlideCommentBase valueDto = (SlideCommentBase)getTestValue("SlideCommentBase", "createComment", "dto");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createComment", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "createComment", "password");
        String valueFolder = (String)getTestValue("String", "createComment", "folder");
        String valueStorage = (String)getTestValue("String", "createComment", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createComment", "name");
            initialize("createComment", "name", "String", valueName);
            SlideComments response = api.createComment(valueName, valueSlideIndex, valueDto, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "createComment", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "createComment");
        }
    }
    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createComment", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createComment", "slideIndex");
        SlideCommentBase valueDto = (SlideCommentBase)getTestValue("SlideCommentBase", "createComment", "dto");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createComment", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "createComment", "password");
        String valueFolder = (String)getTestValue("String", "createComment", "folder");
        String valueStorage = (String)getTestValue("String", "createComment", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createComment", "slideIndex");
            initialize("createComment", "slideIndex", "Integer", valueSlideIndex);
            SlideComments response = api.createComment(valueName, valueSlideIndex, valueDto, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "createComment", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "createComment");
        }
    }
    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createComment", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createComment", "slideIndex");
        SlideCommentBase valueDto = (SlideCommentBase)getTestValue("SlideCommentBase", "createComment", "dto");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createComment", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "createComment", "password");
        String valueFolder = (String)getTestValue("String", "createComment", "folder");
        String valueStorage = (String)getTestValue("String", "createComment", "storage");
        try {
            valueDto = (SlideCommentBase)invalidizeTestValue("SlideCommentBase", valueDto, "createComment", "dto");
            initialize("createComment", "dto", "SlideCommentBase", valueDto);
            SlideComments response = api.createComment(valueName, valueSlideIndex, valueDto, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SlideCommentBase", "dto", "createComment", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("SlideCommentBase", "dto", "createComment");
        }
    }
    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createComment", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createComment", "slideIndex");
        SlideCommentBase valueDto = (SlideCommentBase)getTestValue("SlideCommentBase", "createComment", "dto");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createComment", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "createComment", "password");
        String valueFolder = (String)getTestValue("String", "createComment", "folder");
        String valueStorage = (String)getTestValue("String", "createComment", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "createComment", "shapeIndex");
            initialize("createComment", "shapeIndex", "Integer", valueShapeIndex);
            SlideComments response = api.createComment(valueName, valueSlideIndex, valueDto, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "createComment", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "createComment");
        }
    }
    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createComment", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createComment", "slideIndex");
        SlideCommentBase valueDto = (SlideCommentBase)getTestValue("SlideCommentBase", "createComment", "dto");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createComment", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "createComment", "password");
        String valueFolder = (String)getTestValue("String", "createComment", "folder");
        String valueStorage = (String)getTestValue("String", "createComment", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createComment", "password");
            initialize("createComment", "password", "String", valuePassword);
            SlideComments response = api.createComment(valueName, valueSlideIndex, valueDto, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createComment", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createComment");
        }
    }
    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createComment", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createComment", "slideIndex");
        SlideCommentBase valueDto = (SlideCommentBase)getTestValue("SlideCommentBase", "createComment", "dto");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createComment", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "createComment", "password");
        String valueFolder = (String)getTestValue("String", "createComment", "folder");
        String valueStorage = (String)getTestValue("String", "createComment", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createComment", "folder");
            initialize("createComment", "folder", "String", valueFolder);
            SlideComments response = api.createComment(valueName, valueSlideIndex, valueDto, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "createComment", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "createComment");
        }
    }
    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createComment", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createComment", "slideIndex");
        SlideCommentBase valueDto = (SlideCommentBase)getTestValue("SlideCommentBase", "createComment", "dto");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createComment", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "createComment", "password");
        String valueFolder = (String)getTestValue("String", "createComment", "folder");
        String valueStorage = (String)getTestValue("String", "createComment", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createComment", "storage");
            initialize("createComment", "storage", "String", valueStorage);
            SlideComments response = api.createComment(valueName, valueSlideIndex, valueDto, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "createComment", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "createComment");
        }
    }
    
    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentOnlineTest() throws ApiException, Exception {
        initialize("createCommentOnline", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createCommentOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createCommentOnline", "slideIndex");
        SlideCommentBase valueDto = (SlideCommentBase)getTestValue("SlideCommentBase", "createCommentOnline", "dto");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createCommentOnline", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "createCommentOnline", "password");
        response = api.createCommentOnline(valueDocument, valueSlideIndex, valueDto, valueShapeIndex, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createCommentOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createCommentOnline", "slideIndex");
        SlideCommentBase valueDto = (SlideCommentBase)getTestValue("SlideCommentBase", "createCommentOnline", "dto");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createCommentOnline", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "createCommentOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "createCommentOnline", "document");
            initialize("createCommentOnline", "document", "byte[]", valueDocument);
            File response = api.createCommentOnline(valueDocument, valueSlideIndex, valueDto, valueShapeIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "createCommentOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "createCommentOnline");
        }
    }
    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentOnlineInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createCommentOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createCommentOnline", "slideIndex");
        SlideCommentBase valueDto = (SlideCommentBase)getTestValue("SlideCommentBase", "createCommentOnline", "dto");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createCommentOnline", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "createCommentOnline", "password");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createCommentOnline", "slideIndex");
            initialize("createCommentOnline", "slideIndex", "Integer", valueSlideIndex);
            File response = api.createCommentOnline(valueDocument, valueSlideIndex, valueDto, valueShapeIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "createCommentOnline", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "createCommentOnline");
        }
    }
    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentOnlineInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createCommentOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createCommentOnline", "slideIndex");
        SlideCommentBase valueDto = (SlideCommentBase)getTestValue("SlideCommentBase", "createCommentOnline", "dto");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createCommentOnline", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "createCommentOnline", "password");
        try {
            valueDto = (SlideCommentBase)invalidizeTestValue("SlideCommentBase", valueDto, "createCommentOnline", "dto");
            initialize("createCommentOnline", "dto", "SlideCommentBase", valueDto);
            File response = api.createCommentOnline(valueDocument, valueSlideIndex, valueDto, valueShapeIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SlideCommentBase", "dto", "createCommentOnline", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("SlideCommentBase", "dto", "createCommentOnline");
        }
    }
    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentOnlineInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createCommentOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createCommentOnline", "slideIndex");
        SlideCommentBase valueDto = (SlideCommentBase)getTestValue("SlideCommentBase", "createCommentOnline", "dto");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createCommentOnline", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "createCommentOnline", "password");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "createCommentOnline", "shapeIndex");
            initialize("createCommentOnline", "shapeIndex", "Integer", valueShapeIndex);
            File response = api.createCommentOnline(valueDocument, valueSlideIndex, valueDto, valueShapeIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "createCommentOnline", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "createCommentOnline");
        }
    }
    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createCommentOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createCommentOnline", "slideIndex");
        SlideCommentBase valueDto = (SlideCommentBase)getTestValue("SlideCommentBase", "createCommentOnline", "dto");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createCommentOnline", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "createCommentOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createCommentOnline", "password");
            initialize("createCommentOnline", "password", "String", valuePassword);
            File response = api.createCommentOnline(valueDocument, valueSlideIndex, valueDto, valueShapeIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createCommentOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createCommentOnline");
        }
    }
    
    /**
     * Create the folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFolderTest() throws ApiException, Exception {
        initialize("createFolder", null, null, null);
        ;
        String valuePath = (String)getTestValue("String", "createFolder", "path");
        String valueStorageName = (String)getTestValue("String", "createFolder", "storageName");
        api.createFolder(valuePath, valueStorageName);
    }

    /**
     * Create the folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFolderInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "createFolder", "path");
        String valueStorageName = (String)getTestValue("String", "createFolder", "storageName");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "createFolder", "path");
            initialize("createFolder", "path", "String", valuePath);
            api.createFolder(valuePath, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "path", "createFolder", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("String", "path", "createFolder");
        }
    }
    /**
     * Create the folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFolderInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "createFolder", "path");
        String valueStorageName = (String)getTestValue("String", "createFolder", "storageName");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "createFolder", "storageName");
            initialize("createFolder", "storageName", "String", valueStorageName);
            api.createFolder(valuePath, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storageName", "createFolder", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("String", "storageName", "createFolder");
        }
    }
    
    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageWatermarkTest() throws ApiException, Exception {
        initialize("createImageWatermark", null, null, null);
        ;
        String valueName = (String)getTestValue("String", "createImageWatermark", "name");
        byte[] valueImage = (byte[])getTestValue("byte[]", "createImageWatermark", "image");
        PictureFrame valuePictureFrame = (PictureFrame)getTestValue("PictureFrame", "createImageWatermark", "pictureFrame");
        String valuePassword = (String)getTestValue("String", "createImageWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createImageWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createImageWatermark", "storage");
        api.createImageWatermark(valueName, valueImage, valuePictureFrame, valuePassword, valueFolder, valueStorage);
    }

    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageWatermarkInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createImageWatermark", "name");
        byte[] valueImage = (byte[])getTestValue("byte[]", "createImageWatermark", "image");
        PictureFrame valuePictureFrame = (PictureFrame)getTestValue("PictureFrame", "createImageWatermark", "pictureFrame");
        String valuePassword = (String)getTestValue("String", "createImageWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createImageWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createImageWatermark", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createImageWatermark", "name");
            initialize("createImageWatermark", "name", "String", valueName);
            api.createImageWatermark(valueName, valueImage, valuePictureFrame, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "createImageWatermark", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "createImageWatermark");
        }
    }
    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageWatermarkInvalidImageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createImageWatermark", "name");
        byte[] valueImage = (byte[])getTestValue("byte[]", "createImageWatermark", "image");
        PictureFrame valuePictureFrame = (PictureFrame)getTestValue("PictureFrame", "createImageWatermark", "pictureFrame");
        String valuePassword = (String)getTestValue("String", "createImageWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createImageWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createImageWatermark", "storage");
        try {
            valueImage = (byte[])invalidizeTestValue("byte[]", valueImage, "createImageWatermark", "image");
            initialize("createImageWatermark", "image", "byte[]", valueImage);
            api.createImageWatermark(valueName, valueImage, valuePictureFrame, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "image", "createImageWatermark", valueImage);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "image", "createImageWatermark");
        }
    }
    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageWatermarkInvalidPictureFrameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createImageWatermark", "name");
        byte[] valueImage = (byte[])getTestValue("byte[]", "createImageWatermark", "image");
        PictureFrame valuePictureFrame = (PictureFrame)getTestValue("PictureFrame", "createImageWatermark", "pictureFrame");
        String valuePassword = (String)getTestValue("String", "createImageWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createImageWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createImageWatermark", "storage");
        try {
            valuePictureFrame = (PictureFrame)invalidizeTestValue("PictureFrame", valuePictureFrame, "createImageWatermark", "pictureFrame");
            initialize("createImageWatermark", "pictureFrame", "PictureFrame", valuePictureFrame);
            api.createImageWatermark(valueName, valueImage, valuePictureFrame, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "PictureFrame", "pictureFrame", "createImageWatermark", valuePictureFrame);
        }
        if (needAssertResponse) {
            assertResponse("PictureFrame", "pictureFrame", "createImageWatermark");
        }
    }
    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageWatermarkInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createImageWatermark", "name");
        byte[] valueImage = (byte[])getTestValue("byte[]", "createImageWatermark", "image");
        PictureFrame valuePictureFrame = (PictureFrame)getTestValue("PictureFrame", "createImageWatermark", "pictureFrame");
        String valuePassword = (String)getTestValue("String", "createImageWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createImageWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createImageWatermark", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createImageWatermark", "password");
            initialize("createImageWatermark", "password", "String", valuePassword);
            api.createImageWatermark(valueName, valueImage, valuePictureFrame, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createImageWatermark", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createImageWatermark");
        }
    }
    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageWatermarkInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createImageWatermark", "name");
        byte[] valueImage = (byte[])getTestValue("byte[]", "createImageWatermark", "image");
        PictureFrame valuePictureFrame = (PictureFrame)getTestValue("PictureFrame", "createImageWatermark", "pictureFrame");
        String valuePassword = (String)getTestValue("String", "createImageWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createImageWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createImageWatermark", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createImageWatermark", "folder");
            initialize("createImageWatermark", "folder", "String", valueFolder);
            api.createImageWatermark(valueName, valueImage, valuePictureFrame, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "createImageWatermark", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "createImageWatermark");
        }
    }
    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageWatermarkInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createImageWatermark", "name");
        byte[] valueImage = (byte[])getTestValue("byte[]", "createImageWatermark", "image");
        PictureFrame valuePictureFrame = (PictureFrame)getTestValue("PictureFrame", "createImageWatermark", "pictureFrame");
        String valuePassword = (String)getTestValue("String", "createImageWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createImageWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createImageWatermark", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createImageWatermark", "storage");
            initialize("createImageWatermark", "storage", "String", valueStorage);
            api.createImageWatermark(valueName, valueImage, valuePictureFrame, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "createImageWatermark", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "createImageWatermark");
        }
    }
    
    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageWatermarkOnlineTest() throws ApiException, Exception {
        initialize("createImageWatermarkOnline", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createImageWatermarkOnline", "document");
        byte[] valueImage = (byte[])getTestValue("byte[]", "createImageWatermarkOnline", "image");
        PictureFrame valuePictureFrame = (PictureFrame)getTestValue("PictureFrame", "createImageWatermarkOnline", "pictureFrame");
        String valuePassword = (String)getTestValue("String", "createImageWatermarkOnline", "password");
        response = api.createImageWatermarkOnline(valueDocument, valueImage, valuePictureFrame, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageWatermarkOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createImageWatermarkOnline", "document");
        byte[] valueImage = (byte[])getTestValue("byte[]", "createImageWatermarkOnline", "image");
        PictureFrame valuePictureFrame = (PictureFrame)getTestValue("PictureFrame", "createImageWatermarkOnline", "pictureFrame");
        String valuePassword = (String)getTestValue("String", "createImageWatermarkOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "createImageWatermarkOnline", "document");
            initialize("createImageWatermarkOnline", "document", "byte[]", valueDocument);
            File response = api.createImageWatermarkOnline(valueDocument, valueImage, valuePictureFrame, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "createImageWatermarkOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "createImageWatermarkOnline");
        }
    }
    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageWatermarkOnlineInvalidImageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createImageWatermarkOnline", "document");
        byte[] valueImage = (byte[])getTestValue("byte[]", "createImageWatermarkOnline", "image");
        PictureFrame valuePictureFrame = (PictureFrame)getTestValue("PictureFrame", "createImageWatermarkOnline", "pictureFrame");
        String valuePassword = (String)getTestValue("String", "createImageWatermarkOnline", "password");
        try {
            valueImage = (byte[])invalidizeTestValue("byte[]", valueImage, "createImageWatermarkOnline", "image");
            initialize("createImageWatermarkOnline", "image", "byte[]", valueImage);
            File response = api.createImageWatermarkOnline(valueDocument, valueImage, valuePictureFrame, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "image", "createImageWatermarkOnline", valueImage);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "image", "createImageWatermarkOnline");
        }
    }
    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageWatermarkOnlineInvalidPictureFrameTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createImageWatermarkOnline", "document");
        byte[] valueImage = (byte[])getTestValue("byte[]", "createImageWatermarkOnline", "image");
        PictureFrame valuePictureFrame = (PictureFrame)getTestValue("PictureFrame", "createImageWatermarkOnline", "pictureFrame");
        String valuePassword = (String)getTestValue("String", "createImageWatermarkOnline", "password");
        try {
            valuePictureFrame = (PictureFrame)invalidizeTestValue("PictureFrame", valuePictureFrame, "createImageWatermarkOnline", "pictureFrame");
            initialize("createImageWatermarkOnline", "pictureFrame", "PictureFrame", valuePictureFrame);
            File response = api.createImageWatermarkOnline(valueDocument, valueImage, valuePictureFrame, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "PictureFrame", "pictureFrame", "createImageWatermarkOnline", valuePictureFrame);
        }
        if (needAssertResponse) {
            assertResponse("PictureFrame", "pictureFrame", "createImageWatermarkOnline");
        }
    }
    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageWatermarkOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createImageWatermarkOnline", "document");
        byte[] valueImage = (byte[])getTestValue("byte[]", "createImageWatermarkOnline", "image");
        PictureFrame valuePictureFrame = (PictureFrame)getTestValue("PictureFrame", "createImageWatermarkOnline", "pictureFrame");
        String valuePassword = (String)getTestValue("String", "createImageWatermarkOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createImageWatermarkOnline", "password");
            initialize("createImageWatermarkOnline", "password", "String", valuePassword);
            File response = api.createImageWatermarkOnline(valueDocument, valueImage, valuePictureFrame, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createImageWatermarkOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createImageWatermarkOnline");
        }
    }
    
    /**
     * Add new notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideTest() throws ApiException, Exception {
        initialize("createNotesSlide", null, null, null);
        NotesSlide response = null;
        String valueName = (String)getTestValue("String", "createNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "createNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "createNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlide", "storage");
        response = api.createNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Add new notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "createNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "createNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createNotesSlide", "name");
            initialize("createNotesSlide", "name", "String", valueName);
            NotesSlide response = api.createNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "createNotesSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "createNotesSlide");
        }
    }
    /**
     * Add new notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "createNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "createNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createNotesSlide", "slideIndex");
            initialize("createNotesSlide", "slideIndex", "Integer", valueSlideIndex);
            NotesSlide response = api.createNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "createNotesSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "createNotesSlide");
        }
    }
    /**
     * Add new notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "createNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "createNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlide", "storage");
        try {
            valueDto = (NotesSlide)invalidizeTestValue("NotesSlide", valueDto, "createNotesSlide", "dto");
            initialize("createNotesSlide", "dto", "NotesSlide", valueDto);
            NotesSlide response = api.createNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "NotesSlide", "dto", "createNotesSlide", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("NotesSlide", "dto", "createNotesSlide");
        }
    }
    /**
     * Add new notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "createNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "createNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createNotesSlide", "password");
            initialize("createNotesSlide", "password", "String", valuePassword);
            NotesSlide response = api.createNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createNotesSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createNotesSlide");
        }
    }
    /**
     * Add new notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "createNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "createNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createNotesSlide", "folder");
            initialize("createNotesSlide", "folder", "String", valueFolder);
            NotesSlide response = api.createNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "createNotesSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "createNotesSlide");
        }
    }
    /**
     * Add new notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "createNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "createNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createNotesSlide", "storage");
            initialize("createNotesSlide", "storage", "String", valueStorage);
            NotesSlide response = api.createNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "createNotesSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "createNotesSlide");
        }
    }
    
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createParagraphTest() throws ApiException, Exception {
        initialize("createParagraph", null, null, null);
        Paragraph response = null;
        String valueName = (String)getTestValue("String", "createParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "createParagraph", "subShape");
        response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "createParagraph", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createParagraph", "name");
            initialize("createParagraph", "name", "String", valueName);
            Paragraph response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "createParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "createParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "createParagraph", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createParagraph", "slideIndex");
            initialize("createParagraph", "slideIndex", "Integer", valueSlideIndex);
            Paragraph response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "createParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "createParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "createParagraph", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "createParagraph", "shapeIndex");
            initialize("createParagraph", "shapeIndex", "Integer", valueShapeIndex);
            Paragraph response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "createParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "createParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createParagraphInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "createParagraph", "subShape");
        try {
            valueDto = (Paragraph)invalidizeTestValue("Paragraph", valueDto, "createParagraph", "dto");
            initialize("createParagraph", "dto", "Paragraph", valueDto);
            Paragraph response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Paragraph", "dto", "createParagraph", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("Paragraph", "dto", "createParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createParagraphInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "createParagraph", "subShape");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "createParagraph", "position");
            initialize("createParagraph", "position", "Integer", valuePosition);
            Paragraph response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "position", "createParagraph", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "position", "createParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "createParagraph", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createParagraph", "password");
            initialize("createParagraph", "password", "String", valuePassword);
            Paragraph response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "createParagraph", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createParagraph", "folder");
            initialize("createParagraph", "folder", "String", valueFolder);
            Paragraph response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "createParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "createParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "createParagraph", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createParagraph", "storage");
            initialize("createParagraph", "storage", "String", valueStorage);
            Paragraph response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "createParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "createParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createParagraphInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "createParagraph", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "createParagraph", "subShape");
            initialize("createParagraph", "subShape", "String", valueSubShape);
            Paragraph response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "createParagraph", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "createParagraph");
        }
    }
    
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortionTest() throws ApiException, Exception {
        initialize("createPortion", null, null, null);
        Portion response = null;
        String valueName = (String)getTestValue("String", "createPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createPortion", "position");
        String valuePassword = (String)getTestValue("String", "createPortion", "password");
        String valueFolder = (String)getTestValue("String", "createPortion", "folder");
        String valueStorage = (String)getTestValue("String", "createPortion", "storage");
        String valueSubShape = (String)getTestValue("String", "createPortion", "subShape");
        response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createPortion", "position");
        String valuePassword = (String)getTestValue("String", "createPortion", "password");
        String valueFolder = (String)getTestValue("String", "createPortion", "folder");
        String valueStorage = (String)getTestValue("String", "createPortion", "storage");
        String valueSubShape = (String)getTestValue("String", "createPortion", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createPortion", "name");
            initialize("createPortion", "name", "String", valueName);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "createPortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "createPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createPortion", "position");
        String valuePassword = (String)getTestValue("String", "createPortion", "password");
        String valueFolder = (String)getTestValue("String", "createPortion", "folder");
        String valueStorage = (String)getTestValue("String", "createPortion", "storage");
        String valueSubShape = (String)getTestValue("String", "createPortion", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createPortion", "slideIndex");
            initialize("createPortion", "slideIndex", "Integer", valueSlideIndex);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "createPortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "createPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createPortion", "position");
        String valuePassword = (String)getTestValue("String", "createPortion", "password");
        String valueFolder = (String)getTestValue("String", "createPortion", "folder");
        String valueStorage = (String)getTestValue("String", "createPortion", "storage");
        String valueSubShape = (String)getTestValue("String", "createPortion", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "createPortion", "shapeIndex");
            initialize("createPortion", "shapeIndex", "Integer", valueShapeIndex);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "createPortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "createPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createPortion", "position");
        String valuePassword = (String)getTestValue("String", "createPortion", "password");
        String valueFolder = (String)getTestValue("String", "createPortion", "folder");
        String valueStorage = (String)getTestValue("String", "createPortion", "storage");
        String valueSubShape = (String)getTestValue("String", "createPortion", "subShape");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "createPortion", "paragraphIndex");
            initialize("createPortion", "paragraphIndex", "Integer", valueParagraphIndex);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "createPortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "createPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortionInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createPortion", "position");
        String valuePassword = (String)getTestValue("String", "createPortion", "password");
        String valueFolder = (String)getTestValue("String", "createPortion", "folder");
        String valueStorage = (String)getTestValue("String", "createPortion", "storage");
        String valueSubShape = (String)getTestValue("String", "createPortion", "subShape");
        try {
            valueDto = (Portion)invalidizeTestValue("Portion", valueDto, "createPortion", "dto");
            initialize("createPortion", "dto", "Portion", valueDto);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Portion", "dto", "createPortion", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("Portion", "dto", "createPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortionInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createPortion", "position");
        String valuePassword = (String)getTestValue("String", "createPortion", "password");
        String valueFolder = (String)getTestValue("String", "createPortion", "folder");
        String valueStorage = (String)getTestValue("String", "createPortion", "storage");
        String valueSubShape = (String)getTestValue("String", "createPortion", "subShape");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "createPortion", "position");
            initialize("createPortion", "position", "Integer", valuePosition);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "position", "createPortion", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "position", "createPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createPortion", "position");
        String valuePassword = (String)getTestValue("String", "createPortion", "password");
        String valueFolder = (String)getTestValue("String", "createPortion", "folder");
        String valueStorage = (String)getTestValue("String", "createPortion", "storage");
        String valueSubShape = (String)getTestValue("String", "createPortion", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createPortion", "password");
            initialize("createPortion", "password", "String", valuePassword);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createPortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createPortion", "position");
        String valuePassword = (String)getTestValue("String", "createPortion", "password");
        String valueFolder = (String)getTestValue("String", "createPortion", "folder");
        String valueStorage = (String)getTestValue("String", "createPortion", "storage");
        String valueSubShape = (String)getTestValue("String", "createPortion", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createPortion", "folder");
            initialize("createPortion", "folder", "String", valueFolder);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "createPortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "createPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createPortion", "position");
        String valuePassword = (String)getTestValue("String", "createPortion", "password");
        String valueFolder = (String)getTestValue("String", "createPortion", "folder");
        String valueStorage = (String)getTestValue("String", "createPortion", "storage");
        String valueSubShape = (String)getTestValue("String", "createPortion", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createPortion", "storage");
            initialize("createPortion", "storage", "String", valueStorage);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "createPortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "createPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortionInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createPortion", "position");
        String valuePassword = (String)getTestValue("String", "createPortion", "password");
        String valueFolder = (String)getTestValue("String", "createPortion", "folder");
        String valueStorage = (String)getTestValue("String", "createPortion", "storage");
        String valueSubShape = (String)getTestValue("String", "createPortion", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "createPortion", "subShape");
            initialize("createPortion", "subShape", "String", valueSubShape);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "createPortion", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "createPortion");
        }
    }
    
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationTest() throws ApiException, Exception {
        initialize("createPresentation", null, null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "createPresentation", "name");
        byte[] valueData = (byte[])getTestValue("byte[]", "createPresentation", "data");
        String valueInputPassword = (String)getTestValue("String", "createPresentation", "inputPassword");
        String valuePassword = (String)getTestValue("String", "createPresentation", "password");
        String valueFolder = (String)getTestValue("String", "createPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentation", "storage");
        response = api.createPresentation(valueName, valueData, valueInputPassword, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentation", "name");
        byte[] valueData = (byte[])getTestValue("byte[]", "createPresentation", "data");
        String valueInputPassword = (String)getTestValue("String", "createPresentation", "inputPassword");
        String valuePassword = (String)getTestValue("String", "createPresentation", "password");
        String valueFolder = (String)getTestValue("String", "createPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentation", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createPresentation", "name");
            initialize("createPresentation", "name", "String", valueName);
            Document response = api.createPresentation(valueName, valueData, valueInputPassword, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "createPresentation", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "createPresentation");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationInvalidDataTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentation", "name");
        byte[] valueData = (byte[])getTestValue("byte[]", "createPresentation", "data");
        String valueInputPassword = (String)getTestValue("String", "createPresentation", "inputPassword");
        String valuePassword = (String)getTestValue("String", "createPresentation", "password");
        String valueFolder = (String)getTestValue("String", "createPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentation", "storage");
        try {
            valueData = (byte[])invalidizeTestValue("byte[]", valueData, "createPresentation", "data");
            initialize("createPresentation", "data", "byte[]", valueData);
            Document response = api.createPresentation(valueName, valueData, valueInputPassword, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "data", "createPresentation", valueData);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "data", "createPresentation");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationInvalidInputPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentation", "name");
        byte[] valueData = (byte[])getTestValue("byte[]", "createPresentation", "data");
        String valueInputPassword = (String)getTestValue("String", "createPresentation", "inputPassword");
        String valuePassword = (String)getTestValue("String", "createPresentation", "password");
        String valueFolder = (String)getTestValue("String", "createPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentation", "storage");
        try {
            valueInputPassword = (String)invalidizeTestValue("String", valueInputPassword, "createPresentation", "inputPassword");
            initialize("createPresentation", "inputPassword", "String", valueInputPassword);
            Document response = api.createPresentation(valueName, valueData, valueInputPassword, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "inputPassword", "createPresentation", valueInputPassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "inputPassword", "createPresentation");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentation", "name");
        byte[] valueData = (byte[])getTestValue("byte[]", "createPresentation", "data");
        String valueInputPassword = (String)getTestValue("String", "createPresentation", "inputPassword");
        String valuePassword = (String)getTestValue("String", "createPresentation", "password");
        String valueFolder = (String)getTestValue("String", "createPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentation", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createPresentation", "password");
            initialize("createPresentation", "password", "String", valuePassword);
            Document response = api.createPresentation(valueName, valueData, valueInputPassword, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createPresentation", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createPresentation");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentation", "name");
        byte[] valueData = (byte[])getTestValue("byte[]", "createPresentation", "data");
        String valueInputPassword = (String)getTestValue("String", "createPresentation", "inputPassword");
        String valuePassword = (String)getTestValue("String", "createPresentation", "password");
        String valueFolder = (String)getTestValue("String", "createPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentation", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createPresentation", "folder");
            initialize("createPresentation", "folder", "String", valueFolder);
            Document response = api.createPresentation(valueName, valueData, valueInputPassword, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "createPresentation", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "createPresentation");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentation", "name");
        byte[] valueData = (byte[])getTestValue("byte[]", "createPresentation", "data");
        String valueInputPassword = (String)getTestValue("String", "createPresentation", "inputPassword");
        String valuePassword = (String)getTestValue("String", "createPresentation", "password");
        String valueFolder = (String)getTestValue("String", "createPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentation", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createPresentation", "storage");
            initialize("createPresentation", "storage", "String", valueStorage);
            Document response = api.createPresentation(valueName, valueData, valueInputPassword, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "createPresentation", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "createPresentation");
        }
    }
    
    /**
     * Create a presentation from an existing source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromSourceTest() throws ApiException, Exception {
        initialize("createPresentationFromSource", null, null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "createPresentationFromSource", "name");
        String valueSourcePath = (String)getTestValue("String", "createPresentationFromSource", "sourcePath");
        String valueSourcePassword = (String)getTestValue("String", "createPresentationFromSource", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "createPresentationFromSource", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "createPresentationFromSource", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromSource", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromSource", "storage");
        response = api.createPresentationFromSource(valueName, valueSourcePath, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create a presentation from an existing source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromSourceInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromSource", "name");
        String valueSourcePath = (String)getTestValue("String", "createPresentationFromSource", "sourcePath");
        String valueSourcePassword = (String)getTestValue("String", "createPresentationFromSource", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "createPresentationFromSource", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "createPresentationFromSource", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromSource", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromSource", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createPresentationFromSource", "name");
            initialize("createPresentationFromSource", "name", "String", valueName);
            Document response = api.createPresentationFromSource(valueName, valueSourcePath, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "createPresentationFromSource", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "createPresentationFromSource");
        }
    }
    /**
     * Create a presentation from an existing source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromSourceInvalidSourcePathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromSource", "name");
        String valueSourcePath = (String)getTestValue("String", "createPresentationFromSource", "sourcePath");
        String valueSourcePassword = (String)getTestValue("String", "createPresentationFromSource", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "createPresentationFromSource", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "createPresentationFromSource", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromSource", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromSource", "storage");
        try {
            valueSourcePath = (String)invalidizeTestValue("String", valueSourcePath, "createPresentationFromSource", "sourcePath");
            initialize("createPresentationFromSource", "sourcePath", "String", valueSourcePath);
            Document response = api.createPresentationFromSource(valueName, valueSourcePath, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "sourcePath", "createPresentationFromSource", valueSourcePath);
        }
        if (needAssertResponse) {
            assertResponse("String", "sourcePath", "createPresentationFromSource");
        }
    }
    /**
     * Create a presentation from an existing source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromSourceInvalidSourcePasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromSource", "name");
        String valueSourcePath = (String)getTestValue("String", "createPresentationFromSource", "sourcePath");
        String valueSourcePassword = (String)getTestValue("String", "createPresentationFromSource", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "createPresentationFromSource", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "createPresentationFromSource", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromSource", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromSource", "storage");
        try {
            valueSourcePassword = (String)invalidizeTestValue("String", valueSourcePassword, "createPresentationFromSource", "sourcePassword");
            initialize("createPresentationFromSource", "sourcePassword", "String", valueSourcePassword);
            Document response = api.createPresentationFromSource(valueName, valueSourcePath, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "sourcePassword", "createPresentationFromSource", valueSourcePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "sourcePassword", "createPresentationFromSource");
        }
    }
    /**
     * Create a presentation from an existing source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromSourceInvalidSourceStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromSource", "name");
        String valueSourcePath = (String)getTestValue("String", "createPresentationFromSource", "sourcePath");
        String valueSourcePassword = (String)getTestValue("String", "createPresentationFromSource", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "createPresentationFromSource", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "createPresentationFromSource", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromSource", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromSource", "storage");
        try {
            valueSourceStorage = (String)invalidizeTestValue("String", valueSourceStorage, "createPresentationFromSource", "sourceStorage");
            initialize("createPresentationFromSource", "sourceStorage", "String", valueSourceStorage);
            Document response = api.createPresentationFromSource(valueName, valueSourcePath, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "sourceStorage", "createPresentationFromSource", valueSourceStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "sourceStorage", "createPresentationFromSource");
        }
    }
    /**
     * Create a presentation from an existing source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromSourceInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromSource", "name");
        String valueSourcePath = (String)getTestValue("String", "createPresentationFromSource", "sourcePath");
        String valueSourcePassword = (String)getTestValue("String", "createPresentationFromSource", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "createPresentationFromSource", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "createPresentationFromSource", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromSource", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromSource", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createPresentationFromSource", "password");
            initialize("createPresentationFromSource", "password", "String", valuePassword);
            Document response = api.createPresentationFromSource(valueName, valueSourcePath, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createPresentationFromSource", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createPresentationFromSource");
        }
    }
    /**
     * Create a presentation from an existing source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromSourceInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromSource", "name");
        String valueSourcePath = (String)getTestValue("String", "createPresentationFromSource", "sourcePath");
        String valueSourcePassword = (String)getTestValue("String", "createPresentationFromSource", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "createPresentationFromSource", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "createPresentationFromSource", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromSource", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromSource", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createPresentationFromSource", "folder");
            initialize("createPresentationFromSource", "folder", "String", valueFolder);
            Document response = api.createPresentationFromSource(valueName, valueSourcePath, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "createPresentationFromSource", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "createPresentationFromSource");
        }
    }
    /**
     * Create a presentation from an existing source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromSourceInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromSource", "name");
        String valueSourcePath = (String)getTestValue("String", "createPresentationFromSource", "sourcePath");
        String valueSourcePassword = (String)getTestValue("String", "createPresentationFromSource", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "createPresentationFromSource", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "createPresentationFromSource", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromSource", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromSource", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createPresentationFromSource", "storage");
            initialize("createPresentationFromSource", "storage", "String", valueStorage);
            Document response = api.createPresentationFromSource(valueName, valueSourcePath, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "createPresentationFromSource", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "createPresentationFromSource");
        }
    }
    
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromTemplateTest() throws ApiException, Exception {
        initialize("createPresentationFromTemplate", null, null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "createPresentationFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "createPresentationFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "createPresentationFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "createPresentationFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "createPresentationFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "createPresentationFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "createPresentationFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromTemplate", "storage");
        response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromTemplateInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "createPresentationFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "createPresentationFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "createPresentationFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "createPresentationFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "createPresentationFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "createPresentationFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromTemplate", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createPresentationFromTemplate", "name");
            initialize("createPresentationFromTemplate", "name", "String", valueName);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "createPresentationFromTemplate", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "createPresentationFromTemplate");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromTemplateInvalidTemplatePathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "createPresentationFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "createPresentationFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "createPresentationFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "createPresentationFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "createPresentationFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "createPresentationFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromTemplate", "storage");
        try {
            valueTemplatePath = (String)invalidizeTestValue("String", valueTemplatePath, "createPresentationFromTemplate", "templatePath");
            initialize("createPresentationFromTemplate", "templatePath", "String", valueTemplatePath);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "templatePath", "createPresentationFromTemplate", valueTemplatePath);
        }
        if (needAssertResponse) {
            assertResponse("String", "templatePath", "createPresentationFromTemplate");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromTemplateInvalidDataTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "createPresentationFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "createPresentationFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "createPresentationFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "createPresentationFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "createPresentationFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "createPresentationFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromTemplate", "storage");
        try {
            valueData = (String)invalidizeTestValue("String", valueData, "createPresentationFromTemplate", "data");
            initialize("createPresentationFromTemplate", "data", "String", valueData);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "data", "createPresentationFromTemplate", valueData);
        }
        if (needAssertResponse) {
            assertResponse("String", "data", "createPresentationFromTemplate");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromTemplateInvalidTemplatePasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "createPresentationFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "createPresentationFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "createPresentationFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "createPresentationFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "createPresentationFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "createPresentationFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromTemplate", "storage");
        try {
            valueTemplatePassword = (String)invalidizeTestValue("String", valueTemplatePassword, "createPresentationFromTemplate", "templatePassword");
            initialize("createPresentationFromTemplate", "templatePassword", "String", valueTemplatePassword);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "templatePassword", "createPresentationFromTemplate", valueTemplatePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "templatePassword", "createPresentationFromTemplate");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromTemplateInvalidTemplateStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "createPresentationFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "createPresentationFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "createPresentationFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "createPresentationFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "createPresentationFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "createPresentationFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromTemplate", "storage");
        try {
            valueTemplateStorage = (String)invalidizeTestValue("String", valueTemplateStorage, "createPresentationFromTemplate", "templateStorage");
            initialize("createPresentationFromTemplate", "templateStorage", "String", valueTemplateStorage);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "templateStorage", "createPresentationFromTemplate", valueTemplateStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "templateStorage", "createPresentationFromTemplate");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromTemplateInvalidIsImageDataEmbeddedTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "createPresentationFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "createPresentationFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "createPresentationFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "createPresentationFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "createPresentationFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "createPresentationFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromTemplate", "storage");
        try {
            valueIsImageDataEmbedded = (Boolean)invalidizeTestValue("Boolean", valueIsImageDataEmbedded, "createPresentationFromTemplate", "isImageDataEmbedded");
            initialize("createPresentationFromTemplate", "isImageDataEmbedded", "Boolean", valueIsImageDataEmbedded);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "isImageDataEmbedded", "createPresentationFromTemplate", valueIsImageDataEmbedded);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "isImageDataEmbedded", "createPresentationFromTemplate");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromTemplateInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "createPresentationFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "createPresentationFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "createPresentationFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "createPresentationFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "createPresentationFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "createPresentationFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromTemplate", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createPresentationFromTemplate", "password");
            initialize("createPresentationFromTemplate", "password", "String", valuePassword);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createPresentationFromTemplate", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createPresentationFromTemplate");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromTemplateInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "createPresentationFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "createPresentationFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "createPresentationFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "createPresentationFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "createPresentationFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "createPresentationFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromTemplate", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createPresentationFromTemplate", "folder");
            initialize("createPresentationFromTemplate", "folder", "String", valueFolder);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "createPresentationFromTemplate", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "createPresentationFromTemplate");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromTemplateInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "createPresentationFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "createPresentationFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "createPresentationFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "createPresentationFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "createPresentationFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "createPresentationFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromTemplate", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createPresentationFromTemplate", "storage");
            initialize("createPresentationFromTemplate", "storage", "String", valueStorage);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "createPresentationFromTemplate", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "createPresentationFromTemplate");
        }
    }
    
    /**
     * Create a section starting at a specified slide index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSectionTest() throws ApiException, Exception {
        initialize("createSection", null, null, null);
        Sections response = null;
        String valueName = (String)getTestValue("String", "createSection", "name");
        String valueSectionName = (String)getTestValue("String", "createSection", "sectionName");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSection", "slideIndex");
        String valuePassword = (String)getTestValue("String", "createSection", "password");
        String valueFolder = (String)getTestValue("String", "createSection", "folder");
        String valueStorage = (String)getTestValue("String", "createSection", "storage");
        response = api.createSection(valueName, valueSectionName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create a section starting at a specified slide index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSectionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSection", "name");
        String valueSectionName = (String)getTestValue("String", "createSection", "sectionName");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSection", "slideIndex");
        String valuePassword = (String)getTestValue("String", "createSection", "password");
        String valueFolder = (String)getTestValue("String", "createSection", "folder");
        String valueStorage = (String)getTestValue("String", "createSection", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createSection", "name");
            initialize("createSection", "name", "String", valueName);
            Sections response = api.createSection(valueName, valueSectionName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "createSection", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "createSection");
        }
    }
    /**
     * Create a section starting at a specified slide index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSectionInvalidSectionNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSection", "name");
        String valueSectionName = (String)getTestValue("String", "createSection", "sectionName");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSection", "slideIndex");
        String valuePassword = (String)getTestValue("String", "createSection", "password");
        String valueFolder = (String)getTestValue("String", "createSection", "folder");
        String valueStorage = (String)getTestValue("String", "createSection", "storage");
        try {
            valueSectionName = (String)invalidizeTestValue("String", valueSectionName, "createSection", "sectionName");
            initialize("createSection", "sectionName", "String", valueSectionName);
            Sections response = api.createSection(valueName, valueSectionName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "sectionName", "createSection", valueSectionName);
        }
        if (needAssertResponse) {
            assertResponse("String", "sectionName", "createSection");
        }
    }
    /**
     * Create a section starting at a specified slide index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSectionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSection", "name");
        String valueSectionName = (String)getTestValue("String", "createSection", "sectionName");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSection", "slideIndex");
        String valuePassword = (String)getTestValue("String", "createSection", "password");
        String valueFolder = (String)getTestValue("String", "createSection", "folder");
        String valueStorage = (String)getTestValue("String", "createSection", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createSection", "slideIndex");
            initialize("createSection", "slideIndex", "Integer", valueSlideIndex);
            Sections response = api.createSection(valueName, valueSectionName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "createSection", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "createSection");
        }
    }
    /**
     * Create a section starting at a specified slide index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSectionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSection", "name");
        String valueSectionName = (String)getTestValue("String", "createSection", "sectionName");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSection", "slideIndex");
        String valuePassword = (String)getTestValue("String", "createSection", "password");
        String valueFolder = (String)getTestValue("String", "createSection", "folder");
        String valueStorage = (String)getTestValue("String", "createSection", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createSection", "password");
            initialize("createSection", "password", "String", valuePassword);
            Sections response = api.createSection(valueName, valueSectionName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createSection", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createSection");
        }
    }
    /**
     * Create a section starting at a specified slide index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSectionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSection", "name");
        String valueSectionName = (String)getTestValue("String", "createSection", "sectionName");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSection", "slideIndex");
        String valuePassword = (String)getTestValue("String", "createSection", "password");
        String valueFolder = (String)getTestValue("String", "createSection", "folder");
        String valueStorage = (String)getTestValue("String", "createSection", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createSection", "folder");
            initialize("createSection", "folder", "String", valueFolder);
            Sections response = api.createSection(valueName, valueSectionName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "createSection", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "createSection");
        }
    }
    /**
     * Create a section starting at a specified slide index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSectionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSection", "name");
        String valueSectionName = (String)getTestValue("String", "createSection", "sectionName");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSection", "slideIndex");
        String valuePassword = (String)getTestValue("String", "createSection", "password");
        String valueFolder = (String)getTestValue("String", "createSection", "folder");
        String valueStorage = (String)getTestValue("String", "createSection", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createSection", "storage");
            initialize("createSection", "storage", "String", valueStorage);
            Sections response = api.createSection(valueName, valueSectionName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "createSection", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "createSection");
        }
    }
    
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShapeTest() throws ApiException, Exception {
        initialize("createShape", null, null, null);
        ShapeBase response = null;
        String valueName = (String)getTestValue("String", "createShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createShape", "position");
        String valuePassword = (String)getTestValue("String", "createShape", "password");
        String valueFolder = (String)getTestValue("String", "createShape", "folder");
        String valueStorage = (String)getTestValue("String", "createShape", "storage");
        String valueSubShape = (String)getTestValue("String", "createShape", "subShape");
        response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createShape", "position");
        String valuePassword = (String)getTestValue("String", "createShape", "password");
        String valueFolder = (String)getTestValue("String", "createShape", "folder");
        String valueStorage = (String)getTestValue("String", "createShape", "storage");
        String valueSubShape = (String)getTestValue("String", "createShape", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createShape", "name");
            initialize("createShape", "name", "String", valueName);
            ShapeBase response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "createShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "createShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createShape", "position");
        String valuePassword = (String)getTestValue("String", "createShape", "password");
        String valueFolder = (String)getTestValue("String", "createShape", "folder");
        String valueStorage = (String)getTestValue("String", "createShape", "storage");
        String valueSubShape = (String)getTestValue("String", "createShape", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createShape", "slideIndex");
            initialize("createShape", "slideIndex", "Integer", valueSlideIndex);
            ShapeBase response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "createShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "createShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShapeInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createShape", "position");
        String valuePassword = (String)getTestValue("String", "createShape", "password");
        String valueFolder = (String)getTestValue("String", "createShape", "folder");
        String valueStorage = (String)getTestValue("String", "createShape", "storage");
        String valueSubShape = (String)getTestValue("String", "createShape", "subShape");
        try {
            valueDto = (ShapeBase)invalidizeTestValue("ShapeBase", valueDto, "createShape", "dto");
            initialize("createShape", "dto", "ShapeBase", valueDto);
            ShapeBase response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ShapeBase", "dto", "createShape", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("ShapeBase", "dto", "createShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShapeInvalidShapeToCloneTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createShape", "position");
        String valuePassword = (String)getTestValue("String", "createShape", "password");
        String valueFolder = (String)getTestValue("String", "createShape", "folder");
        String valueStorage = (String)getTestValue("String", "createShape", "storage");
        String valueSubShape = (String)getTestValue("String", "createShape", "subShape");
        try {
            valueShapeToClone = (Integer)invalidizeTestValue("Integer", valueShapeToClone, "createShape", "shapeToClone");
            initialize("createShape", "shapeToClone", "Integer", valueShapeToClone);
            ShapeBase response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeToClone", "createShape", valueShapeToClone);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeToClone", "createShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShapeInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createShape", "position");
        String valuePassword = (String)getTestValue("String", "createShape", "password");
        String valueFolder = (String)getTestValue("String", "createShape", "folder");
        String valueStorage = (String)getTestValue("String", "createShape", "storage");
        String valueSubShape = (String)getTestValue("String", "createShape", "subShape");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "createShape", "position");
            initialize("createShape", "position", "Integer", valuePosition);
            ShapeBase response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "position", "createShape", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "position", "createShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createShape", "position");
        String valuePassword = (String)getTestValue("String", "createShape", "password");
        String valueFolder = (String)getTestValue("String", "createShape", "folder");
        String valueStorage = (String)getTestValue("String", "createShape", "storage");
        String valueSubShape = (String)getTestValue("String", "createShape", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createShape", "password");
            initialize("createShape", "password", "String", valuePassword);
            ShapeBase response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createShape", "position");
        String valuePassword = (String)getTestValue("String", "createShape", "password");
        String valueFolder = (String)getTestValue("String", "createShape", "folder");
        String valueStorage = (String)getTestValue("String", "createShape", "storage");
        String valueSubShape = (String)getTestValue("String", "createShape", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createShape", "folder");
            initialize("createShape", "folder", "String", valueFolder);
            ShapeBase response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "createShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "createShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createShape", "position");
        String valuePassword = (String)getTestValue("String", "createShape", "password");
        String valueFolder = (String)getTestValue("String", "createShape", "folder");
        String valueStorage = (String)getTestValue("String", "createShape", "storage");
        String valueSubShape = (String)getTestValue("String", "createShape", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createShape", "storage");
            initialize("createShape", "storage", "String", valueStorage);
            ShapeBase response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "createShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "createShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShapeInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createShape", "position");
        String valuePassword = (String)getTestValue("String", "createShape", "password");
        String valueFolder = (String)getTestValue("String", "createShape", "folder");
        String valueStorage = (String)getTestValue("String", "createShape", "storage");
        String valueSubShape = (String)getTestValue("String", "createShape", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "createShape", "subShape");
            initialize("createShape", "subShape", "String", valueSubShape);
            ShapeBase response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "createShape", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "createShape");
        }
    }
    
    /**
     * Create a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSlideTest() throws ApiException, Exception {
        initialize("createSlide", null, null, null);
        Slides response = null;
        String valueName = (String)getTestValue("String", "createSlide", "name");
        String valueLayoutAlias = (String)getTestValue("String", "createSlide", "layoutAlias");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSlide", "position");
        String valuePassword = (String)getTestValue("String", "createSlide", "password");
        String valueFolder = (String)getTestValue("String", "createSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createSlide", "storage");
        response = api.createSlide(valueName, valueLayoutAlias, valuePosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSlide", "name");
        String valueLayoutAlias = (String)getTestValue("String", "createSlide", "layoutAlias");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSlide", "position");
        String valuePassword = (String)getTestValue("String", "createSlide", "password");
        String valueFolder = (String)getTestValue("String", "createSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createSlide", "name");
            initialize("createSlide", "name", "String", valueName);
            Slides response = api.createSlide(valueName, valueLayoutAlias, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "createSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "createSlide");
        }
    }
    /**
     * Create a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSlideInvalidLayoutAliasTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSlide", "name");
        String valueLayoutAlias = (String)getTestValue("String", "createSlide", "layoutAlias");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSlide", "position");
        String valuePassword = (String)getTestValue("String", "createSlide", "password");
        String valueFolder = (String)getTestValue("String", "createSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createSlide", "storage");
        try {
            valueLayoutAlias = (String)invalidizeTestValue("String", valueLayoutAlias, "createSlide", "layoutAlias");
            initialize("createSlide", "layoutAlias", "String", valueLayoutAlias);
            Slides response = api.createSlide(valueName, valueLayoutAlias, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "layoutAlias", "createSlide", valueLayoutAlias);
        }
        if (needAssertResponse) {
            assertResponse("String", "layoutAlias", "createSlide");
        }
    }
    /**
     * Create a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSlideInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSlide", "name");
        String valueLayoutAlias = (String)getTestValue("String", "createSlide", "layoutAlias");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSlide", "position");
        String valuePassword = (String)getTestValue("String", "createSlide", "password");
        String valueFolder = (String)getTestValue("String", "createSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createSlide", "storage");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "createSlide", "position");
            initialize("createSlide", "position", "Integer", valuePosition);
            Slides response = api.createSlide(valueName, valueLayoutAlias, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "position", "createSlide", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "position", "createSlide");
        }
    }
    /**
     * Create a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSlide", "name");
        String valueLayoutAlias = (String)getTestValue("String", "createSlide", "layoutAlias");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSlide", "position");
        String valuePassword = (String)getTestValue("String", "createSlide", "password");
        String valueFolder = (String)getTestValue("String", "createSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createSlide", "password");
            initialize("createSlide", "password", "String", valuePassword);
            Slides response = api.createSlide(valueName, valueLayoutAlias, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createSlide");
        }
    }
    /**
     * Create a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSlide", "name");
        String valueLayoutAlias = (String)getTestValue("String", "createSlide", "layoutAlias");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSlide", "position");
        String valuePassword = (String)getTestValue("String", "createSlide", "password");
        String valueFolder = (String)getTestValue("String", "createSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createSlide", "folder");
            initialize("createSlide", "folder", "String", valueFolder);
            Slides response = api.createSlide(valueName, valueLayoutAlias, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "createSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "createSlide");
        }
    }
    /**
     * Create a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSlide", "name");
        String valueLayoutAlias = (String)getTestValue("String", "createSlide", "layoutAlias");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSlide", "position");
        String valuePassword = (String)getTestValue("String", "createSlide", "password");
        String valueFolder = (String)getTestValue("String", "createSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createSlide", "storage");
            initialize("createSlide", "storage", "String", valueStorage);
            Slides response = api.createSlide(valueName, valueLayoutAlias, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "createSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "createSlide");
        }
    }
    
    /**
     * Add SmartArt node
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSmartArtNodeTest() throws ApiException, Exception {
        initialize("createSmartArtNode", null, null, null);
        SmartArt response = null;
        String valueName = (String)getTestValue("String", "createSmartArtNode", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSmartArtNode", "slideIndex");
        Integer valueSmartArtIndex = (Integer)getTestValue("Integer", "createSmartArtNode", "smartArtIndex");
        String valueSubNode = (String)getTestValue("String", "createSmartArtNode", "subNode");
        String valueText = (String)getTestValue("String", "createSmartArtNode", "text");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSmartArtNode", "position");
        String valuePassword = (String)getTestValue("String", "createSmartArtNode", "password");
        String valueFolder = (String)getTestValue("String", "createSmartArtNode", "folder");
        String valueStorage = (String)getTestValue("String", "createSmartArtNode", "storage");
        response = api.createSmartArtNode(valueName, valueSlideIndex, valueSmartArtIndex, valueSubNode, valueText, valuePosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Add SmartArt node
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSmartArtNodeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSmartArtNode", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSmartArtNode", "slideIndex");
        Integer valueSmartArtIndex = (Integer)getTestValue("Integer", "createSmartArtNode", "smartArtIndex");
        String valueSubNode = (String)getTestValue("String", "createSmartArtNode", "subNode");
        String valueText = (String)getTestValue("String", "createSmartArtNode", "text");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSmartArtNode", "position");
        String valuePassword = (String)getTestValue("String", "createSmartArtNode", "password");
        String valueFolder = (String)getTestValue("String", "createSmartArtNode", "folder");
        String valueStorage = (String)getTestValue("String", "createSmartArtNode", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createSmartArtNode", "name");
            initialize("createSmartArtNode", "name", "String", valueName);
            SmartArt response = api.createSmartArtNode(valueName, valueSlideIndex, valueSmartArtIndex, valueSubNode, valueText, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "createSmartArtNode", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "createSmartArtNode");
        }
    }
    /**
     * Add SmartArt node
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSmartArtNodeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSmartArtNode", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSmartArtNode", "slideIndex");
        Integer valueSmartArtIndex = (Integer)getTestValue("Integer", "createSmartArtNode", "smartArtIndex");
        String valueSubNode = (String)getTestValue("String", "createSmartArtNode", "subNode");
        String valueText = (String)getTestValue("String", "createSmartArtNode", "text");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSmartArtNode", "position");
        String valuePassword = (String)getTestValue("String", "createSmartArtNode", "password");
        String valueFolder = (String)getTestValue("String", "createSmartArtNode", "folder");
        String valueStorage = (String)getTestValue("String", "createSmartArtNode", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createSmartArtNode", "slideIndex");
            initialize("createSmartArtNode", "slideIndex", "Integer", valueSlideIndex);
            SmartArt response = api.createSmartArtNode(valueName, valueSlideIndex, valueSmartArtIndex, valueSubNode, valueText, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "createSmartArtNode", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "createSmartArtNode");
        }
    }
    /**
     * Add SmartArt node
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSmartArtNodeInvalidSmartArtIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSmartArtNode", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSmartArtNode", "slideIndex");
        Integer valueSmartArtIndex = (Integer)getTestValue("Integer", "createSmartArtNode", "smartArtIndex");
        String valueSubNode = (String)getTestValue("String", "createSmartArtNode", "subNode");
        String valueText = (String)getTestValue("String", "createSmartArtNode", "text");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSmartArtNode", "position");
        String valuePassword = (String)getTestValue("String", "createSmartArtNode", "password");
        String valueFolder = (String)getTestValue("String", "createSmartArtNode", "folder");
        String valueStorage = (String)getTestValue("String", "createSmartArtNode", "storage");
        try {
            valueSmartArtIndex = (Integer)invalidizeTestValue("Integer", valueSmartArtIndex, "createSmartArtNode", "smartArtIndex");
            initialize("createSmartArtNode", "smartArtIndex", "Integer", valueSmartArtIndex);
            SmartArt response = api.createSmartArtNode(valueName, valueSlideIndex, valueSmartArtIndex, valueSubNode, valueText, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "smartArtIndex", "createSmartArtNode", valueSmartArtIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "smartArtIndex", "createSmartArtNode");
        }
    }
    /**
     * Add SmartArt node
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSmartArtNodeInvalidSubNodeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSmartArtNode", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSmartArtNode", "slideIndex");
        Integer valueSmartArtIndex = (Integer)getTestValue("Integer", "createSmartArtNode", "smartArtIndex");
        String valueSubNode = (String)getTestValue("String", "createSmartArtNode", "subNode");
        String valueText = (String)getTestValue("String", "createSmartArtNode", "text");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSmartArtNode", "position");
        String valuePassword = (String)getTestValue("String", "createSmartArtNode", "password");
        String valueFolder = (String)getTestValue("String", "createSmartArtNode", "folder");
        String valueStorage = (String)getTestValue("String", "createSmartArtNode", "storage");
        try {
            valueSubNode = (String)invalidizeTestValue("String", valueSubNode, "createSmartArtNode", "subNode");
            initialize("createSmartArtNode", "subNode", "String", valueSubNode);
            SmartArt response = api.createSmartArtNode(valueName, valueSlideIndex, valueSmartArtIndex, valueSubNode, valueText, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subNode", "createSmartArtNode", valueSubNode);
        }
        if (needAssertResponse) {
            assertResponse("String", "subNode", "createSmartArtNode");
        }
    }
    /**
     * Add SmartArt node
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSmartArtNodeInvalidTextTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSmartArtNode", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSmartArtNode", "slideIndex");
        Integer valueSmartArtIndex = (Integer)getTestValue("Integer", "createSmartArtNode", "smartArtIndex");
        String valueSubNode = (String)getTestValue("String", "createSmartArtNode", "subNode");
        String valueText = (String)getTestValue("String", "createSmartArtNode", "text");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSmartArtNode", "position");
        String valuePassword = (String)getTestValue("String", "createSmartArtNode", "password");
        String valueFolder = (String)getTestValue("String", "createSmartArtNode", "folder");
        String valueStorage = (String)getTestValue("String", "createSmartArtNode", "storage");
        try {
            valueText = (String)invalidizeTestValue("String", valueText, "createSmartArtNode", "text");
            initialize("createSmartArtNode", "text", "String", valueText);
            SmartArt response = api.createSmartArtNode(valueName, valueSlideIndex, valueSmartArtIndex, valueSubNode, valueText, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "text", "createSmartArtNode", valueText);
        }
        if (needAssertResponse) {
            assertResponse("String", "text", "createSmartArtNode");
        }
    }
    /**
     * Add SmartArt node
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSmartArtNodeInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSmartArtNode", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSmartArtNode", "slideIndex");
        Integer valueSmartArtIndex = (Integer)getTestValue("Integer", "createSmartArtNode", "smartArtIndex");
        String valueSubNode = (String)getTestValue("String", "createSmartArtNode", "subNode");
        String valueText = (String)getTestValue("String", "createSmartArtNode", "text");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSmartArtNode", "position");
        String valuePassword = (String)getTestValue("String", "createSmartArtNode", "password");
        String valueFolder = (String)getTestValue("String", "createSmartArtNode", "folder");
        String valueStorage = (String)getTestValue("String", "createSmartArtNode", "storage");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "createSmartArtNode", "position");
            initialize("createSmartArtNode", "position", "Integer", valuePosition);
            SmartArt response = api.createSmartArtNode(valueName, valueSlideIndex, valueSmartArtIndex, valueSubNode, valueText, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "position", "createSmartArtNode", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "position", "createSmartArtNode");
        }
    }
    /**
     * Add SmartArt node
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSmartArtNodeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSmartArtNode", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSmartArtNode", "slideIndex");
        Integer valueSmartArtIndex = (Integer)getTestValue("Integer", "createSmartArtNode", "smartArtIndex");
        String valueSubNode = (String)getTestValue("String", "createSmartArtNode", "subNode");
        String valueText = (String)getTestValue("String", "createSmartArtNode", "text");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSmartArtNode", "position");
        String valuePassword = (String)getTestValue("String", "createSmartArtNode", "password");
        String valueFolder = (String)getTestValue("String", "createSmartArtNode", "folder");
        String valueStorage = (String)getTestValue("String", "createSmartArtNode", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createSmartArtNode", "password");
            initialize("createSmartArtNode", "password", "String", valuePassword);
            SmartArt response = api.createSmartArtNode(valueName, valueSlideIndex, valueSmartArtIndex, valueSubNode, valueText, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createSmartArtNode", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createSmartArtNode");
        }
    }
    /**
     * Add SmartArt node
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSmartArtNodeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSmartArtNode", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSmartArtNode", "slideIndex");
        Integer valueSmartArtIndex = (Integer)getTestValue("Integer", "createSmartArtNode", "smartArtIndex");
        String valueSubNode = (String)getTestValue("String", "createSmartArtNode", "subNode");
        String valueText = (String)getTestValue("String", "createSmartArtNode", "text");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSmartArtNode", "position");
        String valuePassword = (String)getTestValue("String", "createSmartArtNode", "password");
        String valueFolder = (String)getTestValue("String", "createSmartArtNode", "folder");
        String valueStorage = (String)getTestValue("String", "createSmartArtNode", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createSmartArtNode", "folder");
            initialize("createSmartArtNode", "folder", "String", valueFolder);
            SmartArt response = api.createSmartArtNode(valueName, valueSlideIndex, valueSmartArtIndex, valueSubNode, valueText, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "createSmartArtNode", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "createSmartArtNode");
        }
    }
    /**
     * Add SmartArt node
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSmartArtNodeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSmartArtNode", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSmartArtNode", "slideIndex");
        Integer valueSmartArtIndex = (Integer)getTestValue("Integer", "createSmartArtNode", "smartArtIndex");
        String valueSubNode = (String)getTestValue("String", "createSmartArtNode", "subNode");
        String valueText = (String)getTestValue("String", "createSmartArtNode", "text");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSmartArtNode", "position");
        String valuePassword = (String)getTestValue("String", "createSmartArtNode", "password");
        String valueFolder = (String)getTestValue("String", "createSmartArtNode", "folder");
        String valueStorage = (String)getTestValue("String", "createSmartArtNode", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createSmartArtNode", "storage");
            initialize("createSmartArtNode", "storage", "String", valueStorage);
            SmartArt response = api.createSmartArtNode(valueName, valueSlideIndex, valueSmartArtIndex, valueSubNode, valueText, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "createSmartArtNode", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "createSmartArtNode");
        }
    }
    
    /**
     * Add an effect to special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideAnimationEffectTest() throws ApiException, Exception {
        initialize("createSpecialSlideAnimationEffect", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideAnimationEffect", "slideType");
        Effect valueEffect = (Effect)getTestValue("Effect", "createSpecialSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "storage");
        response = api.createSpecialSlideAnimationEffect(valueName, valueSlideIndex, valueSlideType, valueEffect, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Add an effect to special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideAnimationEffectInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideAnimationEffect", "slideType");
        Effect valueEffect = (Effect)getTestValue("Effect", "createSpecialSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createSpecialSlideAnimationEffect", "name");
            initialize("createSpecialSlideAnimationEffect", "name", "String", valueName);
            SlideAnimation response = api.createSpecialSlideAnimationEffect(valueName, valueSlideIndex, valueSlideType, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "createSpecialSlideAnimationEffect", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "createSpecialSlideAnimationEffect");
        }
    }
    /**
     * Add an effect to special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideAnimationEffectInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideAnimationEffect", "slideType");
        Effect valueEffect = (Effect)getTestValue("Effect", "createSpecialSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createSpecialSlideAnimationEffect", "slideIndex");
            initialize("createSpecialSlideAnimationEffect", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.createSpecialSlideAnimationEffect(valueName, valueSlideIndex, valueSlideType, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "createSpecialSlideAnimationEffect", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "createSpecialSlideAnimationEffect");
        }
    }
    /**
     * Add an effect to special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideAnimationEffectInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideAnimationEffect", "slideType");
        Effect valueEffect = (Effect)getTestValue("Effect", "createSpecialSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "storage");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "createSpecialSlideAnimationEffect", "slideType");
            initialize("createSpecialSlideAnimationEffect", "slideType", "SpecialSlideType", valueSlideType);
            SlideAnimation response = api.createSpecialSlideAnimationEffect(valueName, valueSlideIndex, valueSlideType, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "createSpecialSlideAnimationEffect", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "createSpecialSlideAnimationEffect");
        }
    }
    /**
     * Add an effect to special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideAnimationEffectInvalidEffectTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideAnimationEffect", "slideType");
        Effect valueEffect = (Effect)getTestValue("Effect", "createSpecialSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "storage");
        try {
            valueEffect = (Effect)invalidizeTestValue("Effect", valueEffect, "createSpecialSlideAnimationEffect", "effect");
            initialize("createSpecialSlideAnimationEffect", "effect", "Effect", valueEffect);
            SlideAnimation response = api.createSpecialSlideAnimationEffect(valueName, valueSlideIndex, valueSlideType, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Effect", "effect", "createSpecialSlideAnimationEffect", valueEffect);
        }
        if (needAssertResponse) {
            assertResponse("Effect", "effect", "createSpecialSlideAnimationEffect");
        }
    }
    /**
     * Add an effect to special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideAnimationEffectInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideAnimationEffect", "slideType");
        Effect valueEffect = (Effect)getTestValue("Effect", "createSpecialSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createSpecialSlideAnimationEffect", "password");
            initialize("createSpecialSlideAnimationEffect", "password", "String", valuePassword);
            SlideAnimation response = api.createSpecialSlideAnimationEffect(valueName, valueSlideIndex, valueSlideType, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createSpecialSlideAnimationEffect", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createSpecialSlideAnimationEffect");
        }
    }
    /**
     * Add an effect to special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideAnimationEffectInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideAnimationEffect", "slideType");
        Effect valueEffect = (Effect)getTestValue("Effect", "createSpecialSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createSpecialSlideAnimationEffect", "folder");
            initialize("createSpecialSlideAnimationEffect", "folder", "String", valueFolder);
            SlideAnimation response = api.createSpecialSlideAnimationEffect(valueName, valueSlideIndex, valueSlideType, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "createSpecialSlideAnimationEffect", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "createSpecialSlideAnimationEffect");
        }
    }
    /**
     * Add an effect to special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideAnimationEffectInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideAnimationEffect", "slideType");
        Effect valueEffect = (Effect)getTestValue("Effect", "createSpecialSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideAnimationEffect", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createSpecialSlideAnimationEffect", "storage");
            initialize("createSpecialSlideAnimationEffect", "storage", "String", valueStorage);
            SlideAnimation response = api.createSpecialSlideAnimationEffect(valueName, valueSlideIndex, valueSlideType, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "createSpecialSlideAnimationEffect", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "createSpecialSlideAnimationEffect");
        }
    }
    
    /**
     * Set special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideAnimationInteractiveSequenceTest() throws ApiException, Exception {
        initialize("createSpecialSlideAnimationInteractiveSequence", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequence", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideAnimationInteractiveSequence", "slideType");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "createSpecialSlideAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "storage");
        response = api.createSpecialSlideAnimationInteractiveSequence(valueName, valueSlideIndex, valueSlideType, valueSequence, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideAnimationInteractiveSequenceInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequence", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideAnimationInteractiveSequence", "slideType");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "createSpecialSlideAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createSpecialSlideAnimationInteractiveSequence", "name");
            initialize("createSpecialSlideAnimationInteractiveSequence", "name", "String", valueName);
            SlideAnimation response = api.createSpecialSlideAnimationInteractiveSequence(valueName, valueSlideIndex, valueSlideType, valueSequence, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "createSpecialSlideAnimationInteractiveSequence", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "createSpecialSlideAnimationInteractiveSequence");
        }
    }
    /**
     * Set special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideAnimationInteractiveSequenceInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequence", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideAnimationInteractiveSequence", "slideType");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "createSpecialSlideAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createSpecialSlideAnimationInteractiveSequence", "slideIndex");
            initialize("createSpecialSlideAnimationInteractiveSequence", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.createSpecialSlideAnimationInteractiveSequence(valueName, valueSlideIndex, valueSlideType, valueSequence, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "createSpecialSlideAnimationInteractiveSequence", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "createSpecialSlideAnimationInteractiveSequence");
        }
    }
    /**
     * Set special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideAnimationInteractiveSequenceInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequence", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideAnimationInteractiveSequence", "slideType");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "createSpecialSlideAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "storage");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "createSpecialSlideAnimationInteractiveSequence", "slideType");
            initialize("createSpecialSlideAnimationInteractiveSequence", "slideType", "SpecialSlideType", valueSlideType);
            SlideAnimation response = api.createSpecialSlideAnimationInteractiveSequence(valueName, valueSlideIndex, valueSlideType, valueSequence, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "createSpecialSlideAnimationInteractiveSequence", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "createSpecialSlideAnimationInteractiveSequence");
        }
    }
    /**
     * Set special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideAnimationInteractiveSequenceInvalidSequenceTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequence", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideAnimationInteractiveSequence", "slideType");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "createSpecialSlideAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "storage");
        try {
            valueSequence = (InteractiveSequence)invalidizeTestValue("InteractiveSequence", valueSequence, "createSpecialSlideAnimationInteractiveSequence", "sequence");
            initialize("createSpecialSlideAnimationInteractiveSequence", "sequence", "InteractiveSequence", valueSequence);
            SlideAnimation response = api.createSpecialSlideAnimationInteractiveSequence(valueName, valueSlideIndex, valueSlideType, valueSequence, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "InteractiveSequence", "sequence", "createSpecialSlideAnimationInteractiveSequence", valueSequence);
        }
        if (needAssertResponse) {
            assertResponse("InteractiveSequence", "sequence", "createSpecialSlideAnimationInteractiveSequence");
        }
    }
    /**
     * Set special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideAnimationInteractiveSequenceInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequence", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideAnimationInteractiveSequence", "slideType");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "createSpecialSlideAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createSpecialSlideAnimationInteractiveSequence", "password");
            initialize("createSpecialSlideAnimationInteractiveSequence", "password", "String", valuePassword);
            SlideAnimation response = api.createSpecialSlideAnimationInteractiveSequence(valueName, valueSlideIndex, valueSlideType, valueSequence, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createSpecialSlideAnimationInteractiveSequence", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createSpecialSlideAnimationInteractiveSequence");
        }
    }
    /**
     * Set special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideAnimationInteractiveSequenceInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequence", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideAnimationInteractiveSequence", "slideType");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "createSpecialSlideAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createSpecialSlideAnimationInteractiveSequence", "folder");
            initialize("createSpecialSlideAnimationInteractiveSequence", "folder", "String", valueFolder);
            SlideAnimation response = api.createSpecialSlideAnimationInteractiveSequence(valueName, valueSlideIndex, valueSlideType, valueSequence, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "createSpecialSlideAnimationInteractiveSequence", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "createSpecialSlideAnimationInteractiveSequence");
        }
    }
    /**
     * Set special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideAnimationInteractiveSequenceInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequence", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideAnimationInteractiveSequence", "slideType");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "createSpecialSlideAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequence", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createSpecialSlideAnimationInteractiveSequence", "storage");
            initialize("createSpecialSlideAnimationInteractiveSequence", "storage", "String", valueStorage);
            SlideAnimation response = api.createSpecialSlideAnimationInteractiveSequence(valueName, valueSlideIndex, valueSlideType, valueSequence, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "createSpecialSlideAnimationInteractiveSequence", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "createSpecialSlideAnimationInteractiveSequence");
        }
    }
    
    /**
     * Add an animation effect to a special slide (master, layout, notes) interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideAnimationInteractiveSequenceEffectTest() throws ApiException, Exception {
        initialize("createSpecialSlideAnimationInteractiveSequenceEffect", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createSpecialSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        response = api.createSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Add an animation effect to a special slide (master, layout, notes) interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideAnimationInteractiveSequenceEffectInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createSpecialSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createSpecialSlideAnimationInteractiveSequenceEffect", "name");
            initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "name", "String", valueName);
            SlideAnimation response = api.createSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "createSpecialSlideAnimationInteractiveSequenceEffect", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "createSpecialSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Add an animation effect to a special slide (master, layout, notes) interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createSpecialSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
            initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.createSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "createSpecialSlideAnimationInteractiveSequenceEffect", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "createSpecialSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Add an animation effect to a special slide (master, layout, notes) interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createSpecialSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "createSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
            initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "SpecialSlideType", valueSlideType);
            SlideAnimation response = api.createSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "createSpecialSlideAnimationInteractiveSequenceEffect", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "createSpecialSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Add an animation effect to a special slide (master, layout, notes) interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideAnimationInteractiveSequenceEffectInvalidSequenceIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createSpecialSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSequenceIndex = (Integer)invalidizeTestValue("Integer", valueSequenceIndex, "createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
            initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "Integer", valueSequenceIndex);
            SlideAnimation response = api.createSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "sequenceIndex", "createSpecialSlideAnimationInteractiveSequenceEffect", valueSequenceIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "sequenceIndex", "createSpecialSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Add an animation effect to a special slide (master, layout, notes) interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideAnimationInteractiveSequenceEffectInvalidEffectTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createSpecialSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueEffect = (Effect)invalidizeTestValue("Effect", valueEffect, "createSpecialSlideAnimationInteractiveSequenceEffect", "effect");
            initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", "Effect", valueEffect);
            SlideAnimation response = api.createSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Effect", "effect", "createSpecialSlideAnimationInteractiveSequenceEffect", valueEffect);
        }
        if (needAssertResponse) {
            assertResponse("Effect", "effect", "createSpecialSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Add an animation effect to a special slide (master, layout, notes) interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideAnimationInteractiveSequenceEffectInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createSpecialSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createSpecialSlideAnimationInteractiveSequenceEffect", "password");
            initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "password", "String", valuePassword);
            SlideAnimation response = api.createSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createSpecialSlideAnimationInteractiveSequenceEffect", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createSpecialSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Add an animation effect to a special slide (master, layout, notes) interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideAnimationInteractiveSequenceEffectInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createSpecialSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createSpecialSlideAnimationInteractiveSequenceEffect", "folder");
            initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", "String", valueFolder);
            SlideAnimation response = api.createSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "createSpecialSlideAnimationInteractiveSequenceEffect", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "createSpecialSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Add an animation effect to a special slide (master, layout, notes) interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideAnimationInteractiveSequenceEffectInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createSpecialSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createSpecialSlideAnimationInteractiveSequenceEffect", "storage");
            initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", "String", valueStorage);
            SlideAnimation response = api.createSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "createSpecialSlideAnimationInteractiveSequenceEffect", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "createSpecialSlideAnimationInteractiveSequenceEffect");
        }
    }
    
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideParagraphTest() throws ApiException, Exception {
        initialize("createSpecialSlideParagraph", null, null, null);
        Paragraph response = null;
        String valueName = (String)getTestValue("String", "createSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createSpecialSlideParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlideParagraph", "subShape");
        response = api.createSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createSpecialSlideParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlideParagraph", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createSpecialSlideParagraph", "name");
            initialize("createSpecialSlideParagraph", "name", "String", valueName);
            Paragraph response = api.createSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "createSpecialSlideParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "createSpecialSlideParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createSpecialSlideParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlideParagraph", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createSpecialSlideParagraph", "slideIndex");
            initialize("createSpecialSlideParagraph", "slideIndex", "Integer", valueSlideIndex);
            Paragraph response = api.createSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "createSpecialSlideParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "createSpecialSlideParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideParagraphInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createSpecialSlideParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlideParagraph", "subShape");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "createSpecialSlideParagraph", "slideType");
            initialize("createSpecialSlideParagraph", "slideType", "SpecialSlideType", valueSlideType);
            Paragraph response = api.createSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "createSpecialSlideParagraph", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "createSpecialSlideParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createSpecialSlideParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlideParagraph", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "createSpecialSlideParagraph", "shapeIndex");
            initialize("createSpecialSlideParagraph", "shapeIndex", "Integer", valueShapeIndex);
            Paragraph response = api.createSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "createSpecialSlideParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "createSpecialSlideParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideParagraphInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createSpecialSlideParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlideParagraph", "subShape");
        try {
            valueDto = (Paragraph)invalidizeTestValue("Paragraph", valueDto, "createSpecialSlideParagraph", "dto");
            initialize("createSpecialSlideParagraph", "dto", "Paragraph", valueDto);
            Paragraph response = api.createSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Paragraph", "dto", "createSpecialSlideParagraph", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("Paragraph", "dto", "createSpecialSlideParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideParagraphInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createSpecialSlideParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlideParagraph", "subShape");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "createSpecialSlideParagraph", "position");
            initialize("createSpecialSlideParagraph", "position", "Integer", valuePosition);
            Paragraph response = api.createSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "position", "createSpecialSlideParagraph", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "position", "createSpecialSlideParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createSpecialSlideParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlideParagraph", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createSpecialSlideParagraph", "password");
            initialize("createSpecialSlideParagraph", "password", "String", valuePassword);
            Paragraph response = api.createSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createSpecialSlideParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createSpecialSlideParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createSpecialSlideParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlideParagraph", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createSpecialSlideParagraph", "folder");
            initialize("createSpecialSlideParagraph", "folder", "String", valueFolder);
            Paragraph response = api.createSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "createSpecialSlideParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "createSpecialSlideParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createSpecialSlideParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlideParagraph", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createSpecialSlideParagraph", "storage");
            initialize("createSpecialSlideParagraph", "storage", "String", valueStorage);
            Paragraph response = api.createSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "createSpecialSlideParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "createSpecialSlideParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideParagraphInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createSpecialSlideParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlideParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlideParagraph", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "createSpecialSlideParagraph", "subShape");
            initialize("createSpecialSlideParagraph", "subShape", "String", valueSubShape);
            Paragraph response = api.createSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "createSpecialSlideParagraph", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "createSpecialSlideParagraph");
        }
    }
    
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlidePortionTest() throws ApiException, Exception {
        initialize("createSpecialSlidePortion", null, null, null);
        Portion response = null;
        String valueName = (String)getTestValue("String", "createSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createSpecialSlidePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlidePortion", "subShape");
        response = api.createSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlidePortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createSpecialSlidePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlidePortion", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createSpecialSlidePortion", "name");
            initialize("createSpecialSlidePortion", "name", "String", valueName);
            Portion response = api.createSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "createSpecialSlidePortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "createSpecialSlidePortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlidePortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createSpecialSlidePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlidePortion", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createSpecialSlidePortion", "slideIndex");
            initialize("createSpecialSlidePortion", "slideIndex", "Integer", valueSlideIndex);
            Portion response = api.createSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "createSpecialSlidePortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "createSpecialSlidePortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlidePortionInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createSpecialSlidePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlidePortion", "subShape");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "createSpecialSlidePortion", "slideType");
            initialize("createSpecialSlidePortion", "slideType", "SpecialSlideType", valueSlideType);
            Portion response = api.createSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "createSpecialSlidePortion", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "createSpecialSlidePortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlidePortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createSpecialSlidePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlidePortion", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "createSpecialSlidePortion", "shapeIndex");
            initialize("createSpecialSlidePortion", "shapeIndex", "Integer", valueShapeIndex);
            Portion response = api.createSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "createSpecialSlidePortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "createSpecialSlidePortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlidePortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createSpecialSlidePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlidePortion", "subShape");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "createSpecialSlidePortion", "paragraphIndex");
            initialize("createSpecialSlidePortion", "paragraphIndex", "Integer", valueParagraphIndex);
            Portion response = api.createSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "createSpecialSlidePortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "createSpecialSlidePortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlidePortionInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createSpecialSlidePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlidePortion", "subShape");
        try {
            valueDto = (Portion)invalidizeTestValue("Portion", valueDto, "createSpecialSlidePortion", "dto");
            initialize("createSpecialSlidePortion", "dto", "Portion", valueDto);
            Portion response = api.createSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Portion", "dto", "createSpecialSlidePortion", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("Portion", "dto", "createSpecialSlidePortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlidePortionInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createSpecialSlidePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlidePortion", "subShape");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "createSpecialSlidePortion", "position");
            initialize("createSpecialSlidePortion", "position", "Integer", valuePosition);
            Portion response = api.createSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "position", "createSpecialSlidePortion", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "position", "createSpecialSlidePortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlidePortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createSpecialSlidePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlidePortion", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createSpecialSlidePortion", "password");
            initialize("createSpecialSlidePortion", "password", "String", valuePassword);
            Portion response = api.createSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createSpecialSlidePortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createSpecialSlidePortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlidePortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createSpecialSlidePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlidePortion", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createSpecialSlidePortion", "folder");
            initialize("createSpecialSlidePortion", "folder", "String", valueFolder);
            Portion response = api.createSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "createSpecialSlidePortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "createSpecialSlidePortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlidePortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createSpecialSlidePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlidePortion", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createSpecialSlidePortion", "storage");
            initialize("createSpecialSlidePortion", "storage", "String", valueStorage);
            Portion response = api.createSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "createSpecialSlidePortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "createSpecialSlidePortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlidePortionInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createSpecialSlidePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlidePortion", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlidePortion", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "createSpecialSlidePortion", "subShape");
            initialize("createSpecialSlidePortion", "subShape", "String", valueSubShape);
            Portion response = api.createSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "createSpecialSlidePortion", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "createSpecialSlidePortion");
        }
    }
    
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideShapeTest() throws ApiException, Exception {
        initialize("createSpecialSlideShape", null, null, null);
        ShapeBase response = null;
        String valueName = (String)getTestValue("String", "createSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideShape", "slideType");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createSpecialSlideShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createSpecialSlideShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlideShape", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlideShape", "subShape");
        response = api.createSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideShape", "slideType");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createSpecialSlideShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createSpecialSlideShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlideShape", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlideShape", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createSpecialSlideShape", "name");
            initialize("createSpecialSlideShape", "name", "String", valueName);
            ShapeBase response = api.createSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "createSpecialSlideShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "createSpecialSlideShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideShape", "slideType");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createSpecialSlideShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createSpecialSlideShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlideShape", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlideShape", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createSpecialSlideShape", "slideIndex");
            initialize("createSpecialSlideShape", "slideIndex", "Integer", valueSlideIndex);
            ShapeBase response = api.createSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "createSpecialSlideShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "createSpecialSlideShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideShapeInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideShape", "slideType");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createSpecialSlideShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createSpecialSlideShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlideShape", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlideShape", "subShape");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "createSpecialSlideShape", "slideType");
            initialize("createSpecialSlideShape", "slideType", "SpecialSlideType", valueSlideType);
            ShapeBase response = api.createSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "createSpecialSlideShape", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "createSpecialSlideShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideShapeInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideShape", "slideType");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createSpecialSlideShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createSpecialSlideShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlideShape", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlideShape", "subShape");
        try {
            valueDto = (ShapeBase)invalidizeTestValue("ShapeBase", valueDto, "createSpecialSlideShape", "dto");
            initialize("createSpecialSlideShape", "dto", "ShapeBase", valueDto);
            ShapeBase response = api.createSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ShapeBase", "dto", "createSpecialSlideShape", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("ShapeBase", "dto", "createSpecialSlideShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideShapeInvalidShapeToCloneTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideShape", "slideType");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createSpecialSlideShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createSpecialSlideShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlideShape", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlideShape", "subShape");
        try {
            valueShapeToClone = (Integer)invalidizeTestValue("Integer", valueShapeToClone, "createSpecialSlideShape", "shapeToClone");
            initialize("createSpecialSlideShape", "shapeToClone", "Integer", valueShapeToClone);
            ShapeBase response = api.createSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeToClone", "createSpecialSlideShape", valueShapeToClone);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeToClone", "createSpecialSlideShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideShapeInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideShape", "slideType");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createSpecialSlideShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createSpecialSlideShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlideShape", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlideShape", "subShape");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "createSpecialSlideShape", "position");
            initialize("createSpecialSlideShape", "position", "Integer", valuePosition);
            ShapeBase response = api.createSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "position", "createSpecialSlideShape", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "position", "createSpecialSlideShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideShape", "slideType");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createSpecialSlideShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createSpecialSlideShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlideShape", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlideShape", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createSpecialSlideShape", "password");
            initialize("createSpecialSlideShape", "password", "String", valuePassword);
            ShapeBase response = api.createSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createSpecialSlideShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createSpecialSlideShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideShape", "slideType");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createSpecialSlideShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createSpecialSlideShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlideShape", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlideShape", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createSpecialSlideShape", "folder");
            initialize("createSpecialSlideShape", "folder", "String", valueFolder);
            ShapeBase response = api.createSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "createSpecialSlideShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "createSpecialSlideShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideShape", "slideType");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createSpecialSlideShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createSpecialSlideShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlideShape", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlideShape", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createSpecialSlideShape", "storage");
            initialize("createSpecialSlideShape", "storage", "String", valueStorage);
            ShapeBase response = api.createSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "createSpecialSlideShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "createSpecialSlideShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpecialSlideShapeInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "createSpecialSlideShape", "slideType");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createSpecialSlideShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createSpecialSlideShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSpecialSlideShape", "position");
        String valuePassword = (String)getTestValue("String", "createSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "createSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "createSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "createSpecialSlideShape", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "createSpecialSlideShape", "subShape");
            initialize("createSpecialSlideShape", "subShape", "String", valueSubShape);
            ShapeBase response = api.createSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "createSpecialSlideShape", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "createSpecialSlideShape");
        }
    }
    
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkTest() throws ApiException, Exception {
        initialize("createWatermark", null, null, null);
        ;
        String valueName = (String)getTestValue("String", "createWatermark", "name");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermark", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermark", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermark", "text");
        String valueFontName = (String)getTestValue("String", "createWatermark", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermark", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createWatermark", "storage");
        api.createWatermark(valueName, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword, valueFolder, valueStorage);
    }

    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createWatermark", "name");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermark", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermark", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermark", "text");
        String valueFontName = (String)getTestValue("String", "createWatermark", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermark", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createWatermark", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createWatermark", "name");
            initialize("createWatermark", "name", "String", valueName);
            api.createWatermark(valueName, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "createWatermark", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "createWatermark");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkInvalidShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createWatermark", "name");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermark", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermark", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermark", "text");
        String valueFontName = (String)getTestValue("String", "createWatermark", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermark", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createWatermark", "storage");
        try {
            valueShape = (Shape)invalidizeTestValue("Shape", valueShape, "createWatermark", "shape");
            initialize("createWatermark", "shape", "Shape", valueShape);
            api.createWatermark(valueName, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Shape", "shape", "createWatermark", valueShape);
        }
        if (needAssertResponse) {
            assertResponse("Shape", "shape", "createWatermark");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkInvalidFontHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createWatermark", "name");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermark", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermark", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermark", "text");
        String valueFontName = (String)getTestValue("String", "createWatermark", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermark", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createWatermark", "storage");
        try {
            valueFontHeight = (Double)invalidizeTestValue("Double", valueFontHeight, "createWatermark", "fontHeight");
            initialize("createWatermark", "fontHeight", "Double", valueFontHeight);
            api.createWatermark(valueName, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Double", "fontHeight", "createWatermark", valueFontHeight);
        }
        if (needAssertResponse) {
            assertResponse("Double", "fontHeight", "createWatermark");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkInvalidTextTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createWatermark", "name");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermark", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermark", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermark", "text");
        String valueFontName = (String)getTestValue("String", "createWatermark", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermark", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createWatermark", "storage");
        try {
            valueText = (String)invalidizeTestValue("String", valueText, "createWatermark", "text");
            initialize("createWatermark", "text", "String", valueText);
            api.createWatermark(valueName, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "text", "createWatermark", valueText);
        }
        if (needAssertResponse) {
            assertResponse("String", "text", "createWatermark");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkInvalidFontNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createWatermark", "name");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermark", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermark", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermark", "text");
        String valueFontName = (String)getTestValue("String", "createWatermark", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermark", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createWatermark", "storage");
        try {
            valueFontName = (String)invalidizeTestValue("String", valueFontName, "createWatermark", "fontName");
            initialize("createWatermark", "fontName", "String", valueFontName);
            api.createWatermark(valueName, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontName", "createWatermark", valueFontName);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontName", "createWatermark");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkInvalidFontColorTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createWatermark", "name");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermark", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermark", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermark", "text");
        String valueFontName = (String)getTestValue("String", "createWatermark", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermark", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createWatermark", "storage");
        try {
            valueFontColor = (String)invalidizeTestValue("String", valueFontColor, "createWatermark", "fontColor");
            initialize("createWatermark", "fontColor", "String", valueFontColor);
            api.createWatermark(valueName, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontColor", "createWatermark", valueFontColor);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontColor", "createWatermark");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createWatermark", "name");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermark", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermark", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermark", "text");
        String valueFontName = (String)getTestValue("String", "createWatermark", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermark", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createWatermark", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createWatermark", "password");
            initialize("createWatermark", "password", "String", valuePassword);
            api.createWatermark(valueName, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createWatermark", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createWatermark");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createWatermark", "name");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermark", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermark", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermark", "text");
        String valueFontName = (String)getTestValue("String", "createWatermark", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermark", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createWatermark", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createWatermark", "folder");
            initialize("createWatermark", "folder", "String", valueFolder);
            api.createWatermark(valueName, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "createWatermark", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "createWatermark");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createWatermark", "name");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermark", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermark", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermark", "text");
        String valueFontName = (String)getTestValue("String", "createWatermark", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermark", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createWatermark", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createWatermark", "storage");
            initialize("createWatermark", "storage", "String", valueStorage);
            api.createWatermark(valueName, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "createWatermark", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "createWatermark");
        }
    }
    
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkOnlineTest() throws ApiException, Exception {
        initialize("createWatermarkOnline", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createWatermarkOnline", "document");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermarkOnline", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermarkOnline", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermarkOnline", "text");
        String valueFontName = (String)getTestValue("String", "createWatermarkOnline", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermarkOnline", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermarkOnline", "password");
        response = api.createWatermarkOnline(valueDocument, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createWatermarkOnline", "document");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermarkOnline", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermarkOnline", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermarkOnline", "text");
        String valueFontName = (String)getTestValue("String", "createWatermarkOnline", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermarkOnline", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermarkOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "createWatermarkOnline", "document");
            initialize("createWatermarkOnline", "document", "byte[]", valueDocument);
            File response = api.createWatermarkOnline(valueDocument, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "createWatermarkOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "createWatermarkOnline");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkOnlineInvalidShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createWatermarkOnline", "document");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermarkOnline", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermarkOnline", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermarkOnline", "text");
        String valueFontName = (String)getTestValue("String", "createWatermarkOnline", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermarkOnline", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermarkOnline", "password");
        try {
            valueShape = (Shape)invalidizeTestValue("Shape", valueShape, "createWatermarkOnline", "shape");
            initialize("createWatermarkOnline", "shape", "Shape", valueShape);
            File response = api.createWatermarkOnline(valueDocument, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Shape", "shape", "createWatermarkOnline", valueShape);
        }
        if (needAssertResponse) {
            assertResponse("Shape", "shape", "createWatermarkOnline");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkOnlineInvalidFontHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createWatermarkOnline", "document");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermarkOnline", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermarkOnline", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermarkOnline", "text");
        String valueFontName = (String)getTestValue("String", "createWatermarkOnline", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermarkOnline", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermarkOnline", "password");
        try {
            valueFontHeight = (Double)invalidizeTestValue("Double", valueFontHeight, "createWatermarkOnline", "fontHeight");
            initialize("createWatermarkOnline", "fontHeight", "Double", valueFontHeight);
            File response = api.createWatermarkOnline(valueDocument, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Double", "fontHeight", "createWatermarkOnline", valueFontHeight);
        }
        if (needAssertResponse) {
            assertResponse("Double", "fontHeight", "createWatermarkOnline");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkOnlineInvalidTextTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createWatermarkOnline", "document");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermarkOnline", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermarkOnline", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermarkOnline", "text");
        String valueFontName = (String)getTestValue("String", "createWatermarkOnline", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermarkOnline", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermarkOnline", "password");
        try {
            valueText = (String)invalidizeTestValue("String", valueText, "createWatermarkOnline", "text");
            initialize("createWatermarkOnline", "text", "String", valueText);
            File response = api.createWatermarkOnline(valueDocument, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "text", "createWatermarkOnline", valueText);
        }
        if (needAssertResponse) {
            assertResponse("String", "text", "createWatermarkOnline");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkOnlineInvalidFontNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createWatermarkOnline", "document");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermarkOnline", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermarkOnline", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermarkOnline", "text");
        String valueFontName = (String)getTestValue("String", "createWatermarkOnline", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermarkOnline", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermarkOnline", "password");
        try {
            valueFontName = (String)invalidizeTestValue("String", valueFontName, "createWatermarkOnline", "fontName");
            initialize("createWatermarkOnline", "fontName", "String", valueFontName);
            File response = api.createWatermarkOnline(valueDocument, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontName", "createWatermarkOnline", valueFontName);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontName", "createWatermarkOnline");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkOnlineInvalidFontColorTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createWatermarkOnline", "document");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermarkOnline", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermarkOnline", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermarkOnline", "text");
        String valueFontName = (String)getTestValue("String", "createWatermarkOnline", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermarkOnline", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermarkOnline", "password");
        try {
            valueFontColor = (String)invalidizeTestValue("String", valueFontColor, "createWatermarkOnline", "fontColor");
            initialize("createWatermarkOnline", "fontColor", "String", valueFontColor);
            File response = api.createWatermarkOnline(valueDocument, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontColor", "createWatermarkOnline", valueFontColor);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontColor", "createWatermarkOnline");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createWatermarkOnline", "document");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermarkOnline", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermarkOnline", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermarkOnline", "text");
        String valueFontName = (String)getTestValue("String", "createWatermarkOnline", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermarkOnline", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermarkOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createWatermarkOnline", "password");
            initialize("createWatermarkOnline", "password", "String", valuePassword);
            File response = api.createWatermarkOnline(valueDocument, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "createWatermarkOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "createWatermarkOnline");
        }
    }
    
    /**
     * Remove animation from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationTest() throws ApiException, Exception {
        initialize("deleteAnimation", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "deleteAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimation", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimation", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimation", "storage");
        response = api.deleteAnimation(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove animation from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimation", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimation", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimation", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteAnimation", "name");
            initialize("deleteAnimation", "name", "String", valueName);
            SlideAnimation response = api.deleteAnimation(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteAnimation", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteAnimation");
        }
    }
    /**
     * Remove animation from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimation", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimation", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimation", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteAnimation", "slideIndex");
            initialize("deleteAnimation", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.deleteAnimation(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteAnimation", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteAnimation");
        }
    }
    /**
     * Remove animation from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimation", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimation", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimation", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteAnimation", "password");
            initialize("deleteAnimation", "password", "String", valuePassword);
            SlideAnimation response = api.deleteAnimation(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteAnimation", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteAnimation");
        }
    }
    /**
     * Remove animation from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimation", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimation", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimation", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteAnimation", "folder");
            initialize("deleteAnimation", "folder", "String", valueFolder);
            SlideAnimation response = api.deleteAnimation(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteAnimation", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteAnimation");
        }
    }
    /**
     * Remove animation from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimation", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimation", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimation", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteAnimation", "storage");
            initialize("deleteAnimation", "storage", "String", valueStorage);
            SlideAnimation response = api.deleteAnimation(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteAnimation", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteAnimation");
        }
    }
    
    /**
     * Remove an effect from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationEffectTest() throws ApiException, Exception {
        initialize("deleteAnimationEffect", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "deleteAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationEffect", "storage");
        response = api.deleteAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove an effect from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationEffectInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationEffect", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteAnimationEffect", "name");
            initialize("deleteAnimationEffect", "name", "String", valueName);
            SlideAnimation response = api.deleteAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteAnimationEffect", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteAnimationEffect");
        }
    }
    /**
     * Remove an effect from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationEffectInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationEffect", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteAnimationEffect", "slideIndex");
            initialize("deleteAnimationEffect", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.deleteAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteAnimationEffect", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteAnimationEffect");
        }
    }
    /**
     * Remove an effect from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationEffectInvalidEffectIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationEffect", "storage");
        try {
            valueEffectIndex = (Integer)invalidizeTestValue("Integer", valueEffectIndex, "deleteAnimationEffect", "effectIndex");
            initialize("deleteAnimationEffect", "effectIndex", "Integer", valueEffectIndex);
            SlideAnimation response = api.deleteAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "effectIndex", "deleteAnimationEffect", valueEffectIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "effectIndex", "deleteAnimationEffect");
        }
    }
    /**
     * Remove an effect from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationEffectInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationEffect", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteAnimationEffect", "password");
            initialize("deleteAnimationEffect", "password", "String", valuePassword);
            SlideAnimation response = api.deleteAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteAnimationEffect", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteAnimationEffect");
        }
    }
    /**
     * Remove an effect from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationEffectInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationEffect", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteAnimationEffect", "folder");
            initialize("deleteAnimationEffect", "folder", "String", valueFolder);
            SlideAnimation response = api.deleteAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteAnimationEffect", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteAnimationEffect");
        }
    }
    /**
     * Remove an effect from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationEffectInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationEffect", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteAnimationEffect", "storage");
            initialize("deleteAnimationEffect", "storage", "String", valueStorage);
            SlideAnimation response = api.deleteAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteAnimationEffect", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteAnimationEffect");
        }
    }
    
    /**
     * Remove an interactive sequence from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceTest() throws ApiException, Exception {
        initialize("deleteAnimationInteractiveSequence", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "storage");
        response = api.deleteAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove an interactive sequence from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteAnimationInteractiveSequence", "name");
            initialize("deleteAnimationInteractiveSequence", "name", "String", valueName);
            SlideAnimation response = api.deleteAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteAnimationInteractiveSequence", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteAnimationInteractiveSequence");
        }
    }
    /**
     * Remove an interactive sequence from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteAnimationInteractiveSequence", "slideIndex");
            initialize("deleteAnimationInteractiveSequence", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.deleteAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteAnimationInteractiveSequence", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteAnimationInteractiveSequence");
        }
    }
    /**
     * Remove an interactive sequence from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceInvalidSequenceIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "storage");
        try {
            valueSequenceIndex = (Integer)invalidizeTestValue("Integer", valueSequenceIndex, "deleteAnimationInteractiveSequence", "sequenceIndex");
            initialize("deleteAnimationInteractiveSequence", "sequenceIndex", "Integer", valueSequenceIndex);
            SlideAnimation response = api.deleteAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "sequenceIndex", "deleteAnimationInteractiveSequence", valueSequenceIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "sequenceIndex", "deleteAnimationInteractiveSequence");
        }
    }
    /**
     * Remove an interactive sequence from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteAnimationInteractiveSequence", "password");
            initialize("deleteAnimationInteractiveSequence", "password", "String", valuePassword);
            SlideAnimation response = api.deleteAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteAnimationInteractiveSequence", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteAnimationInteractiveSequence");
        }
    }
    /**
     * Remove an interactive sequence from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteAnimationInteractiveSequence", "folder");
            initialize("deleteAnimationInteractiveSequence", "folder", "String", valueFolder);
            SlideAnimation response = api.deleteAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteAnimationInteractiveSequence", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteAnimationInteractiveSequence");
        }
    }
    /**
     * Remove an interactive sequence from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteAnimationInteractiveSequence", "storage");
            initialize("deleteAnimationInteractiveSequence", "storage", "String", valueStorage);
            SlideAnimation response = api.deleteAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteAnimationInteractiveSequence", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteAnimationInteractiveSequence");
        }
    }
    
    /**
     * Remove an effect from slide animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceEffectTest() throws ApiException, Exception {
        initialize("deleteAnimationInteractiveSequenceEffect", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "storage");
        response = api.deleteAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove an effect from slide animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceEffectInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteAnimationInteractiveSequenceEffect", "name");
            initialize("deleteAnimationInteractiveSequenceEffect", "name", "String", valueName);
            SlideAnimation response = api.deleteAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteAnimationInteractiveSequenceEffect", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Remove an effect from slide animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceEffectInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteAnimationInteractiveSequenceEffect", "slideIndex");
            initialize("deleteAnimationInteractiveSequenceEffect", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.deleteAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteAnimationInteractiveSequenceEffect", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Remove an effect from slide animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceEffectInvalidSequenceIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSequenceIndex = (Integer)invalidizeTestValue("Integer", valueSequenceIndex, "deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
            initialize("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", "Integer", valueSequenceIndex);
            SlideAnimation response = api.deleteAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "sequenceIndex", "deleteAnimationInteractiveSequenceEffect", valueSequenceIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "sequenceIndex", "deleteAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Remove an effect from slide animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceEffectInvalidEffectIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "storage");
        try {
            valueEffectIndex = (Integer)invalidizeTestValue("Integer", valueEffectIndex, "deleteAnimationInteractiveSequenceEffect", "effectIndex");
            initialize("deleteAnimationInteractiveSequenceEffect", "effectIndex", "Integer", valueEffectIndex);
            SlideAnimation response = api.deleteAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "effectIndex", "deleteAnimationInteractiveSequenceEffect", valueEffectIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "effectIndex", "deleteAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Remove an effect from slide animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceEffectInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteAnimationInteractiveSequenceEffect", "password");
            initialize("deleteAnimationInteractiveSequenceEffect", "password", "String", valuePassword);
            SlideAnimation response = api.deleteAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteAnimationInteractiveSequenceEffect", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Remove an effect from slide animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceEffectInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteAnimationInteractiveSequenceEffect", "folder");
            initialize("deleteAnimationInteractiveSequenceEffect", "folder", "String", valueFolder);
            SlideAnimation response = api.deleteAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteAnimationInteractiveSequenceEffect", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Remove an effect from slide animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceEffectInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteAnimationInteractiveSequenceEffect", "storage");
            initialize("deleteAnimationInteractiveSequenceEffect", "storage", "String", valueStorage);
            SlideAnimation response = api.deleteAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteAnimationInteractiveSequenceEffect", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteAnimationInteractiveSequenceEffect");
        }
    }
    
    /**
     * Clear all interactive sequences from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequencesTest() throws ApiException, Exception {
        initialize("deleteAnimationInteractiveSequences", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequences", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "storage");
        response = api.deleteAnimationInteractiveSequences(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Clear all interactive sequences from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequencesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequences", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteAnimationInteractiveSequences", "name");
            initialize("deleteAnimationInteractiveSequences", "name", "String", valueName);
            SlideAnimation response = api.deleteAnimationInteractiveSequences(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteAnimationInteractiveSequences", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteAnimationInteractiveSequences");
        }
    }
    /**
     * Clear all interactive sequences from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequencesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequences", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteAnimationInteractiveSequences", "slideIndex");
            initialize("deleteAnimationInteractiveSequences", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.deleteAnimationInteractiveSequences(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteAnimationInteractiveSequences", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteAnimationInteractiveSequences");
        }
    }
    /**
     * Clear all interactive sequences from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequencesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequences", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteAnimationInteractiveSequences", "password");
            initialize("deleteAnimationInteractiveSequences", "password", "String", valuePassword);
            SlideAnimation response = api.deleteAnimationInteractiveSequences(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteAnimationInteractiveSequences", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteAnimationInteractiveSequences");
        }
    }
    /**
     * Clear all interactive sequences from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequencesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequences", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteAnimationInteractiveSequences", "folder");
            initialize("deleteAnimationInteractiveSequences", "folder", "String", valueFolder);
            SlideAnimation response = api.deleteAnimationInteractiveSequences(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteAnimationInteractiveSequences", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteAnimationInteractiveSequences");
        }
    }
    /**
     * Clear all interactive sequences from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequencesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequences", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteAnimationInteractiveSequences", "storage");
            initialize("deleteAnimationInteractiveSequences", "storage", "String", valueStorage);
            SlideAnimation response = api.deleteAnimationInteractiveSequences(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteAnimationInteractiveSequences", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteAnimationInteractiveSequences");
        }
    }
    
    /**
     * Clear main sequence in slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationMainSequenceTest() throws ApiException, Exception {
        initialize("deleteAnimationMainSequence", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "deleteAnimationMainSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationMainSequence", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationMainSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationMainSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationMainSequence", "storage");
        response = api.deleteAnimationMainSequence(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Clear main sequence in slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationMainSequenceInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationMainSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationMainSequence", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationMainSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationMainSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationMainSequence", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteAnimationMainSequence", "name");
            initialize("deleteAnimationMainSequence", "name", "String", valueName);
            SlideAnimation response = api.deleteAnimationMainSequence(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteAnimationMainSequence", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteAnimationMainSequence");
        }
    }
    /**
     * Clear main sequence in slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationMainSequenceInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationMainSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationMainSequence", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationMainSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationMainSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationMainSequence", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteAnimationMainSequence", "slideIndex");
            initialize("deleteAnimationMainSequence", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.deleteAnimationMainSequence(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteAnimationMainSequence", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteAnimationMainSequence");
        }
    }
    /**
     * Clear main sequence in slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationMainSequenceInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationMainSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationMainSequence", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationMainSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationMainSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationMainSequence", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteAnimationMainSequence", "password");
            initialize("deleteAnimationMainSequence", "password", "String", valuePassword);
            SlideAnimation response = api.deleteAnimationMainSequence(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteAnimationMainSequence", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteAnimationMainSequence");
        }
    }
    /**
     * Clear main sequence in slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationMainSequenceInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationMainSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationMainSequence", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationMainSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationMainSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationMainSequence", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteAnimationMainSequence", "folder");
            initialize("deleteAnimationMainSequence", "folder", "String", valueFolder);
            SlideAnimation response = api.deleteAnimationMainSequence(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteAnimationMainSequence", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteAnimationMainSequence");
        }
    }
    /**
     * Clear main sequence in slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationMainSequenceInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationMainSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationMainSequence", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationMainSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationMainSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationMainSequence", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteAnimationMainSequence", "storage");
            initialize("deleteAnimationMainSequence", "storage", "String", valueStorage);
            SlideAnimation response = api.deleteAnimationMainSequence(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteAnimationMainSequence", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteAnimationMainSequence");
        }
    }
    
    /**
     * Remove background from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBackgroundTest() throws ApiException, Exception {
        initialize("deleteBackground", null, null, null);
        SlideBackground response = null;
        String valueName = (String)getTestValue("String", "deleteBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteBackground", "password");
        String valueFolder = (String)getTestValue("String", "deleteBackground", "folder");
        String valueStorage = (String)getTestValue("String", "deleteBackground", "storage");
        response = api.deleteBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove background from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBackgroundInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteBackground", "password");
        String valueFolder = (String)getTestValue("String", "deleteBackground", "folder");
        String valueStorage = (String)getTestValue("String", "deleteBackground", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteBackground", "name");
            initialize("deleteBackground", "name", "String", valueName);
            SlideBackground response = api.deleteBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteBackground", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteBackground");
        }
    }
    /**
     * Remove background from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBackgroundInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteBackground", "password");
        String valueFolder = (String)getTestValue("String", "deleteBackground", "folder");
        String valueStorage = (String)getTestValue("String", "deleteBackground", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteBackground", "slideIndex");
            initialize("deleteBackground", "slideIndex", "Integer", valueSlideIndex);
            SlideBackground response = api.deleteBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteBackground", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteBackground");
        }
    }
    /**
     * Remove background from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBackgroundInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteBackground", "password");
        String valueFolder = (String)getTestValue("String", "deleteBackground", "folder");
        String valueStorage = (String)getTestValue("String", "deleteBackground", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteBackground", "password");
            initialize("deleteBackground", "password", "String", valuePassword);
            SlideBackground response = api.deleteBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteBackground", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteBackground");
        }
    }
    /**
     * Remove background from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBackgroundInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteBackground", "password");
        String valueFolder = (String)getTestValue("String", "deleteBackground", "folder");
        String valueStorage = (String)getTestValue("String", "deleteBackground", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteBackground", "folder");
            initialize("deleteBackground", "folder", "String", valueFolder);
            SlideBackground response = api.deleteBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteBackground", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteBackground");
        }
    }
    /**
     * Remove background from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBackgroundInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteBackground", "password");
        String valueFolder = (String)getTestValue("String", "deleteBackground", "folder");
        String valueStorage = (String)getTestValue("String", "deleteBackground", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteBackground", "storage");
            initialize("deleteBackground", "storage", "String", valueStorage);
            SlideBackground response = api.deleteBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteBackground", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteBackground");
        }
    }
    
    /**
     * Delete a category from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartCategoryTest() throws ApiException, Exception {
        initialize("deleteChartCategory", null, null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "deleteChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "categoryIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartCategory", "storage");
        response = api.deleteChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Delete a category from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartCategoryInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "categoryIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartCategory", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteChartCategory", "name");
            initialize("deleteChartCategory", "name", "String", valueName);
            Chart response = api.deleteChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteChartCategory", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteChartCategory");
        }
    }
    /**
     * Delete a category from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartCategoryInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "categoryIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartCategory", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteChartCategory", "slideIndex");
            initialize("deleteChartCategory", "slideIndex", "Integer", valueSlideIndex);
            Chart response = api.deleteChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteChartCategory", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteChartCategory");
        }
    }
    /**
     * Delete a category from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartCategoryInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "categoryIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartCategory", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteChartCategory", "shapeIndex");
            initialize("deleteChartCategory", "shapeIndex", "Integer", valueShapeIndex);
            Chart response = api.deleteChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "deleteChartCategory", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "deleteChartCategory");
        }
    }
    /**
     * Delete a category from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartCategoryInvalidCategoryIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "categoryIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartCategory", "storage");
        try {
            valueCategoryIndex = (Integer)invalidizeTestValue("Integer", valueCategoryIndex, "deleteChartCategory", "categoryIndex");
            initialize("deleteChartCategory", "categoryIndex", "Integer", valueCategoryIndex);
            Chart response = api.deleteChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "categoryIndex", "deleteChartCategory", valueCategoryIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "categoryIndex", "deleteChartCategory");
        }
    }
    /**
     * Delete a category from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartCategoryInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "categoryIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartCategory", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteChartCategory", "password");
            initialize("deleteChartCategory", "password", "String", valuePassword);
            Chart response = api.deleteChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteChartCategory", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteChartCategory");
        }
    }
    /**
     * Delete a category from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartCategoryInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "categoryIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartCategory", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteChartCategory", "folder");
            initialize("deleteChartCategory", "folder", "String", valueFolder);
            Chart response = api.deleteChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteChartCategory", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteChartCategory");
        }
    }
    /**
     * Delete a category from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartCategoryInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "categoryIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartCategory", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteChartCategory", "storage");
            initialize("deleteChartCategory", "storage", "String", valueStorage);
            Chart response = api.deleteChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteChartCategory", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteChartCategory");
        }
    }
    
    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointTest() throws ApiException, Exception {
        initialize("deleteChartDataPoint", null, null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteChartDataPoint", "name");
            initialize("deleteChartDataPoint", "name", "String", valueName);
            Chart response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteChartDataPoint", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteChartDataPoint");
        }
    }
    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteChartDataPoint", "slideIndex");
            initialize("deleteChartDataPoint", "slideIndex", "Integer", valueSlideIndex);
            Chart response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteChartDataPoint", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteChartDataPoint");
        }
    }
    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteChartDataPoint", "shapeIndex");
            initialize("deleteChartDataPoint", "shapeIndex", "Integer", valueShapeIndex);
            Chart response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "deleteChartDataPoint", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "deleteChartDataPoint");
        }
    }
    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointInvalidSeriesIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        try {
            valueSeriesIndex = (Integer)invalidizeTestValue("Integer", valueSeriesIndex, "deleteChartDataPoint", "seriesIndex");
            initialize("deleteChartDataPoint", "seriesIndex", "Integer", valueSeriesIndex);
            Chart response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "seriesIndex", "deleteChartDataPoint", valueSeriesIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "seriesIndex", "deleteChartDataPoint");
        }
    }
    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointInvalidPointIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        try {
            valuePointIndex = (Integer)invalidizeTestValue("Integer", valuePointIndex, "deleteChartDataPoint", "pointIndex");
            initialize("deleteChartDataPoint", "pointIndex", "Integer", valuePointIndex);
            Chart response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "pointIndex", "deleteChartDataPoint", valuePointIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "pointIndex", "deleteChartDataPoint");
        }
    }
    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteChartDataPoint", "password");
            initialize("deleteChartDataPoint", "password", "String", valuePassword);
            Chart response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteChartDataPoint", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteChartDataPoint");
        }
    }
    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteChartDataPoint", "folder");
            initialize("deleteChartDataPoint", "folder", "String", valueFolder);
            Chart response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteChartDataPoint", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteChartDataPoint");
        }
    }
    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteChartDataPoint", "storage");
            initialize("deleteChartDataPoint", "storage", "String", valueStorage);
            Chart response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteChartDataPoint", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteChartDataPoint");
        }
    }
    
    /**
     * Delete a series from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartSeriesTest() throws ApiException, Exception {
        initialize("deleteChartSeries", null, null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "deleteChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "seriesIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartSeries", "storage");
        response = api.deleteChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Delete a series from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartSeriesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "seriesIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartSeries", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteChartSeries", "name");
            initialize("deleteChartSeries", "name", "String", valueName);
            Chart response = api.deleteChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteChartSeries", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteChartSeries");
        }
    }
    /**
     * Delete a series from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartSeriesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "seriesIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartSeries", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteChartSeries", "slideIndex");
            initialize("deleteChartSeries", "slideIndex", "Integer", valueSlideIndex);
            Chart response = api.deleteChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteChartSeries", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteChartSeries");
        }
    }
    /**
     * Delete a series from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartSeriesInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "seriesIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartSeries", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteChartSeries", "shapeIndex");
            initialize("deleteChartSeries", "shapeIndex", "Integer", valueShapeIndex);
            Chart response = api.deleteChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "deleteChartSeries", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "deleteChartSeries");
        }
    }
    /**
     * Delete a series from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartSeriesInvalidSeriesIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "seriesIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartSeries", "storage");
        try {
            valueSeriesIndex = (Integer)invalidizeTestValue("Integer", valueSeriesIndex, "deleteChartSeries", "seriesIndex");
            initialize("deleteChartSeries", "seriesIndex", "Integer", valueSeriesIndex);
            Chart response = api.deleteChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "seriesIndex", "deleteChartSeries", valueSeriesIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "seriesIndex", "deleteChartSeries");
        }
    }
    /**
     * Delete a series from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartSeriesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "seriesIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartSeries", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteChartSeries", "password");
            initialize("deleteChartSeries", "password", "String", valuePassword);
            Chart response = api.deleteChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteChartSeries", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteChartSeries");
        }
    }
    /**
     * Delete a series from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartSeriesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "seriesIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartSeries", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteChartSeries", "folder");
            initialize("deleteChartSeries", "folder", "String", valueFolder);
            Chart response = api.deleteChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteChartSeries", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteChartSeries");
        }
    }
    /**
     * Delete a series from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartSeriesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "seriesIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartSeries", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteChartSeries", "storage");
            initialize("deleteChartSeries", "storage", "String", valueStorage);
            Chart response = api.deleteChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteChartSeries", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteChartSeries");
        }
    }
    
    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCommentsTest() throws ApiException, Exception {
        initialize("deleteComments", null, null, null);
        ;
        String valueName = (String)getTestValue("String", "deleteComments", "name");
        String valueAuthor = (String)getTestValue("String", "deleteComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteComments", "storage");
        api.deleteComments(valueName, valueAuthor, valuePassword, valueFolder, valueStorage);
    }

    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCommentsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteComments", "name");
        String valueAuthor = (String)getTestValue("String", "deleteComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteComments", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteComments", "name");
            initialize("deleteComments", "name", "String", valueName);
            api.deleteComments(valueName, valueAuthor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteComments", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteComments");
        }
    }
    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCommentsInvalidAuthorTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteComments", "name");
        String valueAuthor = (String)getTestValue("String", "deleteComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteComments", "storage");
        try {
            valueAuthor = (String)invalidizeTestValue("String", valueAuthor, "deleteComments", "author");
            initialize("deleteComments", "author", "String", valueAuthor);
            api.deleteComments(valueName, valueAuthor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "author", "deleteComments", valueAuthor);
        }
        if (needAssertResponse) {
            assertResponse("String", "author", "deleteComments");
        }
    }
    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCommentsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteComments", "name");
        String valueAuthor = (String)getTestValue("String", "deleteComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteComments", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteComments", "password");
            initialize("deleteComments", "password", "String", valuePassword);
            api.deleteComments(valueName, valueAuthor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteComments", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteComments");
        }
    }
    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCommentsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteComments", "name");
        String valueAuthor = (String)getTestValue("String", "deleteComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteComments", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteComments", "folder");
            initialize("deleteComments", "folder", "String", valueFolder);
            api.deleteComments(valueName, valueAuthor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteComments", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteComments");
        }
    }
    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCommentsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteComments", "name");
        String valueAuthor = (String)getTestValue("String", "deleteComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteComments", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteComments", "storage");
            initialize("deleteComments", "storage", "String", valueStorage);
            api.deleteComments(valueName, valueAuthor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteComments", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteComments");
        }
    }
    
    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCommentsOnlineTest() throws ApiException, Exception {
        initialize("deleteCommentsOnline", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteCommentsOnline", "document");
        String valueAuthor = (String)getTestValue("String", "deleteCommentsOnline", "author");
        String valuePassword = (String)getTestValue("String", "deleteCommentsOnline", "password");
        response = api.deleteCommentsOnline(valueDocument, valueAuthor, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCommentsOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteCommentsOnline", "document");
        String valueAuthor = (String)getTestValue("String", "deleteCommentsOnline", "author");
        String valuePassword = (String)getTestValue("String", "deleteCommentsOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "deleteCommentsOnline", "document");
            initialize("deleteCommentsOnline", "document", "byte[]", valueDocument);
            File response = api.deleteCommentsOnline(valueDocument, valueAuthor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "deleteCommentsOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "deleteCommentsOnline");
        }
    }
    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCommentsOnlineInvalidAuthorTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteCommentsOnline", "document");
        String valueAuthor = (String)getTestValue("String", "deleteCommentsOnline", "author");
        String valuePassword = (String)getTestValue("String", "deleteCommentsOnline", "password");
        try {
            valueAuthor = (String)invalidizeTestValue("String", valueAuthor, "deleteCommentsOnline", "author");
            initialize("deleteCommentsOnline", "author", "String", valueAuthor);
            File response = api.deleteCommentsOnline(valueDocument, valueAuthor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "author", "deleteCommentsOnline", valueAuthor);
        }
        if (needAssertResponse) {
            assertResponse("String", "author", "deleteCommentsOnline");
        }
    }
    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCommentsOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteCommentsOnline", "document");
        String valueAuthor = (String)getTestValue("String", "deleteCommentsOnline", "author");
        String valuePassword = (String)getTestValue("String", "deleteCommentsOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteCommentsOnline", "password");
            initialize("deleteCommentsOnline", "password", "String", valuePassword);
            File response = api.deleteCommentsOnline(valueDocument, valueAuthor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteCommentsOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteCommentsOnline");
        }
    }
    
    /**
     * Clean document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentPropertiesTest() throws ApiException, Exception {
        initialize("deleteDocumentProperties", null, null, null);
        DocumentProperties response = null;
        String valueName = (String)getTestValue("String", "deleteDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "deleteDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "deleteDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "deleteDocumentProperties", "storage");
        response = api.deleteDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Clean document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentPropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "deleteDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "deleteDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "deleteDocumentProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteDocumentProperties", "name");
            initialize("deleteDocumentProperties", "name", "String", valueName);
            DocumentProperties response = api.deleteDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteDocumentProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteDocumentProperties");
        }
    }
    /**
     * Clean document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentPropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "deleteDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "deleteDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "deleteDocumentProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteDocumentProperties", "password");
            initialize("deleteDocumentProperties", "password", "String", valuePassword);
            DocumentProperties response = api.deleteDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteDocumentProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteDocumentProperties");
        }
    }
    /**
     * Clean document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentPropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "deleteDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "deleteDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "deleteDocumentProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteDocumentProperties", "folder");
            initialize("deleteDocumentProperties", "folder", "String", valueFolder);
            DocumentProperties response = api.deleteDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteDocumentProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteDocumentProperties");
        }
    }
    /**
     * Clean document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentPropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "deleteDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "deleteDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "deleteDocumentProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteDocumentProperties", "storage");
            initialize("deleteDocumentProperties", "storage", "String", valueStorage);
            DocumentProperties response = api.deleteDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteDocumentProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteDocumentProperties");
        }
    }
    
    /**
     * Delete document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentPropertyTest() throws ApiException, Exception {
        initialize("deleteDocumentProperty", null, null, null);
        DocumentProperties response = null;
        String valueName = (String)getTestValue("String", "deleteDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "deleteDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "deleteDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "deleteDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "deleteDocumentProperty", "storage");
        response = api.deleteDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Delete document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentPropertyInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "deleteDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "deleteDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "deleteDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "deleteDocumentProperty", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteDocumentProperty", "name");
            initialize("deleteDocumentProperty", "name", "String", valueName);
            DocumentProperties response = api.deleteDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteDocumentProperty", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteDocumentProperty");
        }
    }
    /**
     * Delete document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentPropertyInvalidPropertyNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "deleteDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "deleteDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "deleteDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "deleteDocumentProperty", "storage");
        try {
            valuePropertyName = (String)invalidizeTestValue("String", valuePropertyName, "deleteDocumentProperty", "propertyName");
            initialize("deleteDocumentProperty", "propertyName", "String", valuePropertyName);
            DocumentProperties response = api.deleteDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "propertyName", "deleteDocumentProperty", valuePropertyName);
        }
        if (needAssertResponse) {
            assertResponse("String", "propertyName", "deleteDocumentProperty");
        }
    }
    /**
     * Delete document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentPropertyInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "deleteDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "deleteDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "deleteDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "deleteDocumentProperty", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteDocumentProperty", "password");
            initialize("deleteDocumentProperty", "password", "String", valuePassword);
            DocumentProperties response = api.deleteDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteDocumentProperty", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteDocumentProperty");
        }
    }
    /**
     * Delete document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentPropertyInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "deleteDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "deleteDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "deleteDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "deleteDocumentProperty", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteDocumentProperty", "folder");
            initialize("deleteDocumentProperty", "folder", "String", valueFolder);
            DocumentProperties response = api.deleteDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteDocumentProperty", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteDocumentProperty");
        }
    }
    /**
     * Delete document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentPropertyInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "deleteDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "deleteDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "deleteDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "deleteDocumentProperty", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteDocumentProperty", "storage");
            initialize("deleteDocumentProperty", "storage", "String", valueStorage);
            DocumentProperties response = api.deleteDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteDocumentProperty", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteDocumentProperty");
        }
    }
    
    /**
     * Removes specified embedded font and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEmbeddedFontTest() throws ApiException, Exception {
        initialize("deleteEmbeddedFont", null, null, null);
        FontsData response = null;
        String valueName = (String)getTestValue("String", "deleteEmbeddedFont", "name");
        String valueFontName = (String)getTestValue("String", "deleteEmbeddedFont", "fontName");
        String valuePassword = (String)getTestValue("String", "deleteEmbeddedFont", "password");
        String valueFolder = (String)getTestValue("String", "deleteEmbeddedFont", "folder");
        String valueStorage = (String)getTestValue("String", "deleteEmbeddedFont", "storage");
        response = api.deleteEmbeddedFont(valueName, valueFontName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Removes specified embedded font and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEmbeddedFontInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteEmbeddedFont", "name");
        String valueFontName = (String)getTestValue("String", "deleteEmbeddedFont", "fontName");
        String valuePassword = (String)getTestValue("String", "deleteEmbeddedFont", "password");
        String valueFolder = (String)getTestValue("String", "deleteEmbeddedFont", "folder");
        String valueStorage = (String)getTestValue("String", "deleteEmbeddedFont", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteEmbeddedFont", "name");
            initialize("deleteEmbeddedFont", "name", "String", valueName);
            FontsData response = api.deleteEmbeddedFont(valueName, valueFontName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteEmbeddedFont", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteEmbeddedFont");
        }
    }
    /**
     * Removes specified embedded font and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEmbeddedFontInvalidFontNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteEmbeddedFont", "name");
        String valueFontName = (String)getTestValue("String", "deleteEmbeddedFont", "fontName");
        String valuePassword = (String)getTestValue("String", "deleteEmbeddedFont", "password");
        String valueFolder = (String)getTestValue("String", "deleteEmbeddedFont", "folder");
        String valueStorage = (String)getTestValue("String", "deleteEmbeddedFont", "storage");
        try {
            valueFontName = (String)invalidizeTestValue("String", valueFontName, "deleteEmbeddedFont", "fontName");
            initialize("deleteEmbeddedFont", "fontName", "String", valueFontName);
            FontsData response = api.deleteEmbeddedFont(valueName, valueFontName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontName", "deleteEmbeddedFont", valueFontName);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontName", "deleteEmbeddedFont");
        }
    }
    /**
     * Removes specified embedded font and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEmbeddedFontInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteEmbeddedFont", "name");
        String valueFontName = (String)getTestValue("String", "deleteEmbeddedFont", "fontName");
        String valuePassword = (String)getTestValue("String", "deleteEmbeddedFont", "password");
        String valueFolder = (String)getTestValue("String", "deleteEmbeddedFont", "folder");
        String valueStorage = (String)getTestValue("String", "deleteEmbeddedFont", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteEmbeddedFont", "password");
            initialize("deleteEmbeddedFont", "password", "String", valuePassword);
            FontsData response = api.deleteEmbeddedFont(valueName, valueFontName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteEmbeddedFont", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteEmbeddedFont");
        }
    }
    /**
     * Removes specified embedded font and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEmbeddedFontInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteEmbeddedFont", "name");
        String valueFontName = (String)getTestValue("String", "deleteEmbeddedFont", "fontName");
        String valuePassword = (String)getTestValue("String", "deleteEmbeddedFont", "password");
        String valueFolder = (String)getTestValue("String", "deleteEmbeddedFont", "folder");
        String valueStorage = (String)getTestValue("String", "deleteEmbeddedFont", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteEmbeddedFont", "folder");
            initialize("deleteEmbeddedFont", "folder", "String", valueFolder);
            FontsData response = api.deleteEmbeddedFont(valueName, valueFontName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteEmbeddedFont", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteEmbeddedFont");
        }
    }
    /**
     * Removes specified embedded font and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEmbeddedFontInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteEmbeddedFont", "name");
        String valueFontName = (String)getTestValue("String", "deleteEmbeddedFont", "fontName");
        String valuePassword = (String)getTestValue("String", "deleteEmbeddedFont", "password");
        String valueFolder = (String)getTestValue("String", "deleteEmbeddedFont", "folder");
        String valueStorage = (String)getTestValue("String", "deleteEmbeddedFont", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteEmbeddedFont", "storage");
            initialize("deleteEmbeddedFont", "storage", "String", valueStorage);
            FontsData response = api.deleteEmbeddedFont(valueName, valueFontName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteEmbeddedFont", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteEmbeddedFont");
        }
    }
    
    /**
     * Removes specified embedded font and returns presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEmbeddedFontOnlineTest() throws ApiException, Exception {
        initialize("deleteEmbeddedFontOnline", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteEmbeddedFontOnline", "document");
        String valueFontName = (String)getTestValue("String", "deleteEmbeddedFontOnline", "fontName");
        String valuePassword = (String)getTestValue("String", "deleteEmbeddedFontOnline", "password");
        response = api.deleteEmbeddedFontOnline(valueDocument, valueFontName, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Removes specified embedded font and returns presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEmbeddedFontOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteEmbeddedFontOnline", "document");
        String valueFontName = (String)getTestValue("String", "deleteEmbeddedFontOnline", "fontName");
        String valuePassword = (String)getTestValue("String", "deleteEmbeddedFontOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "deleteEmbeddedFontOnline", "document");
            initialize("deleteEmbeddedFontOnline", "document", "byte[]", valueDocument);
            File response = api.deleteEmbeddedFontOnline(valueDocument, valueFontName, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "deleteEmbeddedFontOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "deleteEmbeddedFontOnline");
        }
    }
    /**
     * Removes specified embedded font and returns presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEmbeddedFontOnlineInvalidFontNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteEmbeddedFontOnline", "document");
        String valueFontName = (String)getTestValue("String", "deleteEmbeddedFontOnline", "fontName");
        String valuePassword = (String)getTestValue("String", "deleteEmbeddedFontOnline", "password");
        try {
            valueFontName = (String)invalidizeTestValue("String", valueFontName, "deleteEmbeddedFontOnline", "fontName");
            initialize("deleteEmbeddedFontOnline", "fontName", "String", valueFontName);
            File response = api.deleteEmbeddedFontOnline(valueDocument, valueFontName, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontName", "deleteEmbeddedFontOnline", valueFontName);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontName", "deleteEmbeddedFontOnline");
        }
    }
    /**
     * Removes specified embedded font and returns presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEmbeddedFontOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteEmbeddedFontOnline", "document");
        String valueFontName = (String)getTestValue("String", "deleteEmbeddedFontOnline", "fontName");
        String valuePassword = (String)getTestValue("String", "deleteEmbeddedFontOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteEmbeddedFontOnline", "password");
            initialize("deleteEmbeddedFontOnline", "password", "String", valuePassword);
            File response = api.deleteEmbeddedFontOnline(valueDocument, valueFontName, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteEmbeddedFontOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteEmbeddedFontOnline");
        }
    }
    
    /**
     * Delete file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFileTest() throws ApiException, Exception {
        initialize("deleteFile", null, null, null);
        ;
        String valuePath = (String)getTestValue("String", "deleteFile", "path");
        String valueStorageName = (String)getTestValue("String", "deleteFile", "storageName");
        String valueVersionId = (String)getTestValue("String", "deleteFile", "versionId");
        api.deleteFile(valuePath, valueStorageName, valueVersionId);
    }

    /**
     * Delete file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFileInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "deleteFile", "path");
        String valueStorageName = (String)getTestValue("String", "deleteFile", "storageName");
        String valueVersionId = (String)getTestValue("String", "deleteFile", "versionId");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "deleteFile", "path");
            initialize("deleteFile", "path", "String", valuePath);
            api.deleteFile(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "path", "deleteFile", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("String", "path", "deleteFile");
        }
    }
    /**
     * Delete file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFileInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "deleteFile", "path");
        String valueStorageName = (String)getTestValue("String", "deleteFile", "storageName");
        String valueVersionId = (String)getTestValue("String", "deleteFile", "versionId");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "deleteFile", "storageName");
            initialize("deleteFile", "storageName", "String", valueStorageName);
            api.deleteFile(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storageName", "deleteFile", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("String", "storageName", "deleteFile");
        }
    }
    /**
     * Delete file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFileInvalidVersionIdTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "deleteFile", "path");
        String valueStorageName = (String)getTestValue("String", "deleteFile", "storageName");
        String valueVersionId = (String)getTestValue("String", "deleteFile", "versionId");
        try {
            valueVersionId = (String)invalidizeTestValue("String", valueVersionId, "deleteFile", "versionId");
            initialize("deleteFile", "versionId", "String", valueVersionId);
            api.deleteFile(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "versionId", "deleteFile", valueVersionId);
        }
        if (needAssertResponse) {
            assertResponse("String", "versionId", "deleteFile");
        }
    }
    
    /**
     * Delete folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFolderTest() throws ApiException, Exception {
        initialize("deleteFolder", null, null, null);
        ;
        String valuePath = (String)getTestValue("String", "deleteFolder", "path");
        String valueStorageName = (String)getTestValue("String", "deleteFolder", "storageName");
        Boolean valueRecursive = (Boolean)getTestValue("Boolean", "deleteFolder", "recursive");
        api.deleteFolder(valuePath, valueStorageName, valueRecursive);
    }

    /**
     * Delete folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFolderInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "deleteFolder", "path");
        String valueStorageName = (String)getTestValue("String", "deleteFolder", "storageName");
        Boolean valueRecursive = (Boolean)getTestValue("Boolean", "deleteFolder", "recursive");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "deleteFolder", "path");
            initialize("deleteFolder", "path", "String", valuePath);
            api.deleteFolder(valuePath, valueStorageName, valueRecursive);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "path", "deleteFolder", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("String", "path", "deleteFolder");
        }
    }
    /**
     * Delete folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFolderInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "deleteFolder", "path");
        String valueStorageName = (String)getTestValue("String", "deleteFolder", "storageName");
        Boolean valueRecursive = (Boolean)getTestValue("Boolean", "deleteFolder", "recursive");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "deleteFolder", "storageName");
            initialize("deleteFolder", "storageName", "String", valueStorageName);
            api.deleteFolder(valuePath, valueStorageName, valueRecursive);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storageName", "deleteFolder", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("String", "storageName", "deleteFolder");
        }
    }
    /**
     * Delete folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFolderInvalidRecursiveTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "deleteFolder", "path");
        String valueStorageName = (String)getTestValue("String", "deleteFolder", "storageName");
        Boolean valueRecursive = (Boolean)getTestValue("Boolean", "deleteFolder", "recursive");
        try {
            valueRecursive = (Boolean)invalidizeTestValue("Boolean", valueRecursive, "deleteFolder", "recursive");
            initialize("deleteFolder", "recursive", "Boolean", valueRecursive);
            api.deleteFolder(valuePath, valueStorageName, valueRecursive);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "recursive", "deleteFolder", valueRecursive);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "recursive", "deleteFolder");
        }
    }
    
    /**
     * Remove notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideTest() throws ApiException, Exception {
        initialize("deleteNotesSlide", null, null, null);
        Slide response = null;
        String valueName = (String)getTestValue("String", "deleteNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlide", "storage");
        response = api.deleteNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteNotesSlide", "name");
            initialize("deleteNotesSlide", "name", "String", valueName);
            Slide response = api.deleteNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteNotesSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteNotesSlide");
        }
    }
    /**
     * Remove notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteNotesSlide", "slideIndex");
            initialize("deleteNotesSlide", "slideIndex", "Integer", valueSlideIndex);
            Slide response = api.deleteNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteNotesSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteNotesSlide");
        }
    }
    /**
     * Remove notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteNotesSlide", "password");
            initialize("deleteNotesSlide", "password", "String", valuePassword);
            Slide response = api.deleteNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteNotesSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteNotesSlide");
        }
    }
    /**
     * Remove notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteNotesSlide", "folder");
            initialize("deleteNotesSlide", "folder", "String", valueFolder);
            Slide response = api.deleteNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteNotesSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteNotesSlide");
        }
    }
    /**
     * Remove notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteNotesSlide", "storage");
            initialize("deleteNotesSlide", "storage", "String", valueStorage);
            Slide response = api.deleteNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteNotesSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteNotesSlide");
        }
    }
    
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphTest() throws ApiException, Exception {
        initialize("deleteParagraph", null, null, null);
        Paragraphs response = null;
        String valueName = (String)getTestValue("String", "deleteParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteParagraph", "subShape");
        response = api.deleteParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteParagraph", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteParagraph", "name");
            initialize("deleteParagraph", "name", "String", valueName);
            Paragraphs response = api.deleteParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteParagraph", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteParagraph", "slideIndex");
            initialize("deleteParagraph", "slideIndex", "Integer", valueSlideIndex);
            Paragraphs response = api.deleteParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteParagraph", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteParagraph", "shapeIndex");
            initialize("deleteParagraph", "shapeIndex", "Integer", valueShapeIndex);
            Paragraphs response = api.deleteParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "deleteParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "deleteParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteParagraph", "subShape");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "deleteParagraph", "paragraphIndex");
            initialize("deleteParagraph", "paragraphIndex", "Integer", valueParagraphIndex);
            Paragraphs response = api.deleteParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "deleteParagraph", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "deleteParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteParagraph", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteParagraph", "password");
            initialize("deleteParagraph", "password", "String", valuePassword);
            Paragraphs response = api.deleteParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteParagraph", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteParagraph", "folder");
            initialize("deleteParagraph", "folder", "String", valueFolder);
            Paragraphs response = api.deleteParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteParagraph", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteParagraph", "storage");
            initialize("deleteParagraph", "storage", "String", valueStorage);
            Paragraphs response = api.deleteParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteParagraph", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "deleteParagraph", "subShape");
            initialize("deleteParagraph", "subShape", "String", valueSubShape);
            Paragraphs response = api.deleteParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "deleteParagraph", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "deleteParagraph");
        }
    }
    
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphsTest() throws ApiException, Exception {
        initialize("deleteParagraphs", null, null, null);
        Paragraphs response = null;
        String valueName = (String)getTestValue("String", "deleteParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteParagraphs", "subShape");
        response = api.deleteParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteParagraphs", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteParagraphs", "name");
            initialize("deleteParagraphs", "name", "String", valueName);
            Paragraphs response = api.deleteParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteParagraphs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteParagraphs", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteParagraphs", "slideIndex");
            initialize("deleteParagraphs", "slideIndex", "Integer", valueSlideIndex);
            Paragraphs response = api.deleteParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteParagraphs", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteParagraphs", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteParagraphs", "shapeIndex");
            initialize("deleteParagraphs", "shapeIndex", "Integer", valueShapeIndex);
            Paragraphs response = api.deleteParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "deleteParagraphs", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "deleteParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphsInvalidParagraphsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteParagraphs", "subShape");
        try {
            valueParagraphs = (List<Integer>)invalidizeTestValue("List<Integer>", valueParagraphs, "deleteParagraphs", "paragraphs");
            initialize("deleteParagraphs", "paragraphs", "List<Integer>", valueParagraphs);
            Paragraphs response = api.deleteParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "List<Integer>", "paragraphs", "deleteParagraphs", valueParagraphs);
        }
        if (needAssertResponse) {
            assertResponse("List<Integer>", "paragraphs", "deleteParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteParagraphs", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteParagraphs", "password");
            initialize("deleteParagraphs", "password", "String", valuePassword);
            Paragraphs response = api.deleteParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteParagraphs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteParagraphs", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteParagraphs", "folder");
            initialize("deleteParagraphs", "folder", "String", valueFolder);
            Paragraphs response = api.deleteParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteParagraphs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteParagraphs", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteParagraphs", "storage");
            initialize("deleteParagraphs", "storage", "String", valueStorage);
            Paragraphs response = api.deleteParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteParagraphs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphsInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteParagraphs", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "deleteParagraphs", "subShape");
            initialize("deleteParagraphs", "subShape", "String", valueSubShape);
            Paragraphs response = api.deleteParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "deleteParagraphs", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "deleteParagraphs");
        }
    }
    
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionTest() throws ApiException, Exception {
        initialize("deletePortion", null, null, null);
        Portions response = null;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "deletePortion", "subShape");
        response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "deletePortion", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deletePortion", "name");
            initialize("deletePortion", "name", "String", valueName);
            Portions response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deletePortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deletePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "deletePortion", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deletePortion", "slideIndex");
            initialize("deletePortion", "slideIndex", "Integer", valueSlideIndex);
            Portions response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deletePortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deletePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "deletePortion", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deletePortion", "shapeIndex");
            initialize("deletePortion", "shapeIndex", "Integer", valueShapeIndex);
            Portions response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "deletePortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "deletePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "deletePortion", "subShape");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "deletePortion", "paragraphIndex");
            initialize("deletePortion", "paragraphIndex", "Integer", valueParagraphIndex);
            Portions response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "deletePortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "deletePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "deletePortion", "subShape");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "deletePortion", "portionIndex");
            initialize("deletePortion", "portionIndex", "Integer", valuePortionIndex);
            Portions response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "portionIndex", "deletePortion", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "portionIndex", "deletePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "deletePortion", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deletePortion", "password");
            initialize("deletePortion", "password", "String", valuePassword);
            Portions response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deletePortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deletePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "deletePortion", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deletePortion", "folder");
            initialize("deletePortion", "folder", "String", valueFolder);
            Portions response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deletePortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deletePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "deletePortion", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deletePortion", "storage");
            initialize("deletePortion", "storage", "String", valueStorage);
            Portions response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deletePortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deletePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "deletePortion", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "deletePortion", "subShape");
            initialize("deletePortion", "subShape", "String", valueSubShape);
            Portions response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "deletePortion", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "deletePortion");
        }
    }
    
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsTest() throws ApiException, Exception {
        initialize("deletePortions", null, null, null);
        Portions response = null;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "deletePortions", "subShape");
        response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "deletePortions", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deletePortions", "name");
            initialize("deletePortions", "name", "String", valueName);
            Portions response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deletePortions", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deletePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "deletePortions", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deletePortions", "slideIndex");
            initialize("deletePortions", "slideIndex", "Integer", valueSlideIndex);
            Portions response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deletePortions", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deletePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "deletePortions", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deletePortions", "shapeIndex");
            initialize("deletePortions", "shapeIndex", "Integer", valueShapeIndex);
            Portions response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "deletePortions", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "deletePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "deletePortions", "subShape");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "deletePortions", "paragraphIndex");
            initialize("deletePortions", "paragraphIndex", "Integer", valueParagraphIndex);
            Portions response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "deletePortions", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "deletePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsInvalidPortionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "deletePortions", "subShape");
        try {
            valuePortions = (List<Integer>)invalidizeTestValue("List<Integer>", valuePortions, "deletePortions", "portions");
            initialize("deletePortions", "portions", "List<Integer>", valuePortions);
            Portions response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "List<Integer>", "portions", "deletePortions", valuePortions);
        }
        if (needAssertResponse) {
            assertResponse("List<Integer>", "portions", "deletePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "deletePortions", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deletePortions", "password");
            initialize("deletePortions", "password", "String", valuePassword);
            Portions response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deletePortions", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deletePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "deletePortions", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deletePortions", "folder");
            initialize("deletePortions", "folder", "String", valueFolder);
            Portions response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deletePortions", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deletePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "deletePortions", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deletePortions", "storage");
            initialize("deletePortions", "storage", "String", valueStorage);
            Portions response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deletePortions", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deletePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "deletePortions", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "deletePortions", "subShape");
            initialize("deletePortions", "subShape", "String", valueSubShape);
            Portions response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "deletePortions", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "deletePortions");
        }
    }
    
    /**
     * Resets all presentation protection settings. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProtectionTest() throws ApiException, Exception {
        initialize("deleteProtection", null, null, null);
        ProtectionProperties response = null;
        String valueName = (String)getTestValue("String", "deleteProtection", "name");
        String valuePassword = (String)getTestValue("String", "deleteProtection", "password");
        String valueFolder = (String)getTestValue("String", "deleteProtection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteProtection", "storage");
        response = api.deleteProtection(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Resets all presentation protection settings. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProtectionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteProtection", "name");
        String valuePassword = (String)getTestValue("String", "deleteProtection", "password");
        String valueFolder = (String)getTestValue("String", "deleteProtection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteProtection", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteProtection", "name");
            initialize("deleteProtection", "name", "String", valueName);
            ProtectionProperties response = api.deleteProtection(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteProtection", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteProtection");
        }
    }
    /**
     * Resets all presentation protection settings. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProtectionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteProtection", "name");
        String valuePassword = (String)getTestValue("String", "deleteProtection", "password");
        String valueFolder = (String)getTestValue("String", "deleteProtection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteProtection", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteProtection", "password");
            initialize("deleteProtection", "password", "String", valuePassword);
            ProtectionProperties response = api.deleteProtection(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteProtection", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteProtection");
        }
    }
    /**
     * Resets all presentation protection settings. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProtectionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteProtection", "name");
        String valuePassword = (String)getTestValue("String", "deleteProtection", "password");
        String valueFolder = (String)getTestValue("String", "deleteProtection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteProtection", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteProtection", "folder");
            initialize("deleteProtection", "folder", "String", valueFolder);
            ProtectionProperties response = api.deleteProtection(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteProtection", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteProtection");
        }
    }
    /**
     * Resets all presentation protection settings. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProtectionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteProtection", "name");
        String valuePassword = (String)getTestValue("String", "deleteProtection", "password");
        String valueFolder = (String)getTestValue("String", "deleteProtection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteProtection", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteProtection", "storage");
            initialize("deleteProtection", "storage", "String", valueStorage);
            ProtectionProperties response = api.deleteProtection(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteProtection", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteProtection");
        }
    }
    
    /**
     * Resets all presentation protection settings. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProtectionOnlineTest() throws ApiException, Exception {
        initialize("deleteProtectionOnline", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteProtectionOnline", "document");
        String valuePassword = (String)getTestValue("String", "deleteProtectionOnline", "password");
        response = api.deleteProtectionOnline(valueDocument, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Resets all presentation protection settings. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProtectionOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteProtectionOnline", "document");
        String valuePassword = (String)getTestValue("String", "deleteProtectionOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "deleteProtectionOnline", "document");
            initialize("deleteProtectionOnline", "document", "byte[]", valueDocument);
            File response = api.deleteProtectionOnline(valueDocument, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "deleteProtectionOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "deleteProtectionOnline");
        }
    }
    /**
     * Resets all presentation protection settings. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProtectionOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteProtectionOnline", "document");
        String valuePassword = (String)getTestValue("String", "deleteProtectionOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteProtectionOnline", "password");
            initialize("deleteProtectionOnline", "password", "String", valuePassword);
            File response = api.deleteProtectionOnline(valueDocument, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteProtectionOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteProtectionOnline");
        }
    }
    
    /**
     * Delete a presentation section.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionTest() throws ApiException, Exception {
        initialize("deleteSection", null, null, null);
        Sections response = null;
        String valueName = (String)getTestValue("String", "deleteSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "deleteSection", "sectionIndex");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSection", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSection", "password");
        String valueFolder = (String)getTestValue("String", "deleteSection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSection", "storage");
        response = api.deleteSection(valueName, valueSectionIndex, valueWithSlides, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Delete a presentation section.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "deleteSection", "sectionIndex");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSection", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSection", "password");
        String valueFolder = (String)getTestValue("String", "deleteSection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSection", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSection", "name");
            initialize("deleteSection", "name", "String", valueName);
            Sections response = api.deleteSection(valueName, valueSectionIndex, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteSection", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteSection");
        }
    }
    /**
     * Delete a presentation section.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionInvalidSectionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "deleteSection", "sectionIndex");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSection", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSection", "password");
        String valueFolder = (String)getTestValue("String", "deleteSection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSection", "storage");
        try {
            valueSectionIndex = (Integer)invalidizeTestValue("Integer", valueSectionIndex, "deleteSection", "sectionIndex");
            initialize("deleteSection", "sectionIndex", "Integer", valueSectionIndex);
            Sections response = api.deleteSection(valueName, valueSectionIndex, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "sectionIndex", "deleteSection", valueSectionIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "sectionIndex", "deleteSection");
        }
    }
    /**
     * Delete a presentation section.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionInvalidWithSlidesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "deleteSection", "sectionIndex");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSection", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSection", "password");
        String valueFolder = (String)getTestValue("String", "deleteSection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSection", "storage");
        try {
            valueWithSlides = (Boolean)invalidizeTestValue("Boolean", valueWithSlides, "deleteSection", "withSlides");
            initialize("deleteSection", "withSlides", "Boolean", valueWithSlides);
            Sections response = api.deleteSection(valueName, valueSectionIndex, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "withSlides", "deleteSection", valueWithSlides);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "withSlides", "deleteSection");
        }
    }
    /**
     * Delete a presentation section.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "deleteSection", "sectionIndex");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSection", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSection", "password");
        String valueFolder = (String)getTestValue("String", "deleteSection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSection", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSection", "password");
            initialize("deleteSection", "password", "String", valuePassword);
            Sections response = api.deleteSection(valueName, valueSectionIndex, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteSection", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteSection");
        }
    }
    /**
     * Delete a presentation section.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "deleteSection", "sectionIndex");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSection", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSection", "password");
        String valueFolder = (String)getTestValue("String", "deleteSection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSection", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSection", "folder");
            initialize("deleteSection", "folder", "String", valueFolder);
            Sections response = api.deleteSection(valueName, valueSectionIndex, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteSection", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteSection");
        }
    }
    /**
     * Delete a presentation section.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "deleteSection", "sectionIndex");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSection", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSection", "password");
        String valueFolder = (String)getTestValue("String", "deleteSection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSection", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSection", "storage");
            initialize("deleteSection", "storage", "String", valueStorage);
            Sections response = api.deleteSection(valueName, valueSectionIndex, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteSection", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteSection");
        }
    }
    
    /**
     * Delete presentation sections.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionsTest() throws ApiException, Exception {
        initialize("deleteSections", null, null, null);
        Sections response = null;
        String valueName = (String)getTestValue("String", "deleteSections", "name");
        List<Integer> valueSections = (List<Integer>)getTestValue("List<Integer>", "deleteSections", "sections");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSections", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSections", "password");
        String valueFolder = (String)getTestValue("String", "deleteSections", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSections", "storage");
        response = api.deleteSections(valueName, valueSections, valueWithSlides, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Delete presentation sections.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSections", "name");
        List<Integer> valueSections = (List<Integer>)getTestValue("List<Integer>", "deleteSections", "sections");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSections", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSections", "password");
        String valueFolder = (String)getTestValue("String", "deleteSections", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSections", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSections", "name");
            initialize("deleteSections", "name", "String", valueName);
            Sections response = api.deleteSections(valueName, valueSections, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteSections", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteSections");
        }
    }
    /**
     * Delete presentation sections.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionsInvalidSectionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSections", "name");
        List<Integer> valueSections = (List<Integer>)getTestValue("List<Integer>", "deleteSections", "sections");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSections", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSections", "password");
        String valueFolder = (String)getTestValue("String", "deleteSections", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSections", "storage");
        try {
            valueSections = (List<Integer>)invalidizeTestValue("List<Integer>", valueSections, "deleteSections", "sections");
            initialize("deleteSections", "sections", "List<Integer>", valueSections);
            Sections response = api.deleteSections(valueName, valueSections, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "List<Integer>", "sections", "deleteSections", valueSections);
        }
        if (needAssertResponse) {
            assertResponse("List<Integer>", "sections", "deleteSections");
        }
    }
    /**
     * Delete presentation sections.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionsInvalidWithSlidesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSections", "name");
        List<Integer> valueSections = (List<Integer>)getTestValue("List<Integer>", "deleteSections", "sections");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSections", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSections", "password");
        String valueFolder = (String)getTestValue("String", "deleteSections", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSections", "storage");
        try {
            valueWithSlides = (Boolean)invalidizeTestValue("Boolean", valueWithSlides, "deleteSections", "withSlides");
            initialize("deleteSections", "withSlides", "Boolean", valueWithSlides);
            Sections response = api.deleteSections(valueName, valueSections, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "withSlides", "deleteSections", valueWithSlides);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "withSlides", "deleteSections");
        }
    }
    /**
     * Delete presentation sections.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSections", "name");
        List<Integer> valueSections = (List<Integer>)getTestValue("List<Integer>", "deleteSections", "sections");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSections", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSections", "password");
        String valueFolder = (String)getTestValue("String", "deleteSections", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSections", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSections", "password");
            initialize("deleteSections", "password", "String", valuePassword);
            Sections response = api.deleteSections(valueName, valueSections, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteSections", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteSections");
        }
    }
    /**
     * Delete presentation sections.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSections", "name");
        List<Integer> valueSections = (List<Integer>)getTestValue("List<Integer>", "deleteSections", "sections");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSections", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSections", "password");
        String valueFolder = (String)getTestValue("String", "deleteSections", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSections", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSections", "folder");
            initialize("deleteSections", "folder", "String", valueFolder);
            Sections response = api.deleteSections(valueName, valueSections, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteSections", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteSections");
        }
    }
    /**
     * Delete presentation sections.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSections", "name");
        List<Integer> valueSections = (List<Integer>)getTestValue("List<Integer>", "deleteSections", "sections");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSections", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSections", "password");
        String valueFolder = (String)getTestValue("String", "deleteSections", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSections", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSections", "storage");
            initialize("deleteSections", "storage", "String", valueStorage);
            Sections response = api.deleteSections(valueName, valueSections, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteSections", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteSections");
        }
    }
    
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapeTest() throws ApiException, Exception {
        initialize("deleteShape", null, null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "deleteShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShape", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteShape", "subShape");
        response = api.deleteShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShape", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteShape", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteShape", "name");
            initialize("deleteShape", "name", "String", valueName);
            Shapes response = api.deleteShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShape", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteShape", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteShape", "slideIndex");
            initialize("deleteShape", "slideIndex", "Integer", valueSlideIndex);
            Shapes response = api.deleteShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShape", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteShape", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteShape", "shapeIndex");
            initialize("deleteShape", "shapeIndex", "Integer", valueShapeIndex);
            Shapes response = api.deleteShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "deleteShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "deleteShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShape", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteShape", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteShape", "password");
            initialize("deleteShape", "password", "String", valuePassword);
            Shapes response = api.deleteShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShape", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteShape", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteShape", "folder");
            initialize("deleteShape", "folder", "String", valueFolder);
            Shapes response = api.deleteShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShape", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteShape", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteShape", "storage");
            initialize("deleteShape", "storage", "String", valueStorage);
            Shapes response = api.deleteShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapeInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShape", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteShape", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "deleteShape", "subShape");
            initialize("deleteShape", "subShape", "String", valueSubShape);
            Shapes response = api.deleteShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "deleteShape", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "deleteShape");
        }
    }
    
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapesTest() throws ApiException, Exception {
        initialize("deleteShapes", null, null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "deleteShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteShapes", "subShape");
        response = api.deleteShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteShapes", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteShapes", "name");
            initialize("deleteShapes", "name", "String", valueName);
            Shapes response = api.deleteShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteShapes", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteShapes", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteShapes", "slideIndex");
            initialize("deleteShapes", "slideIndex", "Integer", valueSlideIndex);
            Shapes response = api.deleteShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteShapes", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapesInvalidShapesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteShapes", "subShape");
        try {
            valueShapes = (List<Integer>)invalidizeTestValue("List<Integer>", valueShapes, "deleteShapes", "shapes");
            initialize("deleteShapes", "shapes", "List<Integer>", valueShapes);
            Shapes response = api.deleteShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "List<Integer>", "shapes", "deleteShapes", valueShapes);
        }
        if (needAssertResponse) {
            assertResponse("List<Integer>", "shapes", "deleteShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteShapes", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteShapes", "password");
            initialize("deleteShapes", "password", "String", valuePassword);
            Shapes response = api.deleteShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteShapes", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteShapes", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteShapes", "folder");
            initialize("deleteShapes", "folder", "String", valueFolder);
            Shapes response = api.deleteShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteShapes", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteShapes", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteShapes", "storage");
            initialize("deleteShapes", "storage", "String", valueStorage);
            Shapes response = api.deleteShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteShapes", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapesInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteShapes", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "deleteShapes", "subShape");
            initialize("deleteShapes", "subShape", "String", valueSubShape);
            Shapes response = api.deleteShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "deleteShapes", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "deleteShapes");
        }
    }
    
    /**
     * Delete a presentation slide by index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideTest() throws ApiException, Exception {
        initialize("deleteSlide", null, null, null);
        Slides response = null;
        String valueName = (String)getTestValue("String", "deleteSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlide", "storage");
        response = api.deleteSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Delete a presentation slide by index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSlide", "name");
            initialize("deleteSlide", "name", "String", valueName);
            Slides response = api.deleteSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteSlide");
        }
    }
    /**
     * Delete a presentation slide by index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSlide", "slideIndex");
            initialize("deleteSlide", "slideIndex", "Integer", valueSlideIndex);
            Slides response = api.deleteSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteSlide");
        }
    }
    /**
     * Delete a presentation slide by index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSlide", "password");
            initialize("deleteSlide", "password", "String", valuePassword);
            Slides response = api.deleteSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteSlide");
        }
    }
    /**
     * Delete a presentation slide by index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSlide", "folder");
            initialize("deleteSlide", "folder", "String", valueFolder);
            Slides response = api.deleteSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteSlide");
        }
    }
    /**
     * Delete a presentation slide by index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSlide", "storage");
            initialize("deleteSlide", "storage", "String", valueStorage);
            Slides response = api.deleteSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteSlide");
        }
    }
    
    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideCommentsTest() throws ApiException, Exception {
        initialize("deleteSlideComments", null, null, null);
        SlideComments response = null;
        String valueName = (String)getTestValue("String", "deleteSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideComments", "slideIndex");
        String valueAuthor = (String)getTestValue("String", "deleteSlideComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideComments", "storage");
        response = api.deleteSlideComments(valueName, valueSlideIndex, valueAuthor, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideCommentsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideComments", "slideIndex");
        String valueAuthor = (String)getTestValue("String", "deleteSlideComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideComments", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSlideComments", "name");
            initialize("deleteSlideComments", "name", "String", valueName);
            SlideComments response = api.deleteSlideComments(valueName, valueSlideIndex, valueAuthor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteSlideComments", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteSlideComments");
        }
    }
    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideCommentsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideComments", "slideIndex");
        String valueAuthor = (String)getTestValue("String", "deleteSlideComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideComments", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSlideComments", "slideIndex");
            initialize("deleteSlideComments", "slideIndex", "Integer", valueSlideIndex);
            SlideComments response = api.deleteSlideComments(valueName, valueSlideIndex, valueAuthor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteSlideComments", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteSlideComments");
        }
    }
    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideCommentsInvalidAuthorTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideComments", "slideIndex");
        String valueAuthor = (String)getTestValue("String", "deleteSlideComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideComments", "storage");
        try {
            valueAuthor = (String)invalidizeTestValue("String", valueAuthor, "deleteSlideComments", "author");
            initialize("deleteSlideComments", "author", "String", valueAuthor);
            SlideComments response = api.deleteSlideComments(valueName, valueSlideIndex, valueAuthor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "author", "deleteSlideComments", valueAuthor);
        }
        if (needAssertResponse) {
            assertResponse("String", "author", "deleteSlideComments");
        }
    }
    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideCommentsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideComments", "slideIndex");
        String valueAuthor = (String)getTestValue("String", "deleteSlideComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideComments", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSlideComments", "password");
            initialize("deleteSlideComments", "password", "String", valuePassword);
            SlideComments response = api.deleteSlideComments(valueName, valueSlideIndex, valueAuthor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteSlideComments", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteSlideComments");
        }
    }
    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideCommentsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideComments", "slideIndex");
        String valueAuthor = (String)getTestValue("String", "deleteSlideComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideComments", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSlideComments", "folder");
            initialize("deleteSlideComments", "folder", "String", valueFolder);
            SlideComments response = api.deleteSlideComments(valueName, valueSlideIndex, valueAuthor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteSlideComments", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteSlideComments");
        }
    }
    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideCommentsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideComments", "slideIndex");
        String valueAuthor = (String)getTestValue("String", "deleteSlideComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideComments", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSlideComments", "storage");
            initialize("deleteSlideComments", "storage", "String", valueStorage);
            SlideComments response = api.deleteSlideComments(valueName, valueSlideIndex, valueAuthor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteSlideComments", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteSlideComments");
        }
    }
    
    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.              
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideCommentsOnlineTest() throws ApiException, Exception {
        initialize("deleteSlideCommentsOnline", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteSlideCommentsOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideCommentsOnline", "slideIndex");
        String valueAuthor = (String)getTestValue("String", "deleteSlideCommentsOnline", "author");
        String valuePassword = (String)getTestValue("String", "deleteSlideCommentsOnline", "password");
        response = api.deleteSlideCommentsOnline(valueDocument, valueSlideIndex, valueAuthor, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.              
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideCommentsOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteSlideCommentsOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideCommentsOnline", "slideIndex");
        String valueAuthor = (String)getTestValue("String", "deleteSlideCommentsOnline", "author");
        String valuePassword = (String)getTestValue("String", "deleteSlideCommentsOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "deleteSlideCommentsOnline", "document");
            initialize("deleteSlideCommentsOnline", "document", "byte[]", valueDocument);
            File response = api.deleteSlideCommentsOnline(valueDocument, valueSlideIndex, valueAuthor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "deleteSlideCommentsOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "deleteSlideCommentsOnline");
        }
    }
    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.              
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideCommentsOnlineInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteSlideCommentsOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideCommentsOnline", "slideIndex");
        String valueAuthor = (String)getTestValue("String", "deleteSlideCommentsOnline", "author");
        String valuePassword = (String)getTestValue("String", "deleteSlideCommentsOnline", "password");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSlideCommentsOnline", "slideIndex");
            initialize("deleteSlideCommentsOnline", "slideIndex", "Integer", valueSlideIndex);
            File response = api.deleteSlideCommentsOnline(valueDocument, valueSlideIndex, valueAuthor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteSlideCommentsOnline", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteSlideCommentsOnline");
        }
    }
    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.              
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideCommentsOnlineInvalidAuthorTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteSlideCommentsOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideCommentsOnline", "slideIndex");
        String valueAuthor = (String)getTestValue("String", "deleteSlideCommentsOnline", "author");
        String valuePassword = (String)getTestValue("String", "deleteSlideCommentsOnline", "password");
        try {
            valueAuthor = (String)invalidizeTestValue("String", valueAuthor, "deleteSlideCommentsOnline", "author");
            initialize("deleteSlideCommentsOnline", "author", "String", valueAuthor);
            File response = api.deleteSlideCommentsOnline(valueDocument, valueSlideIndex, valueAuthor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "author", "deleteSlideCommentsOnline", valueAuthor);
        }
        if (needAssertResponse) {
            assertResponse("String", "author", "deleteSlideCommentsOnline");
        }
    }
    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.              
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideCommentsOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteSlideCommentsOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideCommentsOnline", "slideIndex");
        String valueAuthor = (String)getTestValue("String", "deleteSlideCommentsOnline", "author");
        String valuePassword = (String)getTestValue("String", "deleteSlideCommentsOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSlideCommentsOnline", "password");
            initialize("deleteSlideCommentsOnline", "password", "String", valuePassword);
            File response = api.deleteSlideCommentsOnline(valueDocument, valueSlideIndex, valueAuthor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteSlideCommentsOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteSlideCommentsOnline");
        }
    }
    
    /**
     * Delete presentation slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesTest() throws ApiException, Exception {
        initialize("deleteSlides", null, null, null);
        Slides response = null;
        String valueName = (String)getTestValue("String", "deleteSlides", "name");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "deleteSlides", "slides");
        String valuePassword = (String)getTestValue("String", "deleteSlides", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlides", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlides", "storage");
        response = api.deleteSlides(valueName, valueSlides, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Delete presentation slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlides", "name");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "deleteSlides", "slides");
        String valuePassword = (String)getTestValue("String", "deleteSlides", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlides", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlides", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSlides", "name");
            initialize("deleteSlides", "name", "String", valueName);
            Slides response = api.deleteSlides(valueName, valueSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteSlides", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteSlides");
        }
    }
    /**
     * Delete presentation slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesInvalidSlidesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlides", "name");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "deleteSlides", "slides");
        String valuePassword = (String)getTestValue("String", "deleteSlides", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlides", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlides", "storage");
        try {
            valueSlides = (List<Integer>)invalidizeTestValue("List<Integer>", valueSlides, "deleteSlides", "slides");
            initialize("deleteSlides", "slides", "List<Integer>", valueSlides);
            Slides response = api.deleteSlides(valueName, valueSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "List<Integer>", "slides", "deleteSlides", valueSlides);
        }
        if (needAssertResponse) {
            assertResponse("List<Integer>", "slides", "deleteSlides");
        }
    }
    /**
     * Delete presentation slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlides", "name");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "deleteSlides", "slides");
        String valuePassword = (String)getTestValue("String", "deleteSlides", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlides", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlides", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSlides", "password");
            initialize("deleteSlides", "password", "String", valuePassword);
            Slides response = api.deleteSlides(valueName, valueSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteSlides", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteSlides");
        }
    }
    /**
     * Delete presentation slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlides", "name");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "deleteSlides", "slides");
        String valuePassword = (String)getTestValue("String", "deleteSlides", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlides", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlides", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSlides", "folder");
            initialize("deleteSlides", "folder", "String", valueFolder);
            Slides response = api.deleteSlides(valueName, valueSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteSlides", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteSlides");
        }
    }
    /**
     * Delete presentation slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlides", "name");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "deleteSlides", "slides");
        String valuePassword = (String)getTestValue("String", "deleteSlides", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlides", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlides", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSlides", "storage");
            initialize("deleteSlides", "storage", "String", valueStorage);
            Slides response = api.deleteSlides(valueName, valueSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteSlides", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteSlides");
        }
    }
    
    /**
     * Delete SmartArt node
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSmartArtNodeTest() throws ApiException, Exception {
        initialize("deleteSmartArtNode", null, null, null);
        SmartArt response = null;
        String valueName = (String)getTestValue("String", "deleteSmartArtNode", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "slideIndex");
        Integer valueSmartArtIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "smartArtIndex");
        Integer valueNodeIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "nodeIndex");
        String valueSubNode = (String)getTestValue("String", "deleteSmartArtNode", "subNode");
        String valuePassword = (String)getTestValue("String", "deleteSmartArtNode", "password");
        String valueFolder = (String)getTestValue("String", "deleteSmartArtNode", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSmartArtNode", "storage");
        response = api.deleteSmartArtNode(valueName, valueSlideIndex, valueSmartArtIndex, valueNodeIndex, valueSubNode, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Delete SmartArt node
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSmartArtNodeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSmartArtNode", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "slideIndex");
        Integer valueSmartArtIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "smartArtIndex");
        Integer valueNodeIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "nodeIndex");
        String valueSubNode = (String)getTestValue("String", "deleteSmartArtNode", "subNode");
        String valuePassword = (String)getTestValue("String", "deleteSmartArtNode", "password");
        String valueFolder = (String)getTestValue("String", "deleteSmartArtNode", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSmartArtNode", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSmartArtNode", "name");
            initialize("deleteSmartArtNode", "name", "String", valueName);
            SmartArt response = api.deleteSmartArtNode(valueName, valueSlideIndex, valueSmartArtIndex, valueNodeIndex, valueSubNode, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteSmartArtNode", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteSmartArtNode");
        }
    }
    /**
     * Delete SmartArt node
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSmartArtNodeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSmartArtNode", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "slideIndex");
        Integer valueSmartArtIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "smartArtIndex");
        Integer valueNodeIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "nodeIndex");
        String valueSubNode = (String)getTestValue("String", "deleteSmartArtNode", "subNode");
        String valuePassword = (String)getTestValue("String", "deleteSmartArtNode", "password");
        String valueFolder = (String)getTestValue("String", "deleteSmartArtNode", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSmartArtNode", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSmartArtNode", "slideIndex");
            initialize("deleteSmartArtNode", "slideIndex", "Integer", valueSlideIndex);
            SmartArt response = api.deleteSmartArtNode(valueName, valueSlideIndex, valueSmartArtIndex, valueNodeIndex, valueSubNode, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteSmartArtNode", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteSmartArtNode");
        }
    }
    /**
     * Delete SmartArt node
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSmartArtNodeInvalidSmartArtIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSmartArtNode", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "slideIndex");
        Integer valueSmartArtIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "smartArtIndex");
        Integer valueNodeIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "nodeIndex");
        String valueSubNode = (String)getTestValue("String", "deleteSmartArtNode", "subNode");
        String valuePassword = (String)getTestValue("String", "deleteSmartArtNode", "password");
        String valueFolder = (String)getTestValue("String", "deleteSmartArtNode", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSmartArtNode", "storage");
        try {
            valueSmartArtIndex = (Integer)invalidizeTestValue("Integer", valueSmartArtIndex, "deleteSmartArtNode", "smartArtIndex");
            initialize("deleteSmartArtNode", "smartArtIndex", "Integer", valueSmartArtIndex);
            SmartArt response = api.deleteSmartArtNode(valueName, valueSlideIndex, valueSmartArtIndex, valueNodeIndex, valueSubNode, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "smartArtIndex", "deleteSmartArtNode", valueSmartArtIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "smartArtIndex", "deleteSmartArtNode");
        }
    }
    /**
     * Delete SmartArt node
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSmartArtNodeInvalidNodeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSmartArtNode", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "slideIndex");
        Integer valueSmartArtIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "smartArtIndex");
        Integer valueNodeIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "nodeIndex");
        String valueSubNode = (String)getTestValue("String", "deleteSmartArtNode", "subNode");
        String valuePassword = (String)getTestValue("String", "deleteSmartArtNode", "password");
        String valueFolder = (String)getTestValue("String", "deleteSmartArtNode", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSmartArtNode", "storage");
        try {
            valueNodeIndex = (Integer)invalidizeTestValue("Integer", valueNodeIndex, "deleteSmartArtNode", "nodeIndex");
            initialize("deleteSmartArtNode", "nodeIndex", "Integer", valueNodeIndex);
            SmartArt response = api.deleteSmartArtNode(valueName, valueSlideIndex, valueSmartArtIndex, valueNodeIndex, valueSubNode, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "nodeIndex", "deleteSmartArtNode", valueNodeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "nodeIndex", "deleteSmartArtNode");
        }
    }
    /**
     * Delete SmartArt node
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSmartArtNodeInvalidSubNodeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSmartArtNode", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "slideIndex");
        Integer valueSmartArtIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "smartArtIndex");
        Integer valueNodeIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "nodeIndex");
        String valueSubNode = (String)getTestValue("String", "deleteSmartArtNode", "subNode");
        String valuePassword = (String)getTestValue("String", "deleteSmartArtNode", "password");
        String valueFolder = (String)getTestValue("String", "deleteSmartArtNode", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSmartArtNode", "storage");
        try {
            valueSubNode = (String)invalidizeTestValue("String", valueSubNode, "deleteSmartArtNode", "subNode");
            initialize("deleteSmartArtNode", "subNode", "String", valueSubNode);
            SmartArt response = api.deleteSmartArtNode(valueName, valueSlideIndex, valueSmartArtIndex, valueNodeIndex, valueSubNode, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subNode", "deleteSmartArtNode", valueSubNode);
        }
        if (needAssertResponse) {
            assertResponse("String", "subNode", "deleteSmartArtNode");
        }
    }
    /**
     * Delete SmartArt node
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSmartArtNodeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSmartArtNode", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "slideIndex");
        Integer valueSmartArtIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "smartArtIndex");
        Integer valueNodeIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "nodeIndex");
        String valueSubNode = (String)getTestValue("String", "deleteSmartArtNode", "subNode");
        String valuePassword = (String)getTestValue("String", "deleteSmartArtNode", "password");
        String valueFolder = (String)getTestValue("String", "deleteSmartArtNode", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSmartArtNode", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSmartArtNode", "password");
            initialize("deleteSmartArtNode", "password", "String", valuePassword);
            SmartArt response = api.deleteSmartArtNode(valueName, valueSlideIndex, valueSmartArtIndex, valueNodeIndex, valueSubNode, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteSmartArtNode", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteSmartArtNode");
        }
    }
    /**
     * Delete SmartArt node
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSmartArtNodeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSmartArtNode", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "slideIndex");
        Integer valueSmartArtIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "smartArtIndex");
        Integer valueNodeIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "nodeIndex");
        String valueSubNode = (String)getTestValue("String", "deleteSmartArtNode", "subNode");
        String valuePassword = (String)getTestValue("String", "deleteSmartArtNode", "password");
        String valueFolder = (String)getTestValue("String", "deleteSmartArtNode", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSmartArtNode", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSmartArtNode", "folder");
            initialize("deleteSmartArtNode", "folder", "String", valueFolder);
            SmartArt response = api.deleteSmartArtNode(valueName, valueSlideIndex, valueSmartArtIndex, valueNodeIndex, valueSubNode, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteSmartArtNode", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteSmartArtNode");
        }
    }
    /**
     * Delete SmartArt node
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSmartArtNodeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSmartArtNode", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "slideIndex");
        Integer valueSmartArtIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "smartArtIndex");
        Integer valueNodeIndex = (Integer)getTestValue("Integer", "deleteSmartArtNode", "nodeIndex");
        String valueSubNode = (String)getTestValue("String", "deleteSmartArtNode", "subNode");
        String valuePassword = (String)getTestValue("String", "deleteSmartArtNode", "password");
        String valueFolder = (String)getTestValue("String", "deleteSmartArtNode", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSmartArtNode", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSmartArtNode", "storage");
            initialize("deleteSmartArtNode", "storage", "String", valueStorage);
            SmartArt response = api.deleteSmartArtNode(valueName, valueSlideIndex, valueSmartArtIndex, valueNodeIndex, valueSubNode, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteSmartArtNode", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteSmartArtNode");
        }
    }
    
    /**
     * Remove animation from a special slide (master, layout, notes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationTest() throws ApiException, Exception {
        initialize("deleteSpecialSlideAnimation", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimation", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimation", "slideType");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimation", "storage");
        response = api.deleteSpecialSlideAnimation(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove animation from a special slide (master, layout, notes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimation", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimation", "slideType");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimation", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSpecialSlideAnimation", "name");
            initialize("deleteSpecialSlideAnimation", "name", "String", valueName);
            SlideAnimation response = api.deleteSpecialSlideAnimation(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteSpecialSlideAnimation", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteSpecialSlideAnimation");
        }
    }
    /**
     * Remove animation from a special slide (master, layout, notes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimation", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimation", "slideType");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimation", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSpecialSlideAnimation", "slideIndex");
            initialize("deleteSpecialSlideAnimation", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.deleteSpecialSlideAnimation(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteSpecialSlideAnimation", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteSpecialSlideAnimation");
        }
    }
    /**
     * Remove animation from a special slide (master, layout, notes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimation", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimation", "slideType");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimation", "storage");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "deleteSpecialSlideAnimation", "slideType");
            initialize("deleteSpecialSlideAnimation", "slideType", "SpecialSlideType", valueSlideType);
            SlideAnimation response = api.deleteSpecialSlideAnimation(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "deleteSpecialSlideAnimation", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "deleteSpecialSlideAnimation");
        }
    }
    /**
     * Remove animation from a special slide (master, layout, notes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimation", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimation", "slideType");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimation", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSpecialSlideAnimation", "password");
            initialize("deleteSpecialSlideAnimation", "password", "String", valuePassword);
            SlideAnimation response = api.deleteSpecialSlideAnimation(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteSpecialSlideAnimation", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteSpecialSlideAnimation");
        }
    }
    /**
     * Remove animation from a special slide (master, layout, notes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimation", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimation", "slideType");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimation", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSpecialSlideAnimation", "folder");
            initialize("deleteSpecialSlideAnimation", "folder", "String", valueFolder);
            SlideAnimation response = api.deleteSpecialSlideAnimation(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteSpecialSlideAnimation", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteSpecialSlideAnimation");
        }
    }
    /**
     * Remove animation from a special slide (master, layout, notes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimation", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimation", "slideType");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimation", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSpecialSlideAnimation", "storage");
            initialize("deleteSpecialSlideAnimation", "storage", "String", valueStorage);
            SlideAnimation response = api.deleteSpecialSlideAnimation(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteSpecialSlideAnimation", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteSpecialSlideAnimation");
        }
    }
    
    /**
     * Remove an effect from special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationEffectTest() throws ApiException, Exception {
        initialize("deleteSpecialSlideAnimationEffect", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationEffect", "slideType");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "storage");
        response = api.deleteSpecialSlideAnimationEffect(valueName, valueSlideIndex, valueSlideType, valueEffectIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove an effect from special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationEffectInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationEffect", "slideType");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSpecialSlideAnimationEffect", "name");
            initialize("deleteSpecialSlideAnimationEffect", "name", "String", valueName);
            SlideAnimation response = api.deleteSpecialSlideAnimationEffect(valueName, valueSlideIndex, valueSlideType, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteSpecialSlideAnimationEffect", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteSpecialSlideAnimationEffect");
        }
    }
    /**
     * Remove an effect from special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationEffectInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationEffect", "slideType");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSpecialSlideAnimationEffect", "slideIndex");
            initialize("deleteSpecialSlideAnimationEffect", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.deleteSpecialSlideAnimationEffect(valueName, valueSlideIndex, valueSlideType, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteSpecialSlideAnimationEffect", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteSpecialSlideAnimationEffect");
        }
    }
    /**
     * Remove an effect from special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationEffectInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationEffect", "slideType");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "storage");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "deleteSpecialSlideAnimationEffect", "slideType");
            initialize("deleteSpecialSlideAnimationEffect", "slideType", "SpecialSlideType", valueSlideType);
            SlideAnimation response = api.deleteSpecialSlideAnimationEffect(valueName, valueSlideIndex, valueSlideType, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "deleteSpecialSlideAnimationEffect", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "deleteSpecialSlideAnimationEffect");
        }
    }
    /**
     * Remove an effect from special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationEffectInvalidEffectIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationEffect", "slideType");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "storage");
        try {
            valueEffectIndex = (Integer)invalidizeTestValue("Integer", valueEffectIndex, "deleteSpecialSlideAnimationEffect", "effectIndex");
            initialize("deleteSpecialSlideAnimationEffect", "effectIndex", "Integer", valueEffectIndex);
            SlideAnimation response = api.deleteSpecialSlideAnimationEffect(valueName, valueSlideIndex, valueSlideType, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "effectIndex", "deleteSpecialSlideAnimationEffect", valueEffectIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "effectIndex", "deleteSpecialSlideAnimationEffect");
        }
    }
    /**
     * Remove an effect from special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationEffectInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationEffect", "slideType");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSpecialSlideAnimationEffect", "password");
            initialize("deleteSpecialSlideAnimationEffect", "password", "String", valuePassword);
            SlideAnimation response = api.deleteSpecialSlideAnimationEffect(valueName, valueSlideIndex, valueSlideType, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteSpecialSlideAnimationEffect", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteSpecialSlideAnimationEffect");
        }
    }
    /**
     * Remove an effect from special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationEffectInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationEffect", "slideType");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSpecialSlideAnimationEffect", "folder");
            initialize("deleteSpecialSlideAnimationEffect", "folder", "String", valueFolder);
            SlideAnimation response = api.deleteSpecialSlideAnimationEffect(valueName, valueSlideIndex, valueSlideType, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteSpecialSlideAnimationEffect", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteSpecialSlideAnimationEffect");
        }
    }
    /**
     * Remove an effect from special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationEffectInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationEffect", "slideType");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationEffect", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSpecialSlideAnimationEffect", "storage");
            initialize("deleteSpecialSlideAnimationEffect", "storage", "String", valueStorage);
            SlideAnimation response = api.deleteSpecialSlideAnimationEffect(valueName, valueSlideIndex, valueSlideType, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteSpecialSlideAnimationEffect", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteSpecialSlideAnimationEffect");
        }
    }
    
    /**
     * Remove an interactive sequence from special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInteractiveSequenceTest() throws ApiException, Exception {
        initialize("deleteSpecialSlideAnimationInteractiveSequence", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequence", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationInteractiveSequence", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "storage");
        response = api.deleteSpecialSlideAnimationInteractiveSequence(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove an interactive sequence from special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInteractiveSequenceInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequence", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationInteractiveSequence", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSpecialSlideAnimationInteractiveSequence", "name");
            initialize("deleteSpecialSlideAnimationInteractiveSequence", "name", "String", valueName);
            SlideAnimation response = api.deleteSpecialSlideAnimationInteractiveSequence(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteSpecialSlideAnimationInteractiveSequence", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteSpecialSlideAnimationInteractiveSequence");
        }
    }
    /**
     * Remove an interactive sequence from special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInteractiveSequenceInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequence", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationInteractiveSequence", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSpecialSlideAnimationInteractiveSequence", "slideIndex");
            initialize("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.deleteSpecialSlideAnimationInteractiveSequence(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteSpecialSlideAnimationInteractiveSequence", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteSpecialSlideAnimationInteractiveSequence");
        }
    }
    /**
     * Remove an interactive sequence from special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInteractiveSequenceInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequence", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationInteractiveSequence", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "storage");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "deleteSpecialSlideAnimationInteractiveSequence", "slideType");
            initialize("deleteSpecialSlideAnimationInteractiveSequence", "slideType", "SpecialSlideType", valueSlideType);
            SlideAnimation response = api.deleteSpecialSlideAnimationInteractiveSequence(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "deleteSpecialSlideAnimationInteractiveSequence", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "deleteSpecialSlideAnimationInteractiveSequence");
        }
    }
    /**
     * Remove an interactive sequence from special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInteractiveSequenceInvalidSequenceIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequence", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationInteractiveSequence", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "storage");
        try {
            valueSequenceIndex = (Integer)invalidizeTestValue("Integer", valueSequenceIndex, "deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex");
            initialize("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", "Integer", valueSequenceIndex);
            SlideAnimation response = api.deleteSpecialSlideAnimationInteractiveSequence(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "sequenceIndex", "deleteSpecialSlideAnimationInteractiveSequence", valueSequenceIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "sequenceIndex", "deleteSpecialSlideAnimationInteractiveSequence");
        }
    }
    /**
     * Remove an interactive sequence from special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInteractiveSequenceInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequence", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationInteractiveSequence", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSpecialSlideAnimationInteractiveSequence", "password");
            initialize("deleteSpecialSlideAnimationInteractiveSequence", "password", "String", valuePassword);
            SlideAnimation response = api.deleteSpecialSlideAnimationInteractiveSequence(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteSpecialSlideAnimationInteractiveSequence", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteSpecialSlideAnimationInteractiveSequence");
        }
    }
    /**
     * Remove an interactive sequence from special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInteractiveSequenceInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequence", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationInteractiveSequence", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSpecialSlideAnimationInteractiveSequence", "folder");
            initialize("deleteSpecialSlideAnimationInteractiveSequence", "folder", "String", valueFolder);
            SlideAnimation response = api.deleteSpecialSlideAnimationInteractiveSequence(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteSpecialSlideAnimationInteractiveSequence", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteSpecialSlideAnimationInteractiveSequence");
        }
    }
    /**
     * Remove an interactive sequence from special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInteractiveSequenceInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequence", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationInteractiveSequence", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequence", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSpecialSlideAnimationInteractiveSequence", "storage");
            initialize("deleteSpecialSlideAnimationInteractiveSequence", "storage", "String", valueStorage);
            SlideAnimation response = api.deleteSpecialSlideAnimationInteractiveSequence(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteSpecialSlideAnimationInteractiveSequence", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteSpecialSlideAnimationInteractiveSequence");
        }
    }
    
    /**
     * Remove an effect from special slide (master, layout, notes) animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInteractiveSequenceEffectTest() throws ApiException, Exception {
        initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        response = api.deleteSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove an effect from special slide (master, layout, notes) animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInteractiveSequenceEffectInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSpecialSlideAnimationInteractiveSequenceEffect", "name");
            initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", "String", valueName);
            SlideAnimation response = api.deleteSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteSpecialSlideAnimationInteractiveSequenceEffect", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteSpecialSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Remove an effect from special slide (master, layout, notes) animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
            initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.deleteSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteSpecialSlideAnimationInteractiveSequenceEffect", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteSpecialSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Remove an effect from special slide (master, layout, notes) animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
            initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "SpecialSlideType", valueSlideType);
            SlideAnimation response = api.deleteSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "deleteSpecialSlideAnimationInteractiveSequenceEffect", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "deleteSpecialSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Remove an effect from special slide (master, layout, notes) animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInteractiveSequenceEffectInvalidSequenceIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSequenceIndex = (Integer)invalidizeTestValue("Integer", valueSequenceIndex, "deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
            initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "Integer", valueSequenceIndex);
            SlideAnimation response = api.deleteSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "sequenceIndex", "deleteSpecialSlideAnimationInteractiveSequenceEffect", valueSequenceIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "sequenceIndex", "deleteSpecialSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Remove an effect from special slide (master, layout, notes) animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInteractiveSequenceEffectInvalidEffectIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueEffectIndex = (Integer)invalidizeTestValue("Integer", valueEffectIndex, "deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex");
            initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "Integer", valueEffectIndex);
            SlideAnimation response = api.deleteSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "effectIndex", "deleteSpecialSlideAnimationInteractiveSequenceEffect", valueEffectIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "effectIndex", "deleteSpecialSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Remove an effect from special slide (master, layout, notes) animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInteractiveSequenceEffectInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSpecialSlideAnimationInteractiveSequenceEffect", "password");
            initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", "String", valuePassword);
            SlideAnimation response = api.deleteSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteSpecialSlideAnimationInteractiveSequenceEffect", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteSpecialSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Remove an effect from special slide (master, layout, notes) animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInteractiveSequenceEffectInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder");
            initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", "String", valueFolder);
            SlideAnimation response = api.deleteSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteSpecialSlideAnimationInteractiveSequenceEffect", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteSpecialSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Remove an effect from special slide (master, layout, notes) animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInteractiveSequenceEffectInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage");
            initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", "String", valueStorage);
            SlideAnimation response = api.deleteSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteSpecialSlideAnimationInteractiveSequenceEffect", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteSpecialSlideAnimationInteractiveSequenceEffect");
        }
    }
    
    /**
     * Clear all interactive sequences from special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInteractiveSequencesTest() throws ApiException, Exception {
        initialize("deleteSpecialSlideAnimationInteractiveSequences", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequences", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationInteractiveSequences", "slideType");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "storage");
        response = api.deleteSpecialSlideAnimationInteractiveSequences(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Clear all interactive sequences from special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInteractiveSequencesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequences", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationInteractiveSequences", "slideType");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSpecialSlideAnimationInteractiveSequences", "name");
            initialize("deleteSpecialSlideAnimationInteractiveSequences", "name", "String", valueName);
            SlideAnimation response = api.deleteSpecialSlideAnimationInteractiveSequences(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteSpecialSlideAnimationInteractiveSequences", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteSpecialSlideAnimationInteractiveSequences");
        }
    }
    /**
     * Clear all interactive sequences from special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInteractiveSequencesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequences", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationInteractiveSequences", "slideType");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSpecialSlideAnimationInteractiveSequences", "slideIndex");
            initialize("deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.deleteSpecialSlideAnimationInteractiveSequences(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteSpecialSlideAnimationInteractiveSequences", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteSpecialSlideAnimationInteractiveSequences");
        }
    }
    /**
     * Clear all interactive sequences from special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInteractiveSequencesInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequences", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationInteractiveSequences", "slideType");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "storage");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "deleteSpecialSlideAnimationInteractiveSequences", "slideType");
            initialize("deleteSpecialSlideAnimationInteractiveSequences", "slideType", "SpecialSlideType", valueSlideType);
            SlideAnimation response = api.deleteSpecialSlideAnimationInteractiveSequences(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "deleteSpecialSlideAnimationInteractiveSequences", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "deleteSpecialSlideAnimationInteractiveSequences");
        }
    }
    /**
     * Clear all interactive sequences from special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInteractiveSequencesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequences", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationInteractiveSequences", "slideType");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSpecialSlideAnimationInteractiveSequences", "password");
            initialize("deleteSpecialSlideAnimationInteractiveSequences", "password", "String", valuePassword);
            SlideAnimation response = api.deleteSpecialSlideAnimationInteractiveSequences(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteSpecialSlideAnimationInteractiveSequences", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteSpecialSlideAnimationInteractiveSequences");
        }
    }
    /**
     * Clear all interactive sequences from special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInteractiveSequencesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequences", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationInteractiveSequences", "slideType");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSpecialSlideAnimationInteractiveSequences", "folder");
            initialize("deleteSpecialSlideAnimationInteractiveSequences", "folder", "String", valueFolder);
            SlideAnimation response = api.deleteSpecialSlideAnimationInteractiveSequences(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteSpecialSlideAnimationInteractiveSequences", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteSpecialSlideAnimationInteractiveSequences");
        }
    }
    /**
     * Clear all interactive sequences from special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationInteractiveSequencesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationInteractiveSequences", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationInteractiveSequences", "slideType");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationInteractiveSequences", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSpecialSlideAnimationInteractiveSequences", "storage");
            initialize("deleteSpecialSlideAnimationInteractiveSequences", "storage", "String", valueStorage);
            SlideAnimation response = api.deleteSpecialSlideAnimationInteractiveSequences(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteSpecialSlideAnimationInteractiveSequences", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteSpecialSlideAnimationInteractiveSequences");
        }
    }
    
    /**
     * Clear main sequence in special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationMainSequenceTest() throws ApiException, Exception {
        initialize("deleteSpecialSlideAnimationMainSequence", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationMainSequence", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationMainSequence", "slideType");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "storage");
        response = api.deleteSpecialSlideAnimationMainSequence(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Clear main sequence in special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationMainSequenceInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationMainSequence", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationMainSequence", "slideType");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSpecialSlideAnimationMainSequence", "name");
            initialize("deleteSpecialSlideAnimationMainSequence", "name", "String", valueName);
            SlideAnimation response = api.deleteSpecialSlideAnimationMainSequence(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteSpecialSlideAnimationMainSequence", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteSpecialSlideAnimationMainSequence");
        }
    }
    /**
     * Clear main sequence in special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationMainSequenceInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationMainSequence", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationMainSequence", "slideType");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSpecialSlideAnimationMainSequence", "slideIndex");
            initialize("deleteSpecialSlideAnimationMainSequence", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.deleteSpecialSlideAnimationMainSequence(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteSpecialSlideAnimationMainSequence", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteSpecialSlideAnimationMainSequence");
        }
    }
    /**
     * Clear main sequence in special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationMainSequenceInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationMainSequence", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationMainSequence", "slideType");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "storage");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "deleteSpecialSlideAnimationMainSequence", "slideType");
            initialize("deleteSpecialSlideAnimationMainSequence", "slideType", "SpecialSlideType", valueSlideType);
            SlideAnimation response = api.deleteSpecialSlideAnimationMainSequence(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "deleteSpecialSlideAnimationMainSequence", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "deleteSpecialSlideAnimationMainSequence");
        }
    }
    /**
     * Clear main sequence in special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationMainSequenceInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationMainSequence", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationMainSequence", "slideType");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSpecialSlideAnimationMainSequence", "password");
            initialize("deleteSpecialSlideAnimationMainSequence", "password", "String", valuePassword);
            SlideAnimation response = api.deleteSpecialSlideAnimationMainSequence(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteSpecialSlideAnimationMainSequence", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteSpecialSlideAnimationMainSequence");
        }
    }
    /**
     * Clear main sequence in special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationMainSequenceInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationMainSequence", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationMainSequence", "slideType");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSpecialSlideAnimationMainSequence", "folder");
            initialize("deleteSpecialSlideAnimationMainSequence", "folder", "String", valueFolder);
            SlideAnimation response = api.deleteSpecialSlideAnimationMainSequence(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteSpecialSlideAnimationMainSequence", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteSpecialSlideAnimationMainSequence");
        }
    }
    /**
     * Clear main sequence in special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideAnimationMainSequenceInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideAnimationMainSequence", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideAnimationMainSequence", "slideType");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideAnimationMainSequence", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSpecialSlideAnimationMainSequence", "storage");
            initialize("deleteSpecialSlideAnimationMainSequence", "storage", "String", valueStorage);
            SlideAnimation response = api.deleteSpecialSlideAnimationMainSequence(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteSpecialSlideAnimationMainSequence", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteSpecialSlideAnimationMainSequence");
        }
    }
    
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideParagraphTest() throws ApiException, Exception {
        initialize("deleteSpecialSlideParagraph", null, null, null);
        Paragraphs response = null;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideParagraph", "subShape");
        response = api.deleteSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideParagraph", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSpecialSlideParagraph", "name");
            initialize("deleteSpecialSlideParagraph", "name", "String", valueName);
            Paragraphs response = api.deleteSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteSpecialSlideParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteSpecialSlideParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideParagraph", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSpecialSlideParagraph", "slideIndex");
            initialize("deleteSpecialSlideParagraph", "slideIndex", "Integer", valueSlideIndex);
            Paragraphs response = api.deleteSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteSpecialSlideParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteSpecialSlideParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideParagraphInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideParagraph", "subShape");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "deleteSpecialSlideParagraph", "slideType");
            initialize("deleteSpecialSlideParagraph", "slideType", "SpecialSlideType", valueSlideType);
            Paragraphs response = api.deleteSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "deleteSpecialSlideParagraph", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "deleteSpecialSlideParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideParagraph", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteSpecialSlideParagraph", "shapeIndex");
            initialize("deleteSpecialSlideParagraph", "shapeIndex", "Integer", valueShapeIndex);
            Paragraphs response = api.deleteSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "deleteSpecialSlideParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "deleteSpecialSlideParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideParagraphInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideParagraph", "subShape");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "deleteSpecialSlideParagraph", "paragraphIndex");
            initialize("deleteSpecialSlideParagraph", "paragraphIndex", "Integer", valueParagraphIndex);
            Paragraphs response = api.deleteSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "deleteSpecialSlideParagraph", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "deleteSpecialSlideParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideParagraph", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSpecialSlideParagraph", "password");
            initialize("deleteSpecialSlideParagraph", "password", "String", valuePassword);
            Paragraphs response = api.deleteSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteSpecialSlideParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteSpecialSlideParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideParagraph", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSpecialSlideParagraph", "folder");
            initialize("deleteSpecialSlideParagraph", "folder", "String", valueFolder);
            Paragraphs response = api.deleteSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteSpecialSlideParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteSpecialSlideParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideParagraph", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSpecialSlideParagraph", "storage");
            initialize("deleteSpecialSlideParagraph", "storage", "String", valueStorage);
            Paragraphs response = api.deleteSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteSpecialSlideParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteSpecialSlideParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideParagraphInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideParagraph", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "deleteSpecialSlideParagraph", "subShape");
            initialize("deleteSpecialSlideParagraph", "subShape", "String", valueSubShape);
            Paragraphs response = api.deleteSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "deleteSpecialSlideParagraph", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "deleteSpecialSlideParagraph");
        }
    }
    
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideParagraphsTest() throws ApiException, Exception {
        initialize("deleteSpecialSlideParagraphs", null, null, null);
        Paragraphs response = null;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraphs", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideParagraphs", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "subShape");
        response = api.deleteSpecialSlideParagraphs(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideParagraphsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraphs", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideParagraphs", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSpecialSlideParagraphs", "name");
            initialize("deleteSpecialSlideParagraphs", "name", "String", valueName);
            Paragraphs response = api.deleteSpecialSlideParagraphs(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteSpecialSlideParagraphs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteSpecialSlideParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideParagraphsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraphs", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideParagraphs", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSpecialSlideParagraphs", "slideIndex");
            initialize("deleteSpecialSlideParagraphs", "slideIndex", "Integer", valueSlideIndex);
            Paragraphs response = api.deleteSpecialSlideParagraphs(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteSpecialSlideParagraphs", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteSpecialSlideParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideParagraphsInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraphs", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideParagraphs", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "subShape");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "deleteSpecialSlideParagraphs", "slideType");
            initialize("deleteSpecialSlideParagraphs", "slideType", "SpecialSlideType", valueSlideType);
            Paragraphs response = api.deleteSpecialSlideParagraphs(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "deleteSpecialSlideParagraphs", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "deleteSpecialSlideParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideParagraphsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraphs", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideParagraphs", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteSpecialSlideParagraphs", "shapeIndex");
            initialize("deleteSpecialSlideParagraphs", "shapeIndex", "Integer", valueShapeIndex);
            Paragraphs response = api.deleteSpecialSlideParagraphs(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "deleteSpecialSlideParagraphs", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "deleteSpecialSlideParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideParagraphsInvalidParagraphsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraphs", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideParagraphs", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "subShape");
        try {
            valueParagraphs = (List<Integer>)invalidizeTestValue("List<Integer>", valueParagraphs, "deleteSpecialSlideParagraphs", "paragraphs");
            initialize("deleteSpecialSlideParagraphs", "paragraphs", "List<Integer>", valueParagraphs);
            Paragraphs response = api.deleteSpecialSlideParagraphs(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "List<Integer>", "paragraphs", "deleteSpecialSlideParagraphs", valueParagraphs);
        }
        if (needAssertResponse) {
            assertResponse("List<Integer>", "paragraphs", "deleteSpecialSlideParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideParagraphsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraphs", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideParagraphs", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSpecialSlideParagraphs", "password");
            initialize("deleteSpecialSlideParagraphs", "password", "String", valuePassword);
            Paragraphs response = api.deleteSpecialSlideParagraphs(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteSpecialSlideParagraphs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteSpecialSlideParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideParagraphsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraphs", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideParagraphs", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSpecialSlideParagraphs", "folder");
            initialize("deleteSpecialSlideParagraphs", "folder", "String", valueFolder);
            Paragraphs response = api.deleteSpecialSlideParagraphs(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteSpecialSlideParagraphs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteSpecialSlideParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideParagraphsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraphs", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideParagraphs", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSpecialSlideParagraphs", "storage");
            initialize("deleteSpecialSlideParagraphs", "storage", "String", valueStorage);
            Paragraphs response = api.deleteSpecialSlideParagraphs(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteSpecialSlideParagraphs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteSpecialSlideParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideParagraphsInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraphs", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideParagraphs", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideParagraphs", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "deleteSpecialSlideParagraphs", "subShape");
            initialize("deleteSpecialSlideParagraphs", "subShape", "String", valueSubShape);
            Paragraphs response = api.deleteSpecialSlideParagraphs(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "deleteSpecialSlideParagraphs", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "deleteSpecialSlideParagraphs");
        }
    }
    
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlidePortionTest() throws ApiException, Exception {
        initialize("deleteSpecialSlidePortion", null, null, null);
        Portions response = null;
        String valueName = (String)getTestValue("String", "deleteSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlidePortion", "subShape");
        response = api.deleteSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlidePortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlidePortion", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSpecialSlidePortion", "name");
            initialize("deleteSpecialSlidePortion", "name", "String", valueName);
            Portions response = api.deleteSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteSpecialSlidePortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteSpecialSlidePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlidePortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlidePortion", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSpecialSlidePortion", "slideIndex");
            initialize("deleteSpecialSlidePortion", "slideIndex", "Integer", valueSlideIndex);
            Portions response = api.deleteSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteSpecialSlidePortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteSpecialSlidePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlidePortionInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlidePortion", "subShape");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "deleteSpecialSlidePortion", "slideType");
            initialize("deleteSpecialSlidePortion", "slideType", "SpecialSlideType", valueSlideType);
            Portions response = api.deleteSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "deleteSpecialSlidePortion", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "deleteSpecialSlidePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlidePortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlidePortion", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteSpecialSlidePortion", "shapeIndex");
            initialize("deleteSpecialSlidePortion", "shapeIndex", "Integer", valueShapeIndex);
            Portions response = api.deleteSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "deleteSpecialSlidePortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "deleteSpecialSlidePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlidePortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlidePortion", "subShape");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "deleteSpecialSlidePortion", "paragraphIndex");
            initialize("deleteSpecialSlidePortion", "paragraphIndex", "Integer", valueParagraphIndex);
            Portions response = api.deleteSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "deleteSpecialSlidePortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "deleteSpecialSlidePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlidePortionInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlidePortion", "subShape");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "deleteSpecialSlidePortion", "portionIndex");
            initialize("deleteSpecialSlidePortion", "portionIndex", "Integer", valuePortionIndex);
            Portions response = api.deleteSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "portionIndex", "deleteSpecialSlidePortion", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "portionIndex", "deleteSpecialSlidePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlidePortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlidePortion", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSpecialSlidePortion", "password");
            initialize("deleteSpecialSlidePortion", "password", "String", valuePassword);
            Portions response = api.deleteSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteSpecialSlidePortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteSpecialSlidePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlidePortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlidePortion", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSpecialSlidePortion", "folder");
            initialize("deleteSpecialSlidePortion", "folder", "String", valueFolder);
            Portions response = api.deleteSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteSpecialSlidePortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteSpecialSlidePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlidePortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlidePortion", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSpecialSlidePortion", "storage");
            initialize("deleteSpecialSlidePortion", "storage", "String", valueStorage);
            Portions response = api.deleteSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteSpecialSlidePortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteSpecialSlidePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlidePortionInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlidePortion", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "deleteSpecialSlidePortion", "subShape");
            initialize("deleteSpecialSlidePortion", "subShape", "String", valueSubShape);
            Portions response = api.deleteSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "deleteSpecialSlidePortion", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "deleteSpecialSlidePortion");
        }
    }
    
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlidePortionsTest() throws ApiException, Exception {
        initialize("deleteSpecialSlidePortions", null, null, null);
        Portions response = null;
        String valueName = (String)getTestValue("String", "deleteSpecialSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlidePortions", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlidePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlidePortions", "subShape");
        response = api.deleteSpecialSlidePortions(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlidePortionsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlidePortions", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlidePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlidePortions", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSpecialSlidePortions", "name");
            initialize("deleteSpecialSlidePortions", "name", "String", valueName);
            Portions response = api.deleteSpecialSlidePortions(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteSpecialSlidePortions", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteSpecialSlidePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlidePortionsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlidePortions", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlidePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlidePortions", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSpecialSlidePortions", "slideIndex");
            initialize("deleteSpecialSlidePortions", "slideIndex", "Integer", valueSlideIndex);
            Portions response = api.deleteSpecialSlidePortions(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteSpecialSlidePortions", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteSpecialSlidePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlidePortionsInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlidePortions", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlidePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlidePortions", "subShape");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "deleteSpecialSlidePortions", "slideType");
            initialize("deleteSpecialSlidePortions", "slideType", "SpecialSlideType", valueSlideType);
            Portions response = api.deleteSpecialSlidePortions(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "deleteSpecialSlidePortions", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "deleteSpecialSlidePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlidePortionsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlidePortions", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlidePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlidePortions", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteSpecialSlidePortions", "shapeIndex");
            initialize("deleteSpecialSlidePortions", "shapeIndex", "Integer", valueShapeIndex);
            Portions response = api.deleteSpecialSlidePortions(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "deleteSpecialSlidePortions", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "deleteSpecialSlidePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlidePortionsInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlidePortions", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlidePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlidePortions", "subShape");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "deleteSpecialSlidePortions", "paragraphIndex");
            initialize("deleteSpecialSlidePortions", "paragraphIndex", "Integer", valueParagraphIndex);
            Portions response = api.deleteSpecialSlidePortions(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "deleteSpecialSlidePortions", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "deleteSpecialSlidePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlidePortionsInvalidPortionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlidePortions", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlidePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlidePortions", "subShape");
        try {
            valuePortions = (List<Integer>)invalidizeTestValue("List<Integer>", valuePortions, "deleteSpecialSlidePortions", "portions");
            initialize("deleteSpecialSlidePortions", "portions", "List<Integer>", valuePortions);
            Portions response = api.deleteSpecialSlidePortions(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "List<Integer>", "portions", "deleteSpecialSlidePortions", valuePortions);
        }
        if (needAssertResponse) {
            assertResponse("List<Integer>", "portions", "deleteSpecialSlidePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlidePortionsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlidePortions", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlidePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlidePortions", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSpecialSlidePortions", "password");
            initialize("deleteSpecialSlidePortions", "password", "String", valuePassword);
            Portions response = api.deleteSpecialSlidePortions(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteSpecialSlidePortions", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteSpecialSlidePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlidePortionsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlidePortions", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlidePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlidePortions", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSpecialSlidePortions", "folder");
            initialize("deleteSpecialSlidePortions", "folder", "String", valueFolder);
            Portions response = api.deleteSpecialSlidePortions(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteSpecialSlidePortions", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteSpecialSlidePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlidePortionsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlidePortions", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlidePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlidePortions", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSpecialSlidePortions", "storage");
            initialize("deleteSpecialSlidePortions", "storage", "String", valueStorage);
            Portions response = api.deleteSpecialSlidePortions(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteSpecialSlidePortions", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteSpecialSlidePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlidePortionsInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlidePortions", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSpecialSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlidePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlidePortions", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "deleteSpecialSlidePortions", "subShape");
            initialize("deleteSpecialSlidePortions", "subShape", "String", valueSubShape);
            Portions response = api.deleteSpecialSlidePortions(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "deleteSpecialSlidePortions", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "deleteSpecialSlidePortions");
        }
    }
    
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideShapeTest() throws ApiException, Exception {
        initialize("deleteSpecialSlideShape", null, null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideShape", "subShape");
        response = api.deleteSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideShape", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSpecialSlideShape", "name");
            initialize("deleteSpecialSlideShape", "name", "String", valueName);
            Shapes response = api.deleteSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteSpecialSlideShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteSpecialSlideShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideShape", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSpecialSlideShape", "slideIndex");
            initialize("deleteSpecialSlideShape", "slideIndex", "Integer", valueSlideIndex);
            Shapes response = api.deleteSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteSpecialSlideShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteSpecialSlideShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideShapeInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideShape", "subShape");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "deleteSpecialSlideShape", "slideType");
            initialize("deleteSpecialSlideShape", "slideType", "SpecialSlideType", valueSlideType);
            Shapes response = api.deleteSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "deleteSpecialSlideShape", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "deleteSpecialSlideShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideShape", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteSpecialSlideShape", "shapeIndex");
            initialize("deleteSpecialSlideShape", "shapeIndex", "Integer", valueShapeIndex);
            Shapes response = api.deleteSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "deleteSpecialSlideShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "deleteSpecialSlideShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideShape", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSpecialSlideShape", "password");
            initialize("deleteSpecialSlideShape", "password", "String", valuePassword);
            Shapes response = api.deleteSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteSpecialSlideShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteSpecialSlideShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideShape", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSpecialSlideShape", "folder");
            initialize("deleteSpecialSlideShape", "folder", "String", valueFolder);
            Shapes response = api.deleteSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteSpecialSlideShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteSpecialSlideShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideShape", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSpecialSlideShape", "storage");
            initialize("deleteSpecialSlideShape", "storage", "String", valueStorage);
            Shapes response = api.deleteSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteSpecialSlideShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteSpecialSlideShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideShapeInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideShape", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "deleteSpecialSlideShape", "subShape");
            initialize("deleteSpecialSlideShape", "subShape", "String", valueSubShape);
            Shapes response = api.deleteSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "deleteSpecialSlideShape", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "deleteSpecialSlideShape");
        }
    }
    
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideShapesTest() throws ApiException, Exception {
        initialize("deleteSpecialSlideShapes", null, null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideShapes", "slideType");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideShapes", "subShape");
        response = api.deleteSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideShapesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideShapes", "slideType");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideShapes", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSpecialSlideShapes", "name");
            initialize("deleteSpecialSlideShapes", "name", "String", valueName);
            Shapes response = api.deleteSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteSpecialSlideShapes", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteSpecialSlideShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideShapesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideShapes", "slideType");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideShapes", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSpecialSlideShapes", "slideIndex");
            initialize("deleteSpecialSlideShapes", "slideIndex", "Integer", valueSlideIndex);
            Shapes response = api.deleteSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "deleteSpecialSlideShapes", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "deleteSpecialSlideShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideShapesInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideShapes", "slideType");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideShapes", "subShape");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "deleteSpecialSlideShapes", "slideType");
            initialize("deleteSpecialSlideShapes", "slideType", "SpecialSlideType", valueSlideType);
            Shapes response = api.deleteSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "deleteSpecialSlideShapes", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "deleteSpecialSlideShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideShapesInvalidShapesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideShapes", "slideType");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideShapes", "subShape");
        try {
            valueShapes = (List<Integer>)invalidizeTestValue("List<Integer>", valueShapes, "deleteSpecialSlideShapes", "shapes");
            initialize("deleteSpecialSlideShapes", "shapes", "List<Integer>", valueShapes);
            Shapes response = api.deleteSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "List<Integer>", "shapes", "deleteSpecialSlideShapes", valueShapes);
        }
        if (needAssertResponse) {
            assertResponse("List<Integer>", "shapes", "deleteSpecialSlideShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideShapesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideShapes", "slideType");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideShapes", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSpecialSlideShapes", "password");
            initialize("deleteSpecialSlideShapes", "password", "String", valuePassword);
            Shapes response = api.deleteSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteSpecialSlideShapes", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteSpecialSlideShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideShapesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideShapes", "slideType");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideShapes", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSpecialSlideShapes", "folder");
            initialize("deleteSpecialSlideShapes", "folder", "String", valueFolder);
            Shapes response = api.deleteSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteSpecialSlideShapes", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteSpecialSlideShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideShapesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideShapes", "slideType");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideShapes", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSpecialSlideShapes", "storage");
            initialize("deleteSpecialSlideShapes", "storage", "String", valueStorage);
            Shapes response = api.deleteSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteSpecialSlideShapes", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteSpecialSlideShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialSlideShapesInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "deleteSpecialSlideShapes", "slideType");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSpecialSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "deleteSpecialSlideShapes", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "deleteSpecialSlideShapes", "subShape");
            initialize("deleteSpecialSlideShapes", "subShape", "String", valueSubShape);
            Shapes response = api.deleteSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valueShapes, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "deleteSpecialSlideShapes", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "deleteSpecialSlideShapes");
        }
    }
    
    /**
     * Removes unused layout slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUnusedLayoutSlidesTest() throws ApiException, Exception {
        initialize("deleteUnusedLayoutSlides", null, null, null);
        LayoutSlides response = null;
        String valueName = (String)getTestValue("String", "deleteUnusedLayoutSlides", "name");
        String valuePassword = (String)getTestValue("String", "deleteUnusedLayoutSlides", "password");
        String valueFolder = (String)getTestValue("String", "deleteUnusedLayoutSlides", "folder");
        String valueStorage = (String)getTestValue("String", "deleteUnusedLayoutSlides", "storage");
        response = api.deleteUnusedLayoutSlides(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Removes unused layout slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUnusedLayoutSlidesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteUnusedLayoutSlides", "name");
        String valuePassword = (String)getTestValue("String", "deleteUnusedLayoutSlides", "password");
        String valueFolder = (String)getTestValue("String", "deleteUnusedLayoutSlides", "folder");
        String valueStorage = (String)getTestValue("String", "deleteUnusedLayoutSlides", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteUnusedLayoutSlides", "name");
            initialize("deleteUnusedLayoutSlides", "name", "String", valueName);
            LayoutSlides response = api.deleteUnusedLayoutSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteUnusedLayoutSlides", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteUnusedLayoutSlides");
        }
    }
    /**
     * Removes unused layout slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUnusedLayoutSlidesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteUnusedLayoutSlides", "name");
        String valuePassword = (String)getTestValue("String", "deleteUnusedLayoutSlides", "password");
        String valueFolder = (String)getTestValue("String", "deleteUnusedLayoutSlides", "folder");
        String valueStorage = (String)getTestValue("String", "deleteUnusedLayoutSlides", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteUnusedLayoutSlides", "password");
            initialize("deleteUnusedLayoutSlides", "password", "String", valuePassword);
            LayoutSlides response = api.deleteUnusedLayoutSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteUnusedLayoutSlides", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteUnusedLayoutSlides");
        }
    }
    /**
     * Removes unused layout slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUnusedLayoutSlidesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteUnusedLayoutSlides", "name");
        String valuePassword = (String)getTestValue("String", "deleteUnusedLayoutSlides", "password");
        String valueFolder = (String)getTestValue("String", "deleteUnusedLayoutSlides", "folder");
        String valueStorage = (String)getTestValue("String", "deleteUnusedLayoutSlides", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteUnusedLayoutSlides", "folder");
            initialize("deleteUnusedLayoutSlides", "folder", "String", valueFolder);
            LayoutSlides response = api.deleteUnusedLayoutSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteUnusedLayoutSlides", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteUnusedLayoutSlides");
        }
    }
    /**
     * Removes unused layout slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUnusedLayoutSlidesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteUnusedLayoutSlides", "name");
        String valuePassword = (String)getTestValue("String", "deleteUnusedLayoutSlides", "password");
        String valueFolder = (String)getTestValue("String", "deleteUnusedLayoutSlides", "folder");
        String valueStorage = (String)getTestValue("String", "deleteUnusedLayoutSlides", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteUnusedLayoutSlides", "storage");
            initialize("deleteUnusedLayoutSlides", "storage", "String", valueStorage);
            LayoutSlides response = api.deleteUnusedLayoutSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteUnusedLayoutSlides", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteUnusedLayoutSlides");
        }
    }
    
    /**
     * Removes unused layout slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUnusedLayoutSlidesOnlineTest() throws ApiException, Exception {
        initialize("deleteUnusedLayoutSlidesOnline", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteUnusedLayoutSlidesOnline", "document");
        String valuePassword = (String)getTestValue("String", "deleteUnusedLayoutSlidesOnline", "password");
        response = api.deleteUnusedLayoutSlidesOnline(valueDocument, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Removes unused layout slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUnusedLayoutSlidesOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteUnusedLayoutSlidesOnline", "document");
        String valuePassword = (String)getTestValue("String", "deleteUnusedLayoutSlidesOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "deleteUnusedLayoutSlidesOnline", "document");
            initialize("deleteUnusedLayoutSlidesOnline", "document", "byte[]", valueDocument);
            File response = api.deleteUnusedLayoutSlidesOnline(valueDocument, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "deleteUnusedLayoutSlidesOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "deleteUnusedLayoutSlidesOnline");
        }
    }
    /**
     * Removes unused layout slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUnusedLayoutSlidesOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteUnusedLayoutSlidesOnline", "document");
        String valuePassword = (String)getTestValue("String", "deleteUnusedLayoutSlidesOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteUnusedLayoutSlidesOnline", "password");
            initialize("deleteUnusedLayoutSlidesOnline", "password", "String", valuePassword);
            File response = api.deleteUnusedLayoutSlidesOnline(valueDocument, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteUnusedLayoutSlidesOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteUnusedLayoutSlidesOnline");
        }
    }
    
    /**
     * Removes unused master slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUnusedMasterSlidesTest() throws ApiException, Exception {
        initialize("deleteUnusedMasterSlides", null, null, null);
        MasterSlides response = null;
        String valueName = (String)getTestValue("String", "deleteUnusedMasterSlides", "name");
        Boolean valueIgnorePreserveField = (Boolean)getTestValue("Boolean", "deleteUnusedMasterSlides", "ignorePreserveField");
        String valuePassword = (String)getTestValue("String", "deleteUnusedMasterSlides", "password");
        String valueFolder = (String)getTestValue("String", "deleteUnusedMasterSlides", "folder");
        String valueStorage = (String)getTestValue("String", "deleteUnusedMasterSlides", "storage");
        response = api.deleteUnusedMasterSlides(valueName, valueIgnorePreserveField, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Removes unused master slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUnusedMasterSlidesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteUnusedMasterSlides", "name");
        Boolean valueIgnorePreserveField = (Boolean)getTestValue("Boolean", "deleteUnusedMasterSlides", "ignorePreserveField");
        String valuePassword = (String)getTestValue("String", "deleteUnusedMasterSlides", "password");
        String valueFolder = (String)getTestValue("String", "deleteUnusedMasterSlides", "folder");
        String valueStorage = (String)getTestValue("String", "deleteUnusedMasterSlides", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteUnusedMasterSlides", "name");
            initialize("deleteUnusedMasterSlides", "name", "String", valueName);
            MasterSlides response = api.deleteUnusedMasterSlides(valueName, valueIgnorePreserveField, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteUnusedMasterSlides", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteUnusedMasterSlides");
        }
    }
    /**
     * Removes unused master slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUnusedMasterSlidesInvalidIgnorePreserveFieldTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteUnusedMasterSlides", "name");
        Boolean valueIgnorePreserveField = (Boolean)getTestValue("Boolean", "deleteUnusedMasterSlides", "ignorePreserveField");
        String valuePassword = (String)getTestValue("String", "deleteUnusedMasterSlides", "password");
        String valueFolder = (String)getTestValue("String", "deleteUnusedMasterSlides", "folder");
        String valueStorage = (String)getTestValue("String", "deleteUnusedMasterSlides", "storage");
        try {
            valueIgnorePreserveField = (Boolean)invalidizeTestValue("Boolean", valueIgnorePreserveField, "deleteUnusedMasterSlides", "ignorePreserveField");
            initialize("deleteUnusedMasterSlides", "ignorePreserveField", "Boolean", valueIgnorePreserveField);
            MasterSlides response = api.deleteUnusedMasterSlides(valueName, valueIgnorePreserveField, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "ignorePreserveField", "deleteUnusedMasterSlides", valueIgnorePreserveField);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "ignorePreserveField", "deleteUnusedMasterSlides");
        }
    }
    /**
     * Removes unused master slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUnusedMasterSlidesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteUnusedMasterSlides", "name");
        Boolean valueIgnorePreserveField = (Boolean)getTestValue("Boolean", "deleteUnusedMasterSlides", "ignorePreserveField");
        String valuePassword = (String)getTestValue("String", "deleteUnusedMasterSlides", "password");
        String valueFolder = (String)getTestValue("String", "deleteUnusedMasterSlides", "folder");
        String valueStorage = (String)getTestValue("String", "deleteUnusedMasterSlides", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteUnusedMasterSlides", "password");
            initialize("deleteUnusedMasterSlides", "password", "String", valuePassword);
            MasterSlides response = api.deleteUnusedMasterSlides(valueName, valueIgnorePreserveField, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteUnusedMasterSlides", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteUnusedMasterSlides");
        }
    }
    /**
     * Removes unused master slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUnusedMasterSlidesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteUnusedMasterSlides", "name");
        Boolean valueIgnorePreserveField = (Boolean)getTestValue("Boolean", "deleteUnusedMasterSlides", "ignorePreserveField");
        String valuePassword = (String)getTestValue("String", "deleteUnusedMasterSlides", "password");
        String valueFolder = (String)getTestValue("String", "deleteUnusedMasterSlides", "folder");
        String valueStorage = (String)getTestValue("String", "deleteUnusedMasterSlides", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteUnusedMasterSlides", "folder");
            initialize("deleteUnusedMasterSlides", "folder", "String", valueFolder);
            MasterSlides response = api.deleteUnusedMasterSlides(valueName, valueIgnorePreserveField, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteUnusedMasterSlides", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteUnusedMasterSlides");
        }
    }
    /**
     * Removes unused master slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUnusedMasterSlidesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteUnusedMasterSlides", "name");
        Boolean valueIgnorePreserveField = (Boolean)getTestValue("Boolean", "deleteUnusedMasterSlides", "ignorePreserveField");
        String valuePassword = (String)getTestValue("String", "deleteUnusedMasterSlides", "password");
        String valueFolder = (String)getTestValue("String", "deleteUnusedMasterSlides", "folder");
        String valueStorage = (String)getTestValue("String", "deleteUnusedMasterSlides", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteUnusedMasterSlides", "storage");
            initialize("deleteUnusedMasterSlides", "storage", "String", valueStorage);
            MasterSlides response = api.deleteUnusedMasterSlides(valueName, valueIgnorePreserveField, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteUnusedMasterSlides", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteUnusedMasterSlides");
        }
    }
    
    /**
     * Removes unused master slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUnusedMasterSlidesOnlineTest() throws ApiException, Exception {
        initialize("deleteUnusedMasterSlidesOnline", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteUnusedMasterSlidesOnline", "document");
        Boolean valueIgnorePreserveField = (Boolean)getTestValue("Boolean", "deleteUnusedMasterSlidesOnline", "ignorePreserveField");
        String valuePassword = (String)getTestValue("String", "deleteUnusedMasterSlidesOnline", "password");
        response = api.deleteUnusedMasterSlidesOnline(valueDocument, valueIgnorePreserveField, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Removes unused master slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUnusedMasterSlidesOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteUnusedMasterSlidesOnline", "document");
        Boolean valueIgnorePreserveField = (Boolean)getTestValue("Boolean", "deleteUnusedMasterSlidesOnline", "ignorePreserveField");
        String valuePassword = (String)getTestValue("String", "deleteUnusedMasterSlidesOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "deleteUnusedMasterSlidesOnline", "document");
            initialize("deleteUnusedMasterSlidesOnline", "document", "byte[]", valueDocument);
            File response = api.deleteUnusedMasterSlidesOnline(valueDocument, valueIgnorePreserveField, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "deleteUnusedMasterSlidesOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "deleteUnusedMasterSlidesOnline");
        }
    }
    /**
     * Removes unused master slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUnusedMasterSlidesOnlineInvalidIgnorePreserveFieldTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteUnusedMasterSlidesOnline", "document");
        Boolean valueIgnorePreserveField = (Boolean)getTestValue("Boolean", "deleteUnusedMasterSlidesOnline", "ignorePreserveField");
        String valuePassword = (String)getTestValue("String", "deleteUnusedMasterSlidesOnline", "password");
        try {
            valueIgnorePreserveField = (Boolean)invalidizeTestValue("Boolean", valueIgnorePreserveField, "deleteUnusedMasterSlidesOnline", "ignorePreserveField");
            initialize("deleteUnusedMasterSlidesOnline", "ignorePreserveField", "Boolean", valueIgnorePreserveField);
            File response = api.deleteUnusedMasterSlidesOnline(valueDocument, valueIgnorePreserveField, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "ignorePreserveField", "deleteUnusedMasterSlidesOnline", valueIgnorePreserveField);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "ignorePreserveField", "deleteUnusedMasterSlidesOnline");
        }
    }
    /**
     * Removes unused master slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUnusedMasterSlidesOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteUnusedMasterSlidesOnline", "document");
        Boolean valueIgnorePreserveField = (Boolean)getTestValue("Boolean", "deleteUnusedMasterSlidesOnline", "ignorePreserveField");
        String valuePassword = (String)getTestValue("String", "deleteUnusedMasterSlidesOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteUnusedMasterSlidesOnline", "password");
            initialize("deleteUnusedMasterSlidesOnline", "password", "String", valuePassword);
            File response = api.deleteUnusedMasterSlidesOnline(valueDocument, valueIgnorePreserveField, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteUnusedMasterSlidesOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteUnusedMasterSlidesOnline");
        }
    }
    
    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWatermarkTest() throws ApiException, Exception {
        initialize("deleteWatermark", null, null, null);
        ;
        String valueName = (String)getTestValue("String", "deleteWatermark", "name");
        String valueShapeName = (String)getTestValue("String", "deleteWatermark", "shapeName");
        String valuePassword = (String)getTestValue("String", "deleteWatermark", "password");
        String valueFolder = (String)getTestValue("String", "deleteWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "deleteWatermark", "storage");
        api.deleteWatermark(valueName, valueShapeName, valuePassword, valueFolder, valueStorage);
    }

    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWatermarkInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteWatermark", "name");
        String valueShapeName = (String)getTestValue("String", "deleteWatermark", "shapeName");
        String valuePassword = (String)getTestValue("String", "deleteWatermark", "password");
        String valueFolder = (String)getTestValue("String", "deleteWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "deleteWatermark", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteWatermark", "name");
            initialize("deleteWatermark", "name", "String", valueName);
            api.deleteWatermark(valueName, valueShapeName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "deleteWatermark", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "deleteWatermark");
        }
    }
    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWatermarkInvalidShapeNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteWatermark", "name");
        String valueShapeName = (String)getTestValue("String", "deleteWatermark", "shapeName");
        String valuePassword = (String)getTestValue("String", "deleteWatermark", "password");
        String valueFolder = (String)getTestValue("String", "deleteWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "deleteWatermark", "storage");
        try {
            valueShapeName = (String)invalidizeTestValue("String", valueShapeName, "deleteWatermark", "shapeName");
            initialize("deleteWatermark", "shapeName", "String", valueShapeName);
            api.deleteWatermark(valueName, valueShapeName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "shapeName", "deleteWatermark", valueShapeName);
        }
        if (needAssertResponse) {
            assertResponse("String", "shapeName", "deleteWatermark");
        }
    }
    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWatermarkInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteWatermark", "name");
        String valueShapeName = (String)getTestValue("String", "deleteWatermark", "shapeName");
        String valuePassword = (String)getTestValue("String", "deleteWatermark", "password");
        String valueFolder = (String)getTestValue("String", "deleteWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "deleteWatermark", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteWatermark", "password");
            initialize("deleteWatermark", "password", "String", valuePassword);
            api.deleteWatermark(valueName, valueShapeName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteWatermark", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteWatermark");
        }
    }
    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWatermarkInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteWatermark", "name");
        String valueShapeName = (String)getTestValue("String", "deleteWatermark", "shapeName");
        String valuePassword = (String)getTestValue("String", "deleteWatermark", "password");
        String valueFolder = (String)getTestValue("String", "deleteWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "deleteWatermark", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteWatermark", "folder");
            initialize("deleteWatermark", "folder", "String", valueFolder);
            api.deleteWatermark(valueName, valueShapeName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "deleteWatermark", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "deleteWatermark");
        }
    }
    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWatermarkInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteWatermark", "name");
        String valueShapeName = (String)getTestValue("String", "deleteWatermark", "shapeName");
        String valuePassword = (String)getTestValue("String", "deleteWatermark", "password");
        String valueFolder = (String)getTestValue("String", "deleteWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "deleteWatermark", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteWatermark", "storage");
            initialize("deleteWatermark", "storage", "String", valueStorage);
            api.deleteWatermark(valueName, valueShapeName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "deleteWatermark", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "deleteWatermark");
        }
    }
    
    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWatermarkOnlineTest() throws ApiException, Exception {
        initialize("deleteWatermarkOnline", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteWatermarkOnline", "document");
        String valueShapeName = (String)getTestValue("String", "deleteWatermarkOnline", "shapeName");
        String valuePassword = (String)getTestValue("String", "deleteWatermarkOnline", "password");
        response = api.deleteWatermarkOnline(valueDocument, valueShapeName, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWatermarkOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteWatermarkOnline", "document");
        String valueShapeName = (String)getTestValue("String", "deleteWatermarkOnline", "shapeName");
        String valuePassword = (String)getTestValue("String", "deleteWatermarkOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "deleteWatermarkOnline", "document");
            initialize("deleteWatermarkOnline", "document", "byte[]", valueDocument);
            File response = api.deleteWatermarkOnline(valueDocument, valueShapeName, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "deleteWatermarkOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "deleteWatermarkOnline");
        }
    }
    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWatermarkOnlineInvalidShapeNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteWatermarkOnline", "document");
        String valueShapeName = (String)getTestValue("String", "deleteWatermarkOnline", "shapeName");
        String valuePassword = (String)getTestValue("String", "deleteWatermarkOnline", "password");
        try {
            valueShapeName = (String)invalidizeTestValue("String", valueShapeName, "deleteWatermarkOnline", "shapeName");
            initialize("deleteWatermarkOnline", "shapeName", "String", valueShapeName);
            File response = api.deleteWatermarkOnline(valueDocument, valueShapeName, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "shapeName", "deleteWatermarkOnline", valueShapeName);
        }
        if (needAssertResponse) {
            assertResponse("String", "shapeName", "deleteWatermarkOnline");
        }
    }
    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWatermarkOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteWatermarkOnline", "document");
        String valueShapeName = (String)getTestValue("String", "deleteWatermarkOnline", "shapeName");
        String valuePassword = (String)getTestValue("String", "deleteWatermarkOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteWatermarkOnline", "password");
            initialize("deleteWatermarkOnline", "password", "String", valuePassword);
            File response = api.deleteWatermarkOnline(valueDocument, valueShapeName, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "deleteWatermarkOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "deleteWatermarkOnline");
        }
    }
    
    /**
     * Download file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadFileTest() throws ApiException, Exception {
        initialize("downloadFile", null, null, null);
        File response = null;
        String valuePath = (String)getTestValue("String", "downloadFile", "path");
        String valueStorageName = (String)getTestValue("String", "downloadFile", "storageName");
        String valueVersionId = (String)getTestValue("String", "downloadFile", "versionId");
        response = api.downloadFile(valuePath, valueStorageName, valueVersionId);
        assertTrue(response.isFile());
    }

    /**
     * Download file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadFileInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "downloadFile", "path");
        String valueStorageName = (String)getTestValue("String", "downloadFile", "storageName");
        String valueVersionId = (String)getTestValue("String", "downloadFile", "versionId");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "downloadFile", "path");
            initialize("downloadFile", "path", "String", valuePath);
            File response = api.downloadFile(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "path", "downloadFile", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("String", "path", "downloadFile");
        }
    }
    /**
     * Download file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadFileInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "downloadFile", "path");
        String valueStorageName = (String)getTestValue("String", "downloadFile", "storageName");
        String valueVersionId = (String)getTestValue("String", "downloadFile", "versionId");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "downloadFile", "storageName");
            initialize("downloadFile", "storageName", "String", valueStorageName);
            File response = api.downloadFile(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storageName", "downloadFile", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("String", "storageName", "downloadFile");
        }
    }
    /**
     * Download file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadFileInvalidVersionIdTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "downloadFile", "path");
        String valueStorageName = (String)getTestValue("String", "downloadFile", "storageName");
        String valueVersionId = (String)getTestValue("String", "downloadFile", "versionId");
        try {
            valueVersionId = (String)invalidizeTestValue("String", valueVersionId, "downloadFile", "versionId");
            initialize("downloadFile", "versionId", "String", valueVersionId);
            File response = api.downloadFile(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "versionId", "downloadFile", valueVersionId);
        }
        if (needAssertResponse) {
            assertResponse("String", "versionId", "downloadFile");
        }
    }
    
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageTest() throws ApiException, Exception {
        initialize("downloadImage", null, null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "downloadImage", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImage", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImage", "format");
        String valuePassword = (String)getTestValue("String", "downloadImage", "password");
        String valueFolder = (String)getTestValue("String", "downloadImage", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImage", "storage");
        response = api.downloadImage(valueName, valueIndex, valueFormat, valuePassword, valueFolder, valueStorage);
        assertTrue(response.isFile());
    }

    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImage", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImage", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImage", "format");
        String valuePassword = (String)getTestValue("String", "downloadImage", "password");
        String valueFolder = (String)getTestValue("String", "downloadImage", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImage", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "downloadImage", "name");
            initialize("downloadImage", "name", "String", valueName);
            File response = api.downloadImage(valueName, valueIndex, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "downloadImage", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "downloadImage");
        }
    }
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageInvalidIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImage", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImage", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImage", "format");
        String valuePassword = (String)getTestValue("String", "downloadImage", "password");
        String valueFolder = (String)getTestValue("String", "downloadImage", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImage", "storage");
        try {
            valueIndex = (Integer)invalidizeTestValue("Integer", valueIndex, "downloadImage", "index");
            initialize("downloadImage", "index", "Integer", valueIndex);
            File response = api.downloadImage(valueName, valueIndex, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "index", "downloadImage", valueIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "index", "downloadImage");
        }
    }
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImage", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImage", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImage", "format");
        String valuePassword = (String)getTestValue("String", "downloadImage", "password");
        String valueFolder = (String)getTestValue("String", "downloadImage", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImage", "storage");
        try {
            valueFormat = (ImageExportFormat)invalidizeTestValue("ImageExportFormat", valueFormat, "downloadImage", "format");
            initialize("downloadImage", "format", "ImageExportFormat", valueFormat);
            File response = api.downloadImage(valueName, valueIndex, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ImageExportFormat", "format", "downloadImage", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("ImageExportFormat", "format", "downloadImage");
        }
    }
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImage", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImage", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImage", "format");
        String valuePassword = (String)getTestValue("String", "downloadImage", "password");
        String valueFolder = (String)getTestValue("String", "downloadImage", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImage", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadImage", "password");
            initialize("downloadImage", "password", "String", valuePassword);
            File response = api.downloadImage(valueName, valueIndex, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "downloadImage", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "downloadImage");
        }
    }
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImage", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImage", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImage", "format");
        String valuePassword = (String)getTestValue("String", "downloadImage", "password");
        String valueFolder = (String)getTestValue("String", "downloadImage", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImage", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "downloadImage", "folder");
            initialize("downloadImage", "folder", "String", valueFolder);
            File response = api.downloadImage(valueName, valueIndex, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "downloadImage", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "downloadImage");
        }
    }
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImage", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImage", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImage", "format");
        String valuePassword = (String)getTestValue("String", "downloadImage", "password");
        String valueFolder = (String)getTestValue("String", "downloadImage", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImage", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "downloadImage", "storage");
            initialize("downloadImage", "storage", "String", valueStorage);
            File response = api.downloadImage(valueName, valueIndex, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "downloadImage", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "downloadImage");
        }
    }
    
    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageDefaultFormatTest() throws ApiException, Exception {
        initialize("downloadImageDefaultFormat", null, null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "downloadImageDefaultFormat", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageDefaultFormat", "index");
        String valuePassword = (String)getTestValue("String", "downloadImageDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "downloadImageDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImageDefaultFormat", "storage");
        response = api.downloadImageDefaultFormat(valueName, valueIndex, valuePassword, valueFolder, valueStorage);
        assertTrue(response.isFile());
    }

    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageDefaultFormatInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImageDefaultFormat", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageDefaultFormat", "index");
        String valuePassword = (String)getTestValue("String", "downloadImageDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "downloadImageDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImageDefaultFormat", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "downloadImageDefaultFormat", "name");
            initialize("downloadImageDefaultFormat", "name", "String", valueName);
            File response = api.downloadImageDefaultFormat(valueName, valueIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "downloadImageDefaultFormat", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "downloadImageDefaultFormat");
        }
    }
    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageDefaultFormatInvalidIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImageDefaultFormat", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageDefaultFormat", "index");
        String valuePassword = (String)getTestValue("String", "downloadImageDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "downloadImageDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImageDefaultFormat", "storage");
        try {
            valueIndex = (Integer)invalidizeTestValue("Integer", valueIndex, "downloadImageDefaultFormat", "index");
            initialize("downloadImageDefaultFormat", "index", "Integer", valueIndex);
            File response = api.downloadImageDefaultFormat(valueName, valueIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "index", "downloadImageDefaultFormat", valueIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "index", "downloadImageDefaultFormat");
        }
    }
    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageDefaultFormatInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImageDefaultFormat", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageDefaultFormat", "index");
        String valuePassword = (String)getTestValue("String", "downloadImageDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "downloadImageDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImageDefaultFormat", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadImageDefaultFormat", "password");
            initialize("downloadImageDefaultFormat", "password", "String", valuePassword);
            File response = api.downloadImageDefaultFormat(valueName, valueIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "downloadImageDefaultFormat", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "downloadImageDefaultFormat");
        }
    }
    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageDefaultFormatInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImageDefaultFormat", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageDefaultFormat", "index");
        String valuePassword = (String)getTestValue("String", "downloadImageDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "downloadImageDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImageDefaultFormat", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "downloadImageDefaultFormat", "folder");
            initialize("downloadImageDefaultFormat", "folder", "String", valueFolder);
            File response = api.downloadImageDefaultFormat(valueName, valueIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "downloadImageDefaultFormat", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "downloadImageDefaultFormat");
        }
    }
    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageDefaultFormatInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImageDefaultFormat", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageDefaultFormat", "index");
        String valuePassword = (String)getTestValue("String", "downloadImageDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "downloadImageDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImageDefaultFormat", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "downloadImageDefaultFormat", "storage");
            initialize("downloadImageDefaultFormat", "storage", "String", valueStorage);
            File response = api.downloadImageDefaultFormat(valueName, valueIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "downloadImageDefaultFormat", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "downloadImageDefaultFormat");
        }
    }
    
    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageDefaultFormatOnlineTest() throws ApiException, Exception {
        initialize("downloadImageDefaultFormatOnline", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImageDefaultFormatOnline", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageDefaultFormatOnline", "index");
        String valuePassword = (String)getTestValue("String", "downloadImageDefaultFormatOnline", "password");
        response = api.downloadImageDefaultFormatOnline(valueDocument, valueIndex, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageDefaultFormatOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImageDefaultFormatOnline", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageDefaultFormatOnline", "index");
        String valuePassword = (String)getTestValue("String", "downloadImageDefaultFormatOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "downloadImageDefaultFormatOnline", "document");
            initialize("downloadImageDefaultFormatOnline", "document", "byte[]", valueDocument);
            File response = api.downloadImageDefaultFormatOnline(valueDocument, valueIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "downloadImageDefaultFormatOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "downloadImageDefaultFormatOnline");
        }
    }
    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageDefaultFormatOnlineInvalidIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImageDefaultFormatOnline", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageDefaultFormatOnline", "index");
        String valuePassword = (String)getTestValue("String", "downloadImageDefaultFormatOnline", "password");
        try {
            valueIndex = (Integer)invalidizeTestValue("Integer", valueIndex, "downloadImageDefaultFormatOnline", "index");
            initialize("downloadImageDefaultFormatOnline", "index", "Integer", valueIndex);
            File response = api.downloadImageDefaultFormatOnline(valueDocument, valueIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "index", "downloadImageDefaultFormatOnline", valueIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "index", "downloadImageDefaultFormatOnline");
        }
    }
    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageDefaultFormatOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImageDefaultFormatOnline", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageDefaultFormatOnline", "index");
        String valuePassword = (String)getTestValue("String", "downloadImageDefaultFormatOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadImageDefaultFormatOnline", "password");
            initialize("downloadImageDefaultFormatOnline", "password", "String", valuePassword);
            File response = api.downloadImageDefaultFormatOnline(valueDocument, valueIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "downloadImageDefaultFormatOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "downloadImageDefaultFormatOnline");
        }
    }
    
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageOnlineTest() throws ApiException, Exception {
        initialize("downloadImageOnline", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImageOnline", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageOnline", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImageOnline", "format");
        String valuePassword = (String)getTestValue("String", "downloadImageOnline", "password");
        response = api.downloadImageOnline(valueDocument, valueIndex, valueFormat, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImageOnline", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageOnline", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImageOnline", "format");
        String valuePassword = (String)getTestValue("String", "downloadImageOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "downloadImageOnline", "document");
            initialize("downloadImageOnline", "document", "byte[]", valueDocument);
            File response = api.downloadImageOnline(valueDocument, valueIndex, valueFormat, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "downloadImageOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "downloadImageOnline");
        }
    }
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageOnlineInvalidIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImageOnline", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageOnline", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImageOnline", "format");
        String valuePassword = (String)getTestValue("String", "downloadImageOnline", "password");
        try {
            valueIndex = (Integer)invalidizeTestValue("Integer", valueIndex, "downloadImageOnline", "index");
            initialize("downloadImageOnline", "index", "Integer", valueIndex);
            File response = api.downloadImageOnline(valueDocument, valueIndex, valueFormat, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "index", "downloadImageOnline", valueIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "index", "downloadImageOnline");
        }
    }
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageOnlineInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImageOnline", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageOnline", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImageOnline", "format");
        String valuePassword = (String)getTestValue("String", "downloadImageOnline", "password");
        try {
            valueFormat = (ImageExportFormat)invalidizeTestValue("ImageExportFormat", valueFormat, "downloadImageOnline", "format");
            initialize("downloadImageOnline", "format", "ImageExportFormat", valueFormat);
            File response = api.downloadImageOnline(valueDocument, valueIndex, valueFormat, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ImageExportFormat", "format", "downloadImageOnline", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("ImageExportFormat", "format", "downloadImageOnline");
        }
    }
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImageOnline", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageOnline", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImageOnline", "format");
        String valuePassword = (String)getTestValue("String", "downloadImageOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadImageOnline", "password");
            initialize("downloadImageOnline", "password", "String", valuePassword);
            File response = api.downloadImageOnline(valueDocument, valueIndex, valueFormat, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "downloadImageOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "downloadImageOnline");
        }
    }
    
    /**
     * Get all presentation images in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesTest() throws ApiException, Exception {
        initialize("downloadImages", null, null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "downloadImages", "name");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImages", "format");
        String valuePassword = (String)getTestValue("String", "downloadImages", "password");
        String valueFolder = (String)getTestValue("String", "downloadImages", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImages", "storage");
        response = api.downloadImages(valueName, valueFormat, valuePassword, valueFolder, valueStorage);
        assertTrue(response.isFile());
    }

    /**
     * Get all presentation images in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImages", "name");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImages", "format");
        String valuePassword = (String)getTestValue("String", "downloadImages", "password");
        String valueFolder = (String)getTestValue("String", "downloadImages", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImages", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "downloadImages", "name");
            initialize("downloadImages", "name", "String", valueName);
            File response = api.downloadImages(valueName, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "downloadImages", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "downloadImages");
        }
    }
    /**
     * Get all presentation images in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImages", "name");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImages", "format");
        String valuePassword = (String)getTestValue("String", "downloadImages", "password");
        String valueFolder = (String)getTestValue("String", "downloadImages", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImages", "storage");
        try {
            valueFormat = (ImageExportFormat)invalidizeTestValue("ImageExportFormat", valueFormat, "downloadImages", "format");
            initialize("downloadImages", "format", "ImageExportFormat", valueFormat);
            File response = api.downloadImages(valueName, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ImageExportFormat", "format", "downloadImages", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("ImageExportFormat", "format", "downloadImages");
        }
    }
    /**
     * Get all presentation images in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImages", "name");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImages", "format");
        String valuePassword = (String)getTestValue("String", "downloadImages", "password");
        String valueFolder = (String)getTestValue("String", "downloadImages", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImages", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadImages", "password");
            initialize("downloadImages", "password", "String", valuePassword);
            File response = api.downloadImages(valueName, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "downloadImages", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "downloadImages");
        }
    }
    /**
     * Get all presentation images in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImages", "name");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImages", "format");
        String valuePassword = (String)getTestValue("String", "downloadImages", "password");
        String valueFolder = (String)getTestValue("String", "downloadImages", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImages", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "downloadImages", "folder");
            initialize("downloadImages", "folder", "String", valueFolder);
            File response = api.downloadImages(valueName, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "downloadImages", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "downloadImages");
        }
    }
    /**
     * Get all presentation images in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImages", "name");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImages", "format");
        String valuePassword = (String)getTestValue("String", "downloadImages", "password");
        String valueFolder = (String)getTestValue("String", "downloadImages", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImages", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "downloadImages", "storage");
            initialize("downloadImages", "storage", "String", valueStorage);
            File response = api.downloadImages(valueName, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "downloadImages", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "downloadImages");
        }
    }
    
    /**
     * Get all presentation images.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesDefaultFormatTest() throws ApiException, Exception {
        initialize("downloadImagesDefaultFormat", null, null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "downloadImagesDefaultFormat", "name");
        String valuePassword = (String)getTestValue("String", "downloadImagesDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "downloadImagesDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImagesDefaultFormat", "storage");
        response = api.downloadImagesDefaultFormat(valueName, valuePassword, valueFolder, valueStorage);
        assertTrue(response.isFile());
    }

    /**
     * Get all presentation images.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesDefaultFormatInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImagesDefaultFormat", "name");
        String valuePassword = (String)getTestValue("String", "downloadImagesDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "downloadImagesDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImagesDefaultFormat", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "downloadImagesDefaultFormat", "name");
            initialize("downloadImagesDefaultFormat", "name", "String", valueName);
            File response = api.downloadImagesDefaultFormat(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "downloadImagesDefaultFormat", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "downloadImagesDefaultFormat");
        }
    }
    /**
     * Get all presentation images.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesDefaultFormatInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImagesDefaultFormat", "name");
        String valuePassword = (String)getTestValue("String", "downloadImagesDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "downloadImagesDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImagesDefaultFormat", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadImagesDefaultFormat", "password");
            initialize("downloadImagesDefaultFormat", "password", "String", valuePassword);
            File response = api.downloadImagesDefaultFormat(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "downloadImagesDefaultFormat", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "downloadImagesDefaultFormat");
        }
    }
    /**
     * Get all presentation images.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesDefaultFormatInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImagesDefaultFormat", "name");
        String valuePassword = (String)getTestValue("String", "downloadImagesDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "downloadImagesDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImagesDefaultFormat", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "downloadImagesDefaultFormat", "folder");
            initialize("downloadImagesDefaultFormat", "folder", "String", valueFolder);
            File response = api.downloadImagesDefaultFormat(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "downloadImagesDefaultFormat", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "downloadImagesDefaultFormat");
        }
    }
    /**
     * Get all presentation images.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesDefaultFormatInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImagesDefaultFormat", "name");
        String valuePassword = (String)getTestValue("String", "downloadImagesDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "downloadImagesDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImagesDefaultFormat", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "downloadImagesDefaultFormat", "storage");
            initialize("downloadImagesDefaultFormat", "storage", "String", valueStorage);
            File response = api.downloadImagesDefaultFormat(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "downloadImagesDefaultFormat", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "downloadImagesDefaultFormat");
        }
    }
    
    /**
     * Get all presentation images.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesDefaultFormatOnlineTest() throws ApiException, Exception {
        initialize("downloadImagesDefaultFormatOnline", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImagesDefaultFormatOnline", "document");
        String valuePassword = (String)getTestValue("String", "downloadImagesDefaultFormatOnline", "password");
        response = api.downloadImagesDefaultFormatOnline(valueDocument, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Get all presentation images.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesDefaultFormatOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImagesDefaultFormatOnline", "document");
        String valuePassword = (String)getTestValue("String", "downloadImagesDefaultFormatOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "downloadImagesDefaultFormatOnline", "document");
            initialize("downloadImagesDefaultFormatOnline", "document", "byte[]", valueDocument);
            File response = api.downloadImagesDefaultFormatOnline(valueDocument, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "downloadImagesDefaultFormatOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "downloadImagesDefaultFormatOnline");
        }
    }
    /**
     * Get all presentation images.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesDefaultFormatOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImagesDefaultFormatOnline", "document");
        String valuePassword = (String)getTestValue("String", "downloadImagesDefaultFormatOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadImagesDefaultFormatOnline", "password");
            initialize("downloadImagesDefaultFormatOnline", "password", "String", valuePassword);
            File response = api.downloadImagesDefaultFormatOnline(valueDocument, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "downloadImagesDefaultFormatOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "downloadImagesDefaultFormatOnline");
        }
    }
    
    /**
     * Get all presentation images in specified format. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesOnlineTest() throws ApiException, Exception {
        initialize("downloadImagesOnline", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImagesOnline", "document");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImagesOnline", "format");
        String valuePassword = (String)getTestValue("String", "downloadImagesOnline", "password");
        response = api.downloadImagesOnline(valueDocument, valueFormat, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Get all presentation images in specified format. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImagesOnline", "document");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImagesOnline", "format");
        String valuePassword = (String)getTestValue("String", "downloadImagesOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "downloadImagesOnline", "document");
            initialize("downloadImagesOnline", "document", "byte[]", valueDocument);
            File response = api.downloadImagesOnline(valueDocument, valueFormat, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "downloadImagesOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "downloadImagesOnline");
        }
    }
    /**
     * Get all presentation images in specified format. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesOnlineInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImagesOnline", "document");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImagesOnline", "format");
        String valuePassword = (String)getTestValue("String", "downloadImagesOnline", "password");
        try {
            valueFormat = (ImageExportFormat)invalidizeTestValue("ImageExportFormat", valueFormat, "downloadImagesOnline", "format");
            initialize("downloadImagesOnline", "format", "ImageExportFormat", valueFormat);
            File response = api.downloadImagesOnline(valueDocument, valueFormat, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ImageExportFormat", "format", "downloadImagesOnline", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("ImageExportFormat", "format", "downloadImagesOnline");
        }
    }
    /**
     * Get all presentation images in specified format. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImagesOnline", "document");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImagesOnline", "format");
        String valuePassword = (String)getTestValue("String", "downloadImagesOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadImagesOnline", "password");
            initialize("downloadImagesOnline", "password", "String", valuePassword);
            File response = api.downloadImagesOnline(valueDocument, valueFormat, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "downloadImagesOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "downloadImagesOnline");
        }
    }
    
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideTest() throws ApiException, Exception {
        initialize("downloadNotesSlide", null, null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "downloadNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlide", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlide", "fontsFolder");
        response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlide", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlide", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "downloadNotesSlide", "name");
            initialize("downloadNotesSlide", "name", "String", valueName);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "downloadNotesSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "downloadNotesSlide");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlide", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlide", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "downloadNotesSlide", "slideIndex");
            initialize("downloadNotesSlide", "slideIndex", "Integer", valueSlideIndex);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "downloadNotesSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "downloadNotesSlide");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlide", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlide", "fontsFolder");
        try {
            valueFormat = (NotesSlideExportFormat)invalidizeTestValue("NotesSlideExportFormat", valueFormat, "downloadNotesSlide", "format");
            initialize("downloadNotesSlide", "format", "NotesSlideExportFormat", valueFormat);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "NotesSlideExportFormat", "format", "downloadNotesSlide", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("NotesSlideExportFormat", "format", "downloadNotesSlide");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlide", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlide", "fontsFolder");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "downloadNotesSlide", "width");
            initialize("downloadNotesSlide", "width", "Integer", valueWidth);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "width", "downloadNotesSlide", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "width", "downloadNotesSlide");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlide", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlide", "fontsFolder");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "downloadNotesSlide", "height");
            initialize("downloadNotesSlide", "height", "Integer", valueHeight);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "height", "downloadNotesSlide", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "height", "downloadNotesSlide");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlide", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlide", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadNotesSlide", "password");
            initialize("downloadNotesSlide", "password", "String", valuePassword);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "downloadNotesSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "downloadNotesSlide");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlide", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlide", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "downloadNotesSlide", "folder");
            initialize("downloadNotesSlide", "folder", "String", valueFolder);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "downloadNotesSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "downloadNotesSlide");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlide", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlide", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "downloadNotesSlide", "storage");
            initialize("downloadNotesSlide", "storage", "String", valueStorage);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "downloadNotesSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "downloadNotesSlide");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlide", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlide", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "downloadNotesSlide", "fontsFolder");
            initialize("downloadNotesSlide", "fontsFolder", "String", valueFontsFolder);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontsFolder", "downloadNotesSlide", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontsFolder", "downloadNotesSlide");
        }
    }
    
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideOnlineTest() throws ApiException, Exception {
        initialize("downloadNotesSlideOnline", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadNotesSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideOnline", "fontsFolder");
        response = api.downloadNotesSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadNotesSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideOnline", "fontsFolder");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "downloadNotesSlideOnline", "document");
            initialize("downloadNotesSlideOnline", "document", "byte[]", valueDocument);
            File response = api.downloadNotesSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "downloadNotesSlideOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "downloadNotesSlideOnline");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideOnlineInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadNotesSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideOnline", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "downloadNotesSlideOnline", "slideIndex");
            initialize("downloadNotesSlideOnline", "slideIndex", "Integer", valueSlideIndex);
            File response = api.downloadNotesSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "downloadNotesSlideOnline", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "downloadNotesSlideOnline");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideOnlineInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadNotesSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideOnline", "fontsFolder");
        try {
            valueFormat = (NotesSlideExportFormat)invalidizeTestValue("NotesSlideExportFormat", valueFormat, "downloadNotesSlideOnline", "format");
            initialize("downloadNotesSlideOnline", "format", "NotesSlideExportFormat", valueFormat);
            File response = api.downloadNotesSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "NotesSlideExportFormat", "format", "downloadNotesSlideOnline", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("NotesSlideExportFormat", "format", "downloadNotesSlideOnline");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideOnlineInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadNotesSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideOnline", "fontsFolder");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "downloadNotesSlideOnline", "width");
            initialize("downloadNotesSlideOnline", "width", "Integer", valueWidth);
            File response = api.downloadNotesSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "width", "downloadNotesSlideOnline", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "width", "downloadNotesSlideOnline");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideOnlineInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadNotesSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideOnline", "fontsFolder");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "downloadNotesSlideOnline", "height");
            initialize("downloadNotesSlideOnline", "height", "Integer", valueHeight);
            File response = api.downloadNotesSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "height", "downloadNotesSlideOnline", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "height", "downloadNotesSlideOnline");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadNotesSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideOnline", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadNotesSlideOnline", "password");
            initialize("downloadNotesSlideOnline", "password", "String", valuePassword);
            File response = api.downloadNotesSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "downloadNotesSlideOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "downloadNotesSlideOnline");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideOnlineInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadNotesSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideOnline", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "downloadNotesSlideOnline", "fontsFolder");
            initialize("downloadNotesSlideOnline", "fontsFolder", "String", valueFontsFolder);
            File response = api.downloadNotesSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontsFolder", "downloadNotesSlideOnline", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontsFolder", "downloadNotesSlideOnline");
        }
    }
    
    /**
     * Convert Mathematical Text to MathML Format
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPortionAsMathMlTest() throws ApiException, Exception {
        initialize("downloadPortionAsMathMl", null, null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "downloadPortionAsMathMl", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "portionIndex");
        String valuePassword = (String)getTestValue("String", "downloadPortionAsMathMl", "password");
        String valueFolder = (String)getTestValue("String", "downloadPortionAsMathMl", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPortionAsMathMl", "storage");
        response = api.downloadPortionAsMathMl(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
        assertTrue(response.isFile());
    }

    /**
     * Convert Mathematical Text to MathML Format
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPortionAsMathMlInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadPortionAsMathMl", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "portionIndex");
        String valuePassword = (String)getTestValue("String", "downloadPortionAsMathMl", "password");
        String valueFolder = (String)getTestValue("String", "downloadPortionAsMathMl", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPortionAsMathMl", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "downloadPortionAsMathMl", "name");
            initialize("downloadPortionAsMathMl", "name", "String", valueName);
            File response = api.downloadPortionAsMathMl(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "downloadPortionAsMathMl", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "downloadPortionAsMathMl");
        }
    }
    /**
     * Convert Mathematical Text to MathML Format
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPortionAsMathMlInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadPortionAsMathMl", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "portionIndex");
        String valuePassword = (String)getTestValue("String", "downloadPortionAsMathMl", "password");
        String valueFolder = (String)getTestValue("String", "downloadPortionAsMathMl", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPortionAsMathMl", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "downloadPortionAsMathMl", "slideIndex");
            initialize("downloadPortionAsMathMl", "slideIndex", "Integer", valueSlideIndex);
            File response = api.downloadPortionAsMathMl(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "downloadPortionAsMathMl", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "downloadPortionAsMathMl");
        }
    }
    /**
     * Convert Mathematical Text to MathML Format
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPortionAsMathMlInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadPortionAsMathMl", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "portionIndex");
        String valuePassword = (String)getTestValue("String", "downloadPortionAsMathMl", "password");
        String valueFolder = (String)getTestValue("String", "downloadPortionAsMathMl", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPortionAsMathMl", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "downloadPortionAsMathMl", "shapeIndex");
            initialize("downloadPortionAsMathMl", "shapeIndex", "Integer", valueShapeIndex);
            File response = api.downloadPortionAsMathMl(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "downloadPortionAsMathMl", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "downloadPortionAsMathMl");
        }
    }
    /**
     * Convert Mathematical Text to MathML Format
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPortionAsMathMlInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadPortionAsMathMl", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "portionIndex");
        String valuePassword = (String)getTestValue("String", "downloadPortionAsMathMl", "password");
        String valueFolder = (String)getTestValue("String", "downloadPortionAsMathMl", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPortionAsMathMl", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "downloadPortionAsMathMl", "paragraphIndex");
            initialize("downloadPortionAsMathMl", "paragraphIndex", "Integer", valueParagraphIndex);
            File response = api.downloadPortionAsMathMl(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "downloadPortionAsMathMl", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "downloadPortionAsMathMl");
        }
    }
    /**
     * Convert Mathematical Text to MathML Format
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPortionAsMathMlInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadPortionAsMathMl", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "portionIndex");
        String valuePassword = (String)getTestValue("String", "downloadPortionAsMathMl", "password");
        String valueFolder = (String)getTestValue("String", "downloadPortionAsMathMl", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPortionAsMathMl", "storage");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "downloadPortionAsMathMl", "portionIndex");
            initialize("downloadPortionAsMathMl", "portionIndex", "Integer", valuePortionIndex);
            File response = api.downloadPortionAsMathMl(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "portionIndex", "downloadPortionAsMathMl", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "portionIndex", "downloadPortionAsMathMl");
        }
    }
    /**
     * Convert Mathematical Text to MathML Format
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPortionAsMathMlInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadPortionAsMathMl", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "portionIndex");
        String valuePassword = (String)getTestValue("String", "downloadPortionAsMathMl", "password");
        String valueFolder = (String)getTestValue("String", "downloadPortionAsMathMl", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPortionAsMathMl", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadPortionAsMathMl", "password");
            initialize("downloadPortionAsMathMl", "password", "String", valuePassword);
            File response = api.downloadPortionAsMathMl(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "downloadPortionAsMathMl", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "downloadPortionAsMathMl");
        }
    }
    /**
     * Convert Mathematical Text to MathML Format
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPortionAsMathMlInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadPortionAsMathMl", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "portionIndex");
        String valuePassword = (String)getTestValue("String", "downloadPortionAsMathMl", "password");
        String valueFolder = (String)getTestValue("String", "downloadPortionAsMathMl", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPortionAsMathMl", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "downloadPortionAsMathMl", "folder");
            initialize("downloadPortionAsMathMl", "folder", "String", valueFolder);
            File response = api.downloadPortionAsMathMl(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "downloadPortionAsMathMl", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "downloadPortionAsMathMl");
        }
    }
    /**
     * Convert Mathematical Text to MathML Format
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPortionAsMathMlInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadPortionAsMathMl", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "downloadPortionAsMathMl", "portionIndex");
        String valuePassword = (String)getTestValue("String", "downloadPortionAsMathMl", "password");
        String valueFolder = (String)getTestValue("String", "downloadPortionAsMathMl", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPortionAsMathMl", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "downloadPortionAsMathMl", "storage");
            initialize("downloadPortionAsMathMl", "storage", "String", valueStorage);
            File response = api.downloadPortionAsMathMl(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "downloadPortionAsMathMl", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "downloadPortionAsMathMl");
        }
    }
    
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPresentationTest() throws ApiException, Exception {
        initialize("downloadPresentation", null, null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "downloadPresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "downloadPresentation", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadPresentation", "options");
        String valuePassword = (String)getTestValue("String", "downloadPresentation", "password");
        String valueFolder = (String)getTestValue("String", "downloadPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadPresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "downloadPresentation", "slides");
        response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
        assertTrue(response.isFile());
    }

    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPresentationInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadPresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "downloadPresentation", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadPresentation", "options");
        String valuePassword = (String)getTestValue("String", "downloadPresentation", "password");
        String valueFolder = (String)getTestValue("String", "downloadPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadPresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "downloadPresentation", "slides");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "downloadPresentation", "name");
            initialize("downloadPresentation", "name", "String", valueName);
            File response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "downloadPresentation", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "downloadPresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPresentationInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadPresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "downloadPresentation", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadPresentation", "options");
        String valuePassword = (String)getTestValue("String", "downloadPresentation", "password");
        String valueFolder = (String)getTestValue("String", "downloadPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadPresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "downloadPresentation", "slides");
        try {
            valueFormat = (ExportFormat)invalidizeTestValue("ExportFormat", valueFormat, "downloadPresentation", "format");
            initialize("downloadPresentation", "format", "ExportFormat", valueFormat);
            File response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ExportFormat", "format", "downloadPresentation", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("ExportFormat", "format", "downloadPresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPresentationInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadPresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "downloadPresentation", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadPresentation", "options");
        String valuePassword = (String)getTestValue("String", "downloadPresentation", "password");
        String valueFolder = (String)getTestValue("String", "downloadPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadPresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "downloadPresentation", "slides");
        try {
            valueOptions = (ExportOptions)invalidizeTestValue("ExportOptions", valueOptions, "downloadPresentation", "options");
            initialize("downloadPresentation", "options", "ExportOptions", valueOptions);
            File response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ExportOptions", "options", "downloadPresentation", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("ExportOptions", "options", "downloadPresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPresentationInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadPresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "downloadPresentation", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadPresentation", "options");
        String valuePassword = (String)getTestValue("String", "downloadPresentation", "password");
        String valueFolder = (String)getTestValue("String", "downloadPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadPresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "downloadPresentation", "slides");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadPresentation", "password");
            initialize("downloadPresentation", "password", "String", valuePassword);
            File response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "downloadPresentation", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "downloadPresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPresentationInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadPresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "downloadPresentation", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadPresentation", "options");
        String valuePassword = (String)getTestValue("String", "downloadPresentation", "password");
        String valueFolder = (String)getTestValue("String", "downloadPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadPresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "downloadPresentation", "slides");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "downloadPresentation", "folder");
            initialize("downloadPresentation", "folder", "String", valueFolder);
            File response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "downloadPresentation", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "downloadPresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPresentationInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadPresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "downloadPresentation", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadPresentation", "options");
        String valuePassword = (String)getTestValue("String", "downloadPresentation", "password");
        String valueFolder = (String)getTestValue("String", "downloadPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadPresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "downloadPresentation", "slides");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "downloadPresentation", "storage");
            initialize("downloadPresentation", "storage", "String", valueStorage);
            File response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "downloadPresentation", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "downloadPresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPresentationInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadPresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "downloadPresentation", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadPresentation", "options");
        String valuePassword = (String)getTestValue("String", "downloadPresentation", "password");
        String valueFolder = (String)getTestValue("String", "downloadPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadPresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "downloadPresentation", "slides");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "downloadPresentation", "fontsFolder");
            initialize("downloadPresentation", "fontsFolder", "String", valueFontsFolder);
            File response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontsFolder", "downloadPresentation", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontsFolder", "downloadPresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPresentationInvalidSlidesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadPresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "downloadPresentation", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadPresentation", "options");
        String valuePassword = (String)getTestValue("String", "downloadPresentation", "password");
        String valueFolder = (String)getTestValue("String", "downloadPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadPresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "downloadPresentation", "slides");
        try {
            valueSlides = (List<Integer>)invalidizeTestValue("List<Integer>", valueSlides, "downloadPresentation", "slides");
            initialize("downloadPresentation", "slides", "List<Integer>", valueSlides);
            File response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "List<Integer>", "slides", "downloadPresentation", valueSlides);
        }
        if (needAssertResponse) {
            assertResponse("List<Integer>", "slides", "downloadPresentation");
        }
    }
    
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeTest() throws ApiException, Exception {
        initialize("downloadShape", null, null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadShape", "subShape");
        response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
        assertTrue(response.isFile());
    }

    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadShape", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "downloadShape", "name");
            initialize("downloadShape", "name", "String", valueName);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "downloadShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "downloadShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadShape", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "downloadShape", "slideIndex");
            initialize("downloadShape", "slideIndex", "Integer", valueSlideIndex);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "downloadShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "downloadShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadShape", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "downloadShape", "shapeIndex");
            initialize("downloadShape", "shapeIndex", "Integer", valueShapeIndex);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "downloadShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "downloadShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadShape", "subShape");
        try {
            valueFormat = (ShapeExportFormat)invalidizeTestValue("ShapeExportFormat", valueFormat, "downloadShape", "format");
            initialize("downloadShape", "format", "ShapeExportFormat", valueFormat);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ShapeExportFormat", "format", "downloadShape", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("ShapeExportFormat", "format", "downloadShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadShape", "subShape");
        try {
            valueOptions = (IShapeExportOptions)invalidizeTestValue("IShapeExportOptions", valueOptions, "downloadShape", "options");
            initialize("downloadShape", "options", "IShapeExportOptions", valueOptions);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "IShapeExportOptions", "options", "downloadShape", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("IShapeExportOptions", "options", "downloadShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeInvalidScaleXTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadShape", "subShape");
        try {
            valueScaleX = (Double)invalidizeTestValue("Double", valueScaleX, "downloadShape", "scaleX");
            initialize("downloadShape", "scaleX", "Double", valueScaleX);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Double", "scaleX", "downloadShape", valueScaleX);
        }
        if (needAssertResponse) {
            assertResponse("Double", "scaleX", "downloadShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeInvalidScaleYTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadShape", "subShape");
        try {
            valueScaleY = (Double)invalidizeTestValue("Double", valueScaleY, "downloadShape", "scaleY");
            initialize("downloadShape", "scaleY", "Double", valueScaleY);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Double", "scaleY", "downloadShape", valueScaleY);
        }
        if (needAssertResponse) {
            assertResponse("Double", "scaleY", "downloadShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeInvalidBoundsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadShape", "subShape");
        try {
            valueBounds = (ShapeThumbnailBounds)invalidizeTestValue("ShapeThumbnailBounds", valueBounds, "downloadShape", "bounds");
            initialize("downloadShape", "bounds", "ShapeThumbnailBounds", valueBounds);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ShapeThumbnailBounds", "bounds", "downloadShape", valueBounds);
        }
        if (needAssertResponse) {
            assertResponse("ShapeThumbnailBounds", "bounds", "downloadShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadShape", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadShape", "password");
            initialize("downloadShape", "password", "String", valuePassword);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "downloadShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "downloadShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadShape", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "downloadShape", "folder");
            initialize("downloadShape", "folder", "String", valueFolder);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "downloadShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "downloadShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadShape", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "downloadShape", "storage");
            initialize("downloadShape", "storage", "String", valueStorage);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "downloadShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "downloadShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadShape", "subShape");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "downloadShape", "fontsFolder");
            initialize("downloadShape", "fontsFolder", "String", valueFontsFolder);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontsFolder", "downloadShape", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontsFolder", "downloadShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadShape", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "downloadShape", "subShape");
            initialize("downloadShape", "subShape", "String", valueSubShape);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "downloadShape", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "downloadShape");
        }
    }
    
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeOnlineTest() throws ApiException, Exception {
        initialize("downloadShapeOnline", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShapeOnline", "format");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShapeOnline", "fontsFolder");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShapeOnline", "options");
        response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder, valueOptions);
        assertTrue(response.isFile());
    }

    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShapeOnline", "format");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShapeOnline", "fontsFolder");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShapeOnline", "options");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "downloadShapeOnline", "document");
            initialize("downloadShapeOnline", "document", "byte[]", valueDocument);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "downloadShapeOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "downloadShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeOnlineInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShapeOnline", "format");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShapeOnline", "fontsFolder");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShapeOnline", "options");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "downloadShapeOnline", "slideIndex");
            initialize("downloadShapeOnline", "slideIndex", "Integer", valueSlideIndex);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "downloadShapeOnline", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "downloadShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeOnlineInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShapeOnline", "format");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShapeOnline", "fontsFolder");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShapeOnline", "options");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "downloadShapeOnline", "shapeIndex");
            initialize("downloadShapeOnline", "shapeIndex", "Integer", valueShapeIndex);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "downloadShapeOnline", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "downloadShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeOnlineInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShapeOnline", "format");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShapeOnline", "fontsFolder");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShapeOnline", "options");
        try {
            valueFormat = (ShapeExportFormat)invalidizeTestValue("ShapeExportFormat", valueFormat, "downloadShapeOnline", "format");
            initialize("downloadShapeOnline", "format", "ShapeExportFormat", valueFormat);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ShapeExportFormat", "format", "downloadShapeOnline", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("ShapeExportFormat", "format", "downloadShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeOnlineInvalidScaleXTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShapeOnline", "format");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShapeOnline", "fontsFolder");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShapeOnline", "options");
        try {
            valueScaleX = (Double)invalidizeTestValue("Double", valueScaleX, "downloadShapeOnline", "scaleX");
            initialize("downloadShapeOnline", "scaleX", "Double", valueScaleX);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Double", "scaleX", "downloadShapeOnline", valueScaleX);
        }
        if (needAssertResponse) {
            assertResponse("Double", "scaleX", "downloadShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeOnlineInvalidScaleYTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShapeOnline", "format");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShapeOnline", "fontsFolder");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShapeOnline", "options");
        try {
            valueScaleY = (Double)invalidizeTestValue("Double", valueScaleY, "downloadShapeOnline", "scaleY");
            initialize("downloadShapeOnline", "scaleY", "Double", valueScaleY);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Double", "scaleY", "downloadShapeOnline", valueScaleY);
        }
        if (needAssertResponse) {
            assertResponse("Double", "scaleY", "downloadShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeOnlineInvalidBoundsTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShapeOnline", "format");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShapeOnline", "fontsFolder");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShapeOnline", "options");
        try {
            valueBounds = (ShapeThumbnailBounds)invalidizeTestValue("ShapeThumbnailBounds", valueBounds, "downloadShapeOnline", "bounds");
            initialize("downloadShapeOnline", "bounds", "ShapeThumbnailBounds", valueBounds);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ShapeThumbnailBounds", "bounds", "downloadShapeOnline", valueBounds);
        }
        if (needAssertResponse) {
            assertResponse("ShapeThumbnailBounds", "bounds", "downloadShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShapeOnline", "format");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShapeOnline", "fontsFolder");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShapeOnline", "options");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadShapeOnline", "password");
            initialize("downloadShapeOnline", "password", "String", valuePassword);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "downloadShapeOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "downloadShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeOnlineInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShapeOnline", "format");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShapeOnline", "fontsFolder");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShapeOnline", "options");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "downloadShapeOnline", "storage");
            initialize("downloadShapeOnline", "storage", "String", valueStorage);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "downloadShapeOnline", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "downloadShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeOnlineInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShapeOnline", "format");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShapeOnline", "fontsFolder");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShapeOnline", "options");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "downloadShapeOnline", "fontsFolder");
            initialize("downloadShapeOnline", "fontsFolder", "String", valueFontsFolder);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontsFolder", "downloadShapeOnline", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontsFolder", "downloadShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeOnlineInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShapeOnline", "format");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShapeOnline", "fontsFolder");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShapeOnline", "options");
        try {
            valueOptions = (IShapeExportOptions)invalidizeTestValue("IShapeExportOptions", valueOptions, "downloadShapeOnline", "options");
            initialize("downloadShapeOnline", "options", "IShapeExportOptions", valueOptions);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "IShapeExportOptions", "options", "downloadShapeOnline", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("IShapeExportOptions", "options", "downloadShapeOnline");
        }
    }
    
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideTest() throws ApiException, Exception {
        initialize("downloadSlide", null, null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "downloadSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlide", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlide", "fontsFolder");
        response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlide", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlide", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "downloadSlide", "name");
            initialize("downloadSlide", "name", "String", valueName);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "downloadSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "downloadSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlide", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlide", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "downloadSlide", "slideIndex");
            initialize("downloadSlide", "slideIndex", "Integer", valueSlideIndex);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "downloadSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "downloadSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlide", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlide", "fontsFolder");
        try {
            valueFormat = (SlideExportFormat)invalidizeTestValue("SlideExportFormat", valueFormat, "downloadSlide", "format");
            initialize("downloadSlide", "format", "SlideExportFormat", valueFormat);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SlideExportFormat", "format", "downloadSlide", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("SlideExportFormat", "format", "downloadSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlide", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlide", "fontsFolder");
        try {
            valueOptions = (ExportOptions)invalidizeTestValue("ExportOptions", valueOptions, "downloadSlide", "options");
            initialize("downloadSlide", "options", "ExportOptions", valueOptions);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ExportOptions", "options", "downloadSlide", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("ExportOptions", "options", "downloadSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlide", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlide", "fontsFolder");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "downloadSlide", "width");
            initialize("downloadSlide", "width", "Integer", valueWidth);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "width", "downloadSlide", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "width", "downloadSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlide", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlide", "fontsFolder");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "downloadSlide", "height");
            initialize("downloadSlide", "height", "Integer", valueHeight);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "height", "downloadSlide", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "height", "downloadSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlide", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlide", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadSlide", "password");
            initialize("downloadSlide", "password", "String", valuePassword);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "downloadSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "downloadSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlide", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlide", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "downloadSlide", "folder");
            initialize("downloadSlide", "folder", "String", valueFolder);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "downloadSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "downloadSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlide", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlide", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "downloadSlide", "storage");
            initialize("downloadSlide", "storage", "String", valueStorage);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "downloadSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "downloadSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlide", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlide", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "downloadSlide", "fontsFolder");
            initialize("downloadSlide", "fontsFolder", "String", valueFontsFolder);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontsFolder", "downloadSlide", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontsFolder", "downloadSlide");
        }
    }
    
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideOnlineTest() throws ApiException, Exception {
        initialize("downloadSlideOnline", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlideOnline", "fontsFolder");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlideOnline", "options");
        response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder, valueOptions);
        assertTrue(response.isFile());
    }

    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlideOnline", "fontsFolder");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlideOnline", "options");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "downloadSlideOnline", "document");
            initialize("downloadSlideOnline", "document", "byte[]", valueDocument);
            File response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "downloadSlideOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "downloadSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideOnlineInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlideOnline", "fontsFolder");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlideOnline", "options");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "downloadSlideOnline", "slideIndex");
            initialize("downloadSlideOnline", "slideIndex", "Integer", valueSlideIndex);
            File response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "downloadSlideOnline", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "downloadSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideOnlineInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlideOnline", "fontsFolder");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlideOnline", "options");
        try {
            valueFormat = (SlideExportFormat)invalidizeTestValue("SlideExportFormat", valueFormat, "downloadSlideOnline", "format");
            initialize("downloadSlideOnline", "format", "SlideExportFormat", valueFormat);
            File response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SlideExportFormat", "format", "downloadSlideOnline", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("SlideExportFormat", "format", "downloadSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideOnlineInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlideOnline", "fontsFolder");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlideOnline", "options");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "downloadSlideOnline", "width");
            initialize("downloadSlideOnline", "width", "Integer", valueWidth);
            File response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "width", "downloadSlideOnline", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "width", "downloadSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideOnlineInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlideOnline", "fontsFolder");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlideOnline", "options");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "downloadSlideOnline", "height");
            initialize("downloadSlideOnline", "height", "Integer", valueHeight);
            File response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "height", "downloadSlideOnline", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "height", "downloadSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlideOnline", "fontsFolder");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlideOnline", "options");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadSlideOnline", "password");
            initialize("downloadSlideOnline", "password", "String", valuePassword);
            File response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "downloadSlideOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "downloadSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideOnlineInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlideOnline", "fontsFolder");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlideOnline", "options");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "downloadSlideOnline", "storage");
            initialize("downloadSlideOnline", "storage", "String", valueStorage);
            File response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "downloadSlideOnline", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "downloadSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideOnlineInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlideOnline", "fontsFolder");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlideOnline", "options");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "downloadSlideOnline", "fontsFolder");
            initialize("downloadSlideOnline", "fontsFolder", "String", valueFontsFolder);
            File response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontsFolder", "downloadSlideOnline", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontsFolder", "downloadSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideOnlineInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlideOnline", "fontsFolder");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlideOnline", "options");
        try {
            valueOptions = (ExportOptions)invalidizeTestValue("ExportOptions", valueOptions, "downloadSlideOnline", "options");
            initialize("downloadSlideOnline", "options", "ExportOptions", valueOptions);
            File response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ExportOptions", "options", "downloadSlideOnline", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("ExportOptions", "options", "downloadSlideOnline");
        }
    }
    
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSpecialSlideShapeTest() throws ApiException, Exception {
        initialize("downloadSpecialSlideShape", null, null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "downloadSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "downloadSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSpecialSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadSpecialSlideShape", "subShape");
        response = api.downloadSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
        assertTrue(response.isFile());
    }

    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSpecialSlideShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "downloadSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSpecialSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadSpecialSlideShape", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "downloadSpecialSlideShape", "name");
            initialize("downloadSpecialSlideShape", "name", "String", valueName);
            File response = api.downloadSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "downloadSpecialSlideShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "downloadSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSpecialSlideShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "downloadSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSpecialSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadSpecialSlideShape", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "downloadSpecialSlideShape", "slideIndex");
            initialize("downloadSpecialSlideShape", "slideIndex", "Integer", valueSlideIndex);
            File response = api.downloadSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "downloadSpecialSlideShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "downloadSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSpecialSlideShapeInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "downloadSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSpecialSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadSpecialSlideShape", "subShape");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "downloadSpecialSlideShape", "slideType");
            initialize("downloadSpecialSlideShape", "slideType", "SpecialSlideType", valueSlideType);
            File response = api.downloadSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "downloadSpecialSlideShape", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "downloadSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSpecialSlideShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "downloadSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSpecialSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadSpecialSlideShape", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "downloadSpecialSlideShape", "shapeIndex");
            initialize("downloadSpecialSlideShape", "shapeIndex", "Integer", valueShapeIndex);
            File response = api.downloadSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "downloadSpecialSlideShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "downloadSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSpecialSlideShapeInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "downloadSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSpecialSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadSpecialSlideShape", "subShape");
        try {
            valueFormat = (ShapeExportFormat)invalidizeTestValue("ShapeExportFormat", valueFormat, "downloadSpecialSlideShape", "format");
            initialize("downloadSpecialSlideShape", "format", "ShapeExportFormat", valueFormat);
            File response = api.downloadSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ShapeExportFormat", "format", "downloadSpecialSlideShape", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("ShapeExportFormat", "format", "downloadSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSpecialSlideShapeInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "downloadSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSpecialSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadSpecialSlideShape", "subShape");
        try {
            valueOptions = (IShapeExportOptions)invalidizeTestValue("IShapeExportOptions", valueOptions, "downloadSpecialSlideShape", "options");
            initialize("downloadSpecialSlideShape", "options", "IShapeExportOptions", valueOptions);
            File response = api.downloadSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "IShapeExportOptions", "options", "downloadSpecialSlideShape", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("IShapeExportOptions", "options", "downloadSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSpecialSlideShapeInvalidScaleXTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "downloadSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSpecialSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadSpecialSlideShape", "subShape");
        try {
            valueScaleX = (Double)invalidizeTestValue("Double", valueScaleX, "downloadSpecialSlideShape", "scaleX");
            initialize("downloadSpecialSlideShape", "scaleX", "Double", valueScaleX);
            File response = api.downloadSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Double", "scaleX", "downloadSpecialSlideShape", valueScaleX);
        }
        if (needAssertResponse) {
            assertResponse("Double", "scaleX", "downloadSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSpecialSlideShapeInvalidScaleYTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "downloadSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSpecialSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadSpecialSlideShape", "subShape");
        try {
            valueScaleY = (Double)invalidizeTestValue("Double", valueScaleY, "downloadSpecialSlideShape", "scaleY");
            initialize("downloadSpecialSlideShape", "scaleY", "Double", valueScaleY);
            File response = api.downloadSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Double", "scaleY", "downloadSpecialSlideShape", valueScaleY);
        }
        if (needAssertResponse) {
            assertResponse("Double", "scaleY", "downloadSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSpecialSlideShapeInvalidBoundsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "downloadSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSpecialSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadSpecialSlideShape", "subShape");
        try {
            valueBounds = (ShapeThumbnailBounds)invalidizeTestValue("ShapeThumbnailBounds", valueBounds, "downloadSpecialSlideShape", "bounds");
            initialize("downloadSpecialSlideShape", "bounds", "ShapeThumbnailBounds", valueBounds);
            File response = api.downloadSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ShapeThumbnailBounds", "bounds", "downloadSpecialSlideShape", valueBounds);
        }
        if (needAssertResponse) {
            assertResponse("ShapeThumbnailBounds", "bounds", "downloadSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSpecialSlideShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "downloadSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSpecialSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadSpecialSlideShape", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadSpecialSlideShape", "password");
            initialize("downloadSpecialSlideShape", "password", "String", valuePassword);
            File response = api.downloadSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "downloadSpecialSlideShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "downloadSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSpecialSlideShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "downloadSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSpecialSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadSpecialSlideShape", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "downloadSpecialSlideShape", "folder");
            initialize("downloadSpecialSlideShape", "folder", "String", valueFolder);
            File response = api.downloadSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "downloadSpecialSlideShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "downloadSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSpecialSlideShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "downloadSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSpecialSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadSpecialSlideShape", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "downloadSpecialSlideShape", "storage");
            initialize("downloadSpecialSlideShape", "storage", "String", valueStorage);
            File response = api.downloadSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "downloadSpecialSlideShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "downloadSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSpecialSlideShapeInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "downloadSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSpecialSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadSpecialSlideShape", "subShape");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "downloadSpecialSlideShape", "fontsFolder");
            initialize("downloadSpecialSlideShape", "fontsFolder", "String", valueFontsFolder);
            File response = api.downloadSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontsFolder", "downloadSpecialSlideShape", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontsFolder", "downloadSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSpecialSlideShapeInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "downloadSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSpecialSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "downloadSpecialSlideShape", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "downloadSpecialSlideShape", "subShape");
            initialize("downloadSpecialSlideShape", "subShape", "String", valueSubShape);
            File response = api.downloadSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "downloadSpecialSlideShape", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "downloadSpecialSlideShape");
        }
    }
    
    /**
     * Read slide animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnimationTest() throws ApiException, Exception {
        initialize("getAnimation", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "getAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getAnimation", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getAnimation", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getAnimation", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getAnimation", "storage");
        response = api.getAnimation(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnimationInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getAnimation", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getAnimation", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getAnimation", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getAnimation", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getAnimation", "name");
            initialize("getAnimation", "name", "String", valueName);
            SlideAnimation response = api.getAnimation(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getAnimation", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getAnimation");
        }
    }
    /**
     * Read slide animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnimationInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getAnimation", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getAnimation", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getAnimation", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getAnimation", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getAnimation", "slideIndex");
            initialize("getAnimation", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.getAnimation(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getAnimation", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getAnimation");
        }
    }
    /**
     * Read slide animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnimationInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getAnimation", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getAnimation", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getAnimation", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getAnimation", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getAnimation", "shapeIndex");
            initialize("getAnimation", "shapeIndex", "Integer", valueShapeIndex);
            SlideAnimation response = api.getAnimation(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "getAnimation", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "getAnimation");
        }
    }
    /**
     * Read slide animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnimationInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getAnimation", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getAnimation", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getAnimation", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getAnimation", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getAnimation", "paragraphIndex");
            initialize("getAnimation", "paragraphIndex", "Integer", valueParagraphIndex);
            SlideAnimation response = api.getAnimation(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "getAnimation", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "getAnimation");
        }
    }
    /**
     * Read slide animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnimationInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getAnimation", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getAnimation", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getAnimation", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getAnimation", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getAnimation", "password");
            initialize("getAnimation", "password", "String", valuePassword);
            SlideAnimation response = api.getAnimation(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getAnimation", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getAnimation");
        }
    }
    /**
     * Read slide animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnimationInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getAnimation", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getAnimation", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getAnimation", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getAnimation", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getAnimation", "folder");
            initialize("getAnimation", "folder", "String", valueFolder);
            SlideAnimation response = api.getAnimation(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getAnimation", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getAnimation");
        }
    }
    /**
     * Read slide animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnimationInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getAnimation", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getAnimation", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getAnimation", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getAnimation", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getAnimation", "storage");
            initialize("getAnimation", "storage", "String", valueStorage);
            SlideAnimation response = api.getAnimation(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getAnimation", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getAnimation");
        }
    }
    
    /**
     * Get API info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApiInfoTest() throws ApiException, Exception {
        initialize("getApiInfo", null, null, null);
        ApiInfo response = null;
        response = api.getApiInfo();
        assertNotNull(response);
    }

    
    /**
     * Read slide background info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBackgroundTest() throws ApiException, Exception {
        initialize("getBackground", null, null, null);
        SlideBackground response = null;
        String valueName = (String)getTestValue("String", "getBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getBackground", "password");
        String valueFolder = (String)getTestValue("String", "getBackground", "folder");
        String valueStorage = (String)getTestValue("String", "getBackground", "storage");
        response = api.getBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide background info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBackgroundInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getBackground", "password");
        String valueFolder = (String)getTestValue("String", "getBackground", "folder");
        String valueStorage = (String)getTestValue("String", "getBackground", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getBackground", "name");
            initialize("getBackground", "name", "String", valueName);
            SlideBackground response = api.getBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getBackground", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getBackground");
        }
    }
    /**
     * Read slide background info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBackgroundInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getBackground", "password");
        String valueFolder = (String)getTestValue("String", "getBackground", "folder");
        String valueStorage = (String)getTestValue("String", "getBackground", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getBackground", "slideIndex");
            initialize("getBackground", "slideIndex", "Integer", valueSlideIndex);
            SlideBackground response = api.getBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getBackground", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getBackground");
        }
    }
    /**
     * Read slide background info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBackgroundInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getBackground", "password");
        String valueFolder = (String)getTestValue("String", "getBackground", "folder");
        String valueStorage = (String)getTestValue("String", "getBackground", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getBackground", "password");
            initialize("getBackground", "password", "String", valuePassword);
            SlideBackground response = api.getBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getBackground", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getBackground");
        }
    }
    /**
     * Read slide background info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBackgroundInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getBackground", "password");
        String valueFolder = (String)getTestValue("String", "getBackground", "folder");
        String valueStorage = (String)getTestValue("String", "getBackground", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getBackground", "folder");
            initialize("getBackground", "folder", "String", valueFolder);
            SlideBackground response = api.getBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getBackground", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getBackground");
        }
    }
    /**
     * Read slide background info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBackgroundInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getBackground", "password");
        String valueFolder = (String)getTestValue("String", "getBackground", "folder");
        String valueStorage = (String)getTestValue("String", "getBackground", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getBackground", "storage");
            initialize("getBackground", "storage", "String", valueStorage);
            SlideBackground response = api.getBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getBackground", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getBackground");
        }
    }
    
    /**
     * Read slide theme color scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getColorSchemeTest() throws ApiException, Exception {
        initialize("getColorScheme", null, null, null);
        ColorScheme response = null;
        String valueName = (String)getTestValue("String", "getColorScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getColorScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getColorScheme", "password");
        String valueFolder = (String)getTestValue("String", "getColorScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getColorScheme", "storage");
        response = api.getColorScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide theme color scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getColorSchemeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getColorScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getColorScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getColorScheme", "password");
        String valueFolder = (String)getTestValue("String", "getColorScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getColorScheme", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getColorScheme", "name");
            initialize("getColorScheme", "name", "String", valueName);
            ColorScheme response = api.getColorScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getColorScheme", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getColorScheme");
        }
    }
    /**
     * Read slide theme color scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getColorSchemeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getColorScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getColorScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getColorScheme", "password");
        String valueFolder = (String)getTestValue("String", "getColorScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getColorScheme", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getColorScheme", "slideIndex");
            initialize("getColorScheme", "slideIndex", "Integer", valueSlideIndex);
            ColorScheme response = api.getColorScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getColorScheme", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getColorScheme");
        }
    }
    /**
     * Read slide theme color scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getColorSchemeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getColorScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getColorScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getColorScheme", "password");
        String valueFolder = (String)getTestValue("String", "getColorScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getColorScheme", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getColorScheme", "password");
            initialize("getColorScheme", "password", "String", valuePassword);
            ColorScheme response = api.getColorScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getColorScheme", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getColorScheme");
        }
    }
    /**
     * Read slide theme color scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getColorSchemeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getColorScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getColorScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getColorScheme", "password");
        String valueFolder = (String)getTestValue("String", "getColorScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getColorScheme", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getColorScheme", "folder");
            initialize("getColorScheme", "folder", "String", valueFolder);
            ColorScheme response = api.getColorScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getColorScheme", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getColorScheme");
        }
    }
    /**
     * Read slide theme color scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getColorSchemeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getColorScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getColorScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getColorScheme", "password");
        String valueFolder = (String)getTestValue("String", "getColorScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getColorScheme", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getColorScheme", "storage");
            initialize("getColorScheme", "storage", "String", valueStorage);
            ColorScheme response = api.getColorScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getColorScheme", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getColorScheme");
        }
    }
    
    /**
     * Get disc usage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiscUsageTest() throws ApiException, Exception {
        initialize("getDiscUsage", null, null, null);
        DiscUsage response = null;
        String valueStorageName = (String)getTestValue("String", "getDiscUsage", "storageName");
        response = api.getDiscUsage(valueStorageName);
        assertNotNull(response);
    }

    /**
     * Get disc usage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiscUsageInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueStorageName = (String)getTestValue("String", "getDiscUsage", "storageName");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "getDiscUsage", "storageName");
            initialize("getDiscUsage", "storageName", "String", valueStorageName);
            DiscUsage response = api.getDiscUsage(valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storageName", "getDiscUsage", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("String", "storageName", "getDiscUsage");
        }
    }
    
    /**
     * Read presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentPropertiesTest() throws ApiException, Exception {
        initialize("getDocumentProperties", null, null, null);
        DocumentProperties response = null;
        String valueName = (String)getTestValue("String", "getDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "getDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "getDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getDocumentProperties", "storage");
        response = api.getDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentPropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "getDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "getDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getDocumentProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getDocumentProperties", "name");
            initialize("getDocumentProperties", "name", "String", valueName);
            DocumentProperties response = api.getDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getDocumentProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getDocumentProperties");
        }
    }
    /**
     * Read presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentPropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "getDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "getDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getDocumentProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getDocumentProperties", "password");
            initialize("getDocumentProperties", "password", "String", valuePassword);
            DocumentProperties response = api.getDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getDocumentProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getDocumentProperties");
        }
    }
    /**
     * Read presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentPropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "getDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "getDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getDocumentProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getDocumentProperties", "folder");
            initialize("getDocumentProperties", "folder", "String", valueFolder);
            DocumentProperties response = api.getDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getDocumentProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getDocumentProperties");
        }
    }
    /**
     * Read presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentPropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "getDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "getDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getDocumentProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getDocumentProperties", "storage");
            initialize("getDocumentProperties", "storage", "String", valueStorage);
            DocumentProperties response = api.getDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getDocumentProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getDocumentProperties");
        }
    }
    
    /**
     * Read presentation document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentPropertyTest() throws ApiException, Exception {
        initialize("getDocumentProperty", null, null, null);
        DocumentProperty response = null;
        String valueName = (String)getTestValue("String", "getDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "getDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "getDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "getDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "getDocumentProperty", "storage");
        response = api.getDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentPropertyInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "getDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "getDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "getDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "getDocumentProperty", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getDocumentProperty", "name");
            initialize("getDocumentProperty", "name", "String", valueName);
            DocumentProperty response = api.getDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getDocumentProperty", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getDocumentProperty");
        }
    }
    /**
     * Read presentation document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentPropertyInvalidPropertyNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "getDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "getDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "getDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "getDocumentProperty", "storage");
        try {
            valuePropertyName = (String)invalidizeTestValue("String", valuePropertyName, "getDocumentProperty", "propertyName");
            initialize("getDocumentProperty", "propertyName", "String", valuePropertyName);
            DocumentProperty response = api.getDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "propertyName", "getDocumentProperty", valuePropertyName);
        }
        if (needAssertResponse) {
            assertResponse("String", "propertyName", "getDocumentProperty");
        }
    }
    /**
     * Read presentation document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentPropertyInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "getDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "getDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "getDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "getDocumentProperty", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getDocumentProperty", "password");
            initialize("getDocumentProperty", "password", "String", valuePassword);
            DocumentProperty response = api.getDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getDocumentProperty", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getDocumentProperty");
        }
    }
    /**
     * Read presentation document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentPropertyInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "getDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "getDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "getDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "getDocumentProperty", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getDocumentProperty", "folder");
            initialize("getDocumentProperty", "folder", "String", valueFolder);
            DocumentProperty response = api.getDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getDocumentProperty", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getDocumentProperty");
        }
    }
    /**
     * Read presentation document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentPropertyInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "getDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "getDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "getDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "getDocumentProperty", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getDocumentProperty", "storage");
            initialize("getDocumentProperty", "storage", "String", valueStorage);
            DocumentProperty response = api.getDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getDocumentProperty", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getDocumentProperty");
        }
    }
    
    /**
     * Get file versions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFileVersionsTest() throws ApiException, Exception {
        initialize("getFileVersions", null, null, null);
        FileVersions response = null;
        String valuePath = (String)getTestValue("String", "getFileVersions", "path");
        String valueStorageName = (String)getTestValue("String", "getFileVersions", "storageName");
        response = api.getFileVersions(valuePath, valueStorageName);
        assertNotNull(response);
    }

    /**
     * Get file versions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFileVersionsInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "getFileVersions", "path");
        String valueStorageName = (String)getTestValue("String", "getFileVersions", "storageName");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "getFileVersions", "path");
            initialize("getFileVersions", "path", "String", valuePath);
            FileVersions response = api.getFileVersions(valuePath, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "path", "getFileVersions", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("String", "path", "getFileVersions");
        }
    }
    /**
     * Get file versions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFileVersionsInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "getFileVersions", "path");
        String valueStorageName = (String)getTestValue("String", "getFileVersions", "storageName");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "getFileVersions", "storageName");
            initialize("getFileVersions", "storageName", "String", valueStorageName);
            FileVersions response = api.getFileVersions(valuePath, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storageName", "getFileVersions", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("String", "storageName", "getFileVersions");
        }
    }
    
    /**
     * Get all files and folders within a folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilesListTest() throws ApiException, Exception {
        initialize("getFilesList", null, null, null);
        FilesList response = null;
        String valuePath = (String)getTestValue("String", "getFilesList", "path");
        String valueStorageName = (String)getTestValue("String", "getFilesList", "storageName");
        response = api.getFilesList(valuePath, valueStorageName);
        assertNotNull(response);
    }

    /**
     * Get all files and folders within a folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilesListInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "getFilesList", "path");
        String valueStorageName = (String)getTestValue("String", "getFilesList", "storageName");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "getFilesList", "path");
            initialize("getFilesList", "path", "String", valuePath);
            FilesList response = api.getFilesList(valuePath, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "path", "getFilesList", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("String", "path", "getFilesList");
        }
    }
    /**
     * Get all files and folders within a folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilesListInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "getFilesList", "path");
        String valueStorageName = (String)getTestValue("String", "getFilesList", "storageName");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "getFilesList", "storageName");
            initialize("getFilesList", "storageName", "String", valueStorageName);
            FilesList response = api.getFilesList(valuePath, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storageName", "getFilesList", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("String", "storageName", "getFilesList");
        }
    }
    
    /**
     * Read slide theme font scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFontSchemeTest() throws ApiException, Exception {
        initialize("getFontScheme", null, null, null);
        FontScheme response = null;
        String valueName = (String)getTestValue("String", "getFontScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getFontScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getFontScheme", "password");
        String valueFolder = (String)getTestValue("String", "getFontScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getFontScheme", "storage");
        response = api.getFontScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide theme font scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFontSchemeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getFontScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getFontScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getFontScheme", "password");
        String valueFolder = (String)getTestValue("String", "getFontScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getFontScheme", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getFontScheme", "name");
            initialize("getFontScheme", "name", "String", valueName);
            FontScheme response = api.getFontScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getFontScheme", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getFontScheme");
        }
    }
    /**
     * Read slide theme font scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFontSchemeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getFontScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getFontScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getFontScheme", "password");
        String valueFolder = (String)getTestValue("String", "getFontScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getFontScheme", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getFontScheme", "slideIndex");
            initialize("getFontScheme", "slideIndex", "Integer", valueSlideIndex);
            FontScheme response = api.getFontScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getFontScheme", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getFontScheme");
        }
    }
    /**
     * Read slide theme font scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFontSchemeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getFontScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getFontScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getFontScheme", "password");
        String valueFolder = (String)getTestValue("String", "getFontScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getFontScheme", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getFontScheme", "password");
            initialize("getFontScheme", "password", "String", valuePassword);
            FontScheme response = api.getFontScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getFontScheme", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getFontScheme");
        }
    }
    /**
     * Read slide theme font scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFontSchemeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getFontScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getFontScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getFontScheme", "password");
        String valueFolder = (String)getTestValue("String", "getFontScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getFontScheme", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getFontScheme", "folder");
            initialize("getFontScheme", "folder", "String", valueFolder);
            FontScheme response = api.getFontScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getFontScheme", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getFontScheme");
        }
    }
    /**
     * Read slide theme font scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFontSchemeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getFontScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getFontScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getFontScheme", "password");
        String valueFolder = (String)getTestValue("String", "getFontScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getFontScheme", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getFontScheme", "storage");
            initialize("getFontScheme", "storage", "String", valueStorage);
            FontScheme response = api.getFontScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getFontScheme", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getFontScheme");
        }
    }
    
    /**
     * Returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFontsTest() throws ApiException, Exception {
        initialize("getFonts", null, null, null);
        FontsData response = null;
        String valueName = (String)getTestValue("String", "getFonts", "name");
        String valuePassword = (String)getTestValue("String", "getFonts", "password");
        String valueFolder = (String)getTestValue("String", "getFonts", "folder");
        String valueStorage = (String)getTestValue("String", "getFonts", "storage");
        response = api.getFonts(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFontsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getFonts", "name");
        String valuePassword = (String)getTestValue("String", "getFonts", "password");
        String valueFolder = (String)getTestValue("String", "getFonts", "folder");
        String valueStorage = (String)getTestValue("String", "getFonts", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getFonts", "name");
            initialize("getFonts", "name", "String", valueName);
            FontsData response = api.getFonts(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getFonts", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getFonts");
        }
    }
    /**
     * Returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFontsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getFonts", "name");
        String valuePassword = (String)getTestValue("String", "getFonts", "password");
        String valueFolder = (String)getTestValue("String", "getFonts", "folder");
        String valueStorage = (String)getTestValue("String", "getFonts", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getFonts", "password");
            initialize("getFonts", "password", "String", valuePassword);
            FontsData response = api.getFonts(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getFonts", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getFonts");
        }
    }
    /**
     * Returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFontsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getFonts", "name");
        String valuePassword = (String)getTestValue("String", "getFonts", "password");
        String valueFolder = (String)getTestValue("String", "getFonts", "folder");
        String valueStorage = (String)getTestValue("String", "getFonts", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getFonts", "folder");
            initialize("getFonts", "folder", "String", valueFolder);
            FontsData response = api.getFonts(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getFonts", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getFonts");
        }
    }
    /**
     * Returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFontsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getFonts", "name");
        String valuePassword = (String)getTestValue("String", "getFonts", "password");
        String valueFolder = (String)getTestValue("String", "getFonts", "folder");
        String valueStorage = (String)getTestValue("String", "getFonts", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getFonts", "storage");
            initialize("getFonts", "storage", "String", valueStorage);
            FontsData response = api.getFonts(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getFonts", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getFonts");
        }
    }
    
    /**
     * Returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFontsOnlineTest() throws ApiException, Exception {
        initialize("getFontsOnline", null, null, null);
        FontsData response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "getFontsOnline", "document");
        String valuePassword = (String)getTestValue("String", "getFontsOnline", "password");
        response = api.getFontsOnline(valueDocument, valuePassword);
        assertNotNull(response);
    }

    /**
     * Returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFontsOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "getFontsOnline", "document");
        String valuePassword = (String)getTestValue("String", "getFontsOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "getFontsOnline", "document");
            initialize("getFontsOnline", "document", "byte[]", valueDocument);
            FontsData response = api.getFontsOnline(valueDocument, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "getFontsOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "getFontsOnline");
        }
    }
    /**
     * Returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFontsOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "getFontsOnline", "document");
        String valuePassword = (String)getTestValue("String", "getFontsOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getFontsOnline", "password");
            initialize("getFontsOnline", "password", "String", valuePassword);
            FontsData response = api.getFontsOnline(valueDocument, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getFontsOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getFontsOnline");
        }
    }
    
    /**
     * Read slide theme format scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormatSchemeTest() throws ApiException, Exception {
        initialize("getFormatScheme", null, null, null);
        FormatScheme response = null;
        String valueName = (String)getTestValue("String", "getFormatScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getFormatScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getFormatScheme", "password");
        String valueFolder = (String)getTestValue("String", "getFormatScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getFormatScheme", "storage");
        response = api.getFormatScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide theme format scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormatSchemeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getFormatScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getFormatScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getFormatScheme", "password");
        String valueFolder = (String)getTestValue("String", "getFormatScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getFormatScheme", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getFormatScheme", "name");
            initialize("getFormatScheme", "name", "String", valueName);
            FormatScheme response = api.getFormatScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getFormatScheme", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getFormatScheme");
        }
    }
    /**
     * Read slide theme format scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormatSchemeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getFormatScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getFormatScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getFormatScheme", "password");
        String valueFolder = (String)getTestValue("String", "getFormatScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getFormatScheme", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getFormatScheme", "slideIndex");
            initialize("getFormatScheme", "slideIndex", "Integer", valueSlideIndex);
            FormatScheme response = api.getFormatScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getFormatScheme", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getFormatScheme");
        }
    }
    /**
     * Read slide theme format scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormatSchemeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getFormatScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getFormatScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getFormatScheme", "password");
        String valueFolder = (String)getTestValue("String", "getFormatScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getFormatScheme", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getFormatScheme", "password");
            initialize("getFormatScheme", "password", "String", valuePassword);
            FormatScheme response = api.getFormatScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getFormatScheme", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getFormatScheme");
        }
    }
    /**
     * Read slide theme format scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormatSchemeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getFormatScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getFormatScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getFormatScheme", "password");
        String valueFolder = (String)getTestValue("String", "getFormatScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getFormatScheme", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getFormatScheme", "folder");
            initialize("getFormatScheme", "folder", "String", valueFolder);
            FormatScheme response = api.getFormatScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getFormatScheme", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getFormatScheme");
        }
    }
    /**
     * Read slide theme format scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormatSchemeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getFormatScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getFormatScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getFormatScheme", "password");
        String valueFolder = (String)getTestValue("String", "getFormatScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getFormatScheme", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getFormatScheme", "storage");
            initialize("getFormatScheme", "storage", "String", valueStorage);
            FormatScheme response = api.getFormatScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getFormatScheme", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getFormatScheme");
        }
    }
    
    /**
     * Read presentation layoutSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlideTest() throws ApiException, Exception {
        initialize("getLayoutSlide", null, null, null);
        LayoutSlide response = null;
        String valueName = (String)getTestValue("String", "getLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getLayoutSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlide", "storage");
        response = api.getLayoutSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation layoutSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getLayoutSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getLayoutSlide", "name");
            initialize("getLayoutSlide", "name", "String", valueName);
            LayoutSlide response = api.getLayoutSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getLayoutSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getLayoutSlide");
        }
    }
    /**
     * Read presentation layoutSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getLayoutSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getLayoutSlide", "slideIndex");
            initialize("getLayoutSlide", "slideIndex", "Integer", valueSlideIndex);
            LayoutSlide response = api.getLayoutSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getLayoutSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getLayoutSlide");
        }
    }
    /**
     * Read presentation layoutSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getLayoutSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getLayoutSlide", "password");
            initialize("getLayoutSlide", "password", "String", valuePassword);
            LayoutSlide response = api.getLayoutSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getLayoutSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getLayoutSlide");
        }
    }
    /**
     * Read presentation layoutSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getLayoutSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getLayoutSlide", "folder");
            initialize("getLayoutSlide", "folder", "String", valueFolder);
            LayoutSlide response = api.getLayoutSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getLayoutSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getLayoutSlide");
        }
    }
    /**
     * Read presentation layoutSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getLayoutSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getLayoutSlide", "storage");
            initialize("getLayoutSlide", "storage", "String", valueStorage);
            LayoutSlide response = api.getLayoutSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getLayoutSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getLayoutSlide");
        }
    }
    
    /**
     * Read presentation layoutSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlidesTest() throws ApiException, Exception {
        initialize("getLayoutSlides", null, null, null);
        LayoutSlides response = null;
        String valueName = (String)getTestValue("String", "getLayoutSlides", "name");
        String valuePassword = (String)getTestValue("String", "getLayoutSlides", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlides", "storage");
        response = api.getLayoutSlides(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation layoutSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlidesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlides", "name");
        String valuePassword = (String)getTestValue("String", "getLayoutSlides", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlides", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getLayoutSlides", "name");
            initialize("getLayoutSlides", "name", "String", valueName);
            LayoutSlides response = api.getLayoutSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getLayoutSlides", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getLayoutSlides");
        }
    }
    /**
     * Read presentation layoutSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlidesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlides", "name");
        String valuePassword = (String)getTestValue("String", "getLayoutSlides", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlides", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getLayoutSlides", "password");
            initialize("getLayoutSlides", "password", "String", valuePassword);
            LayoutSlides response = api.getLayoutSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getLayoutSlides", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getLayoutSlides");
        }
    }
    /**
     * Read presentation layoutSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlidesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlides", "name");
        String valuePassword = (String)getTestValue("String", "getLayoutSlides", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlides", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getLayoutSlides", "folder");
            initialize("getLayoutSlides", "folder", "String", valueFolder);
            LayoutSlides response = api.getLayoutSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getLayoutSlides", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getLayoutSlides");
        }
    }
    /**
     * Read presentation layoutSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlidesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlides", "name");
        String valuePassword = (String)getTestValue("String", "getLayoutSlides", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlides", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getLayoutSlides", "storage");
            initialize("getLayoutSlides", "storage", "String", valueStorage);
            LayoutSlides response = api.getLayoutSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getLayoutSlides", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getLayoutSlides");
        }
    }
    
    /**
     * Read presentation masterSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlideTest() throws ApiException, Exception {
        initialize("getMasterSlide", null, null, null);
        MasterSlide response = null;
        String valueName = (String)getTestValue("String", "getMasterSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getMasterSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlide", "storage");
        response = api.getMasterSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation masterSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getMasterSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getMasterSlide", "name");
            initialize("getMasterSlide", "name", "String", valueName);
            MasterSlide response = api.getMasterSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getMasterSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getMasterSlide");
        }
    }
    /**
     * Read presentation masterSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getMasterSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getMasterSlide", "slideIndex");
            initialize("getMasterSlide", "slideIndex", "Integer", valueSlideIndex);
            MasterSlide response = api.getMasterSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getMasterSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getMasterSlide");
        }
    }
    /**
     * Read presentation masterSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getMasterSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getMasterSlide", "password");
            initialize("getMasterSlide", "password", "String", valuePassword);
            MasterSlide response = api.getMasterSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getMasterSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getMasterSlide");
        }
    }
    /**
     * Read presentation masterSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getMasterSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getMasterSlide", "folder");
            initialize("getMasterSlide", "folder", "String", valueFolder);
            MasterSlide response = api.getMasterSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getMasterSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getMasterSlide");
        }
    }
    /**
     * Read presentation masterSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getMasterSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getMasterSlide", "storage");
            initialize("getMasterSlide", "storage", "String", valueStorage);
            MasterSlide response = api.getMasterSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getMasterSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getMasterSlide");
        }
    }
    
    /**
     * Read presentation masterSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlidesTest() throws ApiException, Exception {
        initialize("getMasterSlides", null, null, null);
        MasterSlides response = null;
        String valueName = (String)getTestValue("String", "getMasterSlides", "name");
        String valuePassword = (String)getTestValue("String", "getMasterSlides", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlides", "storage");
        response = api.getMasterSlides(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation masterSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlidesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlides", "name");
        String valuePassword = (String)getTestValue("String", "getMasterSlides", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlides", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getMasterSlides", "name");
            initialize("getMasterSlides", "name", "String", valueName);
            MasterSlides response = api.getMasterSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getMasterSlides", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getMasterSlides");
        }
    }
    /**
     * Read presentation masterSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlidesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlides", "name");
        String valuePassword = (String)getTestValue("String", "getMasterSlides", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlides", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getMasterSlides", "password");
            initialize("getMasterSlides", "password", "String", valuePassword);
            MasterSlides response = api.getMasterSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getMasterSlides", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getMasterSlides");
        }
    }
    /**
     * Read presentation masterSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlidesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlides", "name");
        String valuePassword = (String)getTestValue("String", "getMasterSlides", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlides", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getMasterSlides", "folder");
            initialize("getMasterSlides", "folder", "String", valueFolder);
            MasterSlides response = api.getMasterSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getMasterSlides", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getMasterSlides");
        }
    }
    /**
     * Read presentation masterSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlidesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlides", "name");
        String valuePassword = (String)getTestValue("String", "getMasterSlides", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlides", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getMasterSlides", "storage");
            initialize("getMasterSlides", "storage", "String", valueStorage);
            MasterSlides response = api.getMasterSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getMasterSlides", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getMasterSlides");
        }
    }
    
    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideTest() throws ApiException, Exception {
        initialize("getNotesSlide", null, null, null);
        NotesSlide response = null;
        String valueName = (String)getTestValue("String", "getNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlide", "storage");
        response = api.getNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getNotesSlide", "name");
            initialize("getNotesSlide", "name", "String", valueName);
            NotesSlide response = api.getNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getNotesSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getNotesSlide");
        }
    }
    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getNotesSlide", "slideIndex");
            initialize("getNotesSlide", "slideIndex", "Integer", valueSlideIndex);
            NotesSlide response = api.getNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getNotesSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getNotesSlide");
        }
    }
    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getNotesSlide", "password");
            initialize("getNotesSlide", "password", "String", valuePassword);
            NotesSlide response = api.getNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getNotesSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getNotesSlide");
        }
    }
    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getNotesSlide", "folder");
            initialize("getNotesSlide", "folder", "String", valueFolder);
            NotesSlide response = api.getNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getNotesSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getNotesSlide");
        }
    }
    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getNotesSlide", "storage");
            initialize("getNotesSlide", "storage", "String", valueStorage);
            NotesSlide response = api.getNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getNotesSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getNotesSlide");
        }
    }
    
    /**
     * Get header/footer info for the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideHeaderFooterTest() throws ApiException, Exception {
        initialize("getNotesSlideHeaderFooter", null, null, null);
        NotesSlideHeaderFooter response = null;
        String valueName = (String)getTestValue("String", "getNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideHeaderFooter", "storage");
        response = api.getNotesSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Get header/footer info for the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideHeaderFooterInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideHeaderFooter", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getNotesSlideHeaderFooter", "name");
            initialize("getNotesSlideHeaderFooter", "name", "String", valueName);
            NotesSlideHeaderFooter response = api.getNotesSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getNotesSlideHeaderFooter", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getNotesSlideHeaderFooter");
        }
    }
    /**
     * Get header/footer info for the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideHeaderFooterInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideHeaderFooter", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getNotesSlideHeaderFooter", "slideIndex");
            initialize("getNotesSlideHeaderFooter", "slideIndex", "Integer", valueSlideIndex);
            NotesSlideHeaderFooter response = api.getNotesSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getNotesSlideHeaderFooter", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getNotesSlideHeaderFooter");
        }
    }
    /**
     * Get header/footer info for the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideHeaderFooterInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideHeaderFooter", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getNotesSlideHeaderFooter", "password");
            initialize("getNotesSlideHeaderFooter", "password", "String", valuePassword);
            NotesSlideHeaderFooter response = api.getNotesSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getNotesSlideHeaderFooter", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getNotesSlideHeaderFooter");
        }
    }
    /**
     * Get header/footer info for the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideHeaderFooterInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideHeaderFooter", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getNotesSlideHeaderFooter", "folder");
            initialize("getNotesSlideHeaderFooter", "folder", "String", valueFolder);
            NotesSlideHeaderFooter response = api.getNotesSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getNotesSlideHeaderFooter", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getNotesSlideHeaderFooter");
        }
    }
    /**
     * Get header/footer info for the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideHeaderFooterInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideHeaderFooter", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getNotesSlideHeaderFooter", "storage");
            initialize("getNotesSlideHeaderFooter", "storage", "String", valueStorage);
            NotesSlideHeaderFooter response = api.getNotesSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getNotesSlideHeaderFooter", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getNotesSlideHeaderFooter");
        }
    }
    
    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideOnlineTest() throws ApiException, Exception {
        initialize("getNotesSlideOnline", null, null, null);
        NotesSlide response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "getNotesSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideOnline", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideOnline", "password");
        response = api.getNotesSlideOnline(valueDocument, valueSlideIndex, valuePassword);
        assertNotNull(response);
    }

    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "getNotesSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideOnline", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "getNotesSlideOnline", "document");
            initialize("getNotesSlideOnline", "document", "byte[]", valueDocument);
            NotesSlide response = api.getNotesSlideOnline(valueDocument, valueSlideIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "getNotesSlideOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "getNotesSlideOnline");
        }
    }
    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideOnlineInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "getNotesSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideOnline", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideOnline", "password");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getNotesSlideOnline", "slideIndex");
            initialize("getNotesSlideOnline", "slideIndex", "Integer", valueSlideIndex);
            NotesSlide response = api.getNotesSlideOnline(valueDocument, valueSlideIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getNotesSlideOnline", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getNotesSlideOnline");
        }
    }
    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "getNotesSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideOnline", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getNotesSlideOnline", "password");
            initialize("getNotesSlideOnline", "password", "String", valuePassword);
            NotesSlide response = api.getNotesSlideOnline(valueDocument, valueSlideIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getNotesSlideOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getNotesSlideOnline");
        }
    }
    
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphTest() throws ApiException, Exception {
        initialize("getParagraph", null, null, null);
        Paragraph response = null;
        String valueName = (String)getTestValue("String", "getParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraph", "subShape");
        response = api.getParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraph", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getParagraph", "name");
            initialize("getParagraph", "name", "String", valueName);
            Paragraph response = api.getParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraph", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getParagraph", "slideIndex");
            initialize("getParagraph", "slideIndex", "Integer", valueSlideIndex);
            Paragraph response = api.getParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraph", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getParagraph", "shapeIndex");
            initialize("getParagraph", "shapeIndex", "Integer", valueShapeIndex);
            Paragraph response = api.getParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "getParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "getParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraph", "subShape");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getParagraph", "paragraphIndex");
            initialize("getParagraph", "paragraphIndex", "Integer", valueParagraphIndex);
            Paragraph response = api.getParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "getParagraph", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "getParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraph", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getParagraph", "password");
            initialize("getParagraph", "password", "String", valuePassword);
            Paragraph response = api.getParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraph", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getParagraph", "folder");
            initialize("getParagraph", "folder", "String", valueFolder);
            Paragraph response = api.getParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraph", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getParagraph", "storage");
            initialize("getParagraph", "storage", "String", valueStorage);
            Paragraph response = api.getParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraph", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "getParagraph", "subShape");
            initialize("getParagraph", "subShape", "String", valueSubShape);
            Paragraph response = api.getParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "getParagraph", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "getParagraph");
        }
    }
    
    /**
     * Read effective paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphEffectiveTest() throws ApiException, Exception {
        initialize("getParagraphEffective", null, null, null);
        Paragraph response = null;
        String valueName = (String)getTestValue("String", "getParagraphEffective", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphEffective", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphEffective", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphEffective", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraphEffective", "subShape");
        response = api.getParagraphEffective(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Read effective paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphEffectiveInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphEffective", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphEffective", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphEffective", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphEffective", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraphEffective", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getParagraphEffective", "name");
            initialize("getParagraphEffective", "name", "String", valueName);
            Paragraph response = api.getParagraphEffective(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getParagraphEffective", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getParagraphEffective");
        }
    }
    /**
     * Read effective paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphEffectiveInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphEffective", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphEffective", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphEffective", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphEffective", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraphEffective", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getParagraphEffective", "slideIndex");
            initialize("getParagraphEffective", "slideIndex", "Integer", valueSlideIndex);
            Paragraph response = api.getParagraphEffective(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getParagraphEffective", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getParagraphEffective");
        }
    }
    /**
     * Read effective paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphEffectiveInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphEffective", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphEffective", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphEffective", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphEffective", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraphEffective", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getParagraphEffective", "shapeIndex");
            initialize("getParagraphEffective", "shapeIndex", "Integer", valueShapeIndex);
            Paragraph response = api.getParagraphEffective(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "getParagraphEffective", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "getParagraphEffective");
        }
    }
    /**
     * Read effective paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphEffectiveInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphEffective", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphEffective", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphEffective", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphEffective", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraphEffective", "subShape");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getParagraphEffective", "paragraphIndex");
            initialize("getParagraphEffective", "paragraphIndex", "Integer", valueParagraphIndex);
            Paragraph response = api.getParagraphEffective(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "getParagraphEffective", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "getParagraphEffective");
        }
    }
    /**
     * Read effective paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphEffectiveInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphEffective", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphEffective", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphEffective", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphEffective", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraphEffective", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getParagraphEffective", "password");
            initialize("getParagraphEffective", "password", "String", valuePassword);
            Paragraph response = api.getParagraphEffective(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getParagraphEffective", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getParagraphEffective");
        }
    }
    /**
     * Read effective paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphEffectiveInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphEffective", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphEffective", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphEffective", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphEffective", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraphEffective", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getParagraphEffective", "folder");
            initialize("getParagraphEffective", "folder", "String", valueFolder);
            Paragraph response = api.getParagraphEffective(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getParagraphEffective", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getParagraphEffective");
        }
    }
    /**
     * Read effective paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphEffectiveInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphEffective", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphEffective", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphEffective", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphEffective", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraphEffective", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getParagraphEffective", "storage");
            initialize("getParagraphEffective", "storage", "String", valueStorage);
            Paragraph response = api.getParagraphEffective(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getParagraphEffective", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getParagraphEffective");
        }
    }
    /**
     * Read effective paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphEffectiveInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphEffective", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphEffective", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphEffective", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphEffective", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphEffective", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraphEffective", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "getParagraphEffective", "subShape");
            initialize("getParagraphEffective", "subShape", "String", valueSubShape);
            Paragraph response = api.getParagraphEffective(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "getParagraphEffective", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "getParagraphEffective");
        }
    }
    
    /**
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphRectangleTest() throws ApiException, Exception {
        initialize("getParagraphRectangle", null, null, null);
        TextBounds response = null;
        String valueName = (String)getTestValue("String", "getParagraphRectangle", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphRectangle", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphRectangle", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphRectangle", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphRectangle", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphRectangle", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphRectangle", "storage");
        response = api.getParagraphRectangle(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphRectangleInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphRectangle", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphRectangle", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphRectangle", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphRectangle", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphRectangle", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphRectangle", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphRectangle", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getParagraphRectangle", "name");
            initialize("getParagraphRectangle", "name", "String", valueName);
            TextBounds response = api.getParagraphRectangle(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getParagraphRectangle", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getParagraphRectangle");
        }
    }
    /**
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphRectangleInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphRectangle", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphRectangle", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphRectangle", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphRectangle", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphRectangle", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphRectangle", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphRectangle", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getParagraphRectangle", "slideIndex");
            initialize("getParagraphRectangle", "slideIndex", "Integer", valueSlideIndex);
            TextBounds response = api.getParagraphRectangle(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getParagraphRectangle", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getParagraphRectangle");
        }
    }
    /**
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphRectangleInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphRectangle", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphRectangle", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphRectangle", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphRectangle", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphRectangle", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphRectangle", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphRectangle", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getParagraphRectangle", "shapeIndex");
            initialize("getParagraphRectangle", "shapeIndex", "Integer", valueShapeIndex);
            TextBounds response = api.getParagraphRectangle(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "getParagraphRectangle", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "getParagraphRectangle");
        }
    }
    /**
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphRectangleInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphRectangle", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphRectangle", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphRectangle", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphRectangle", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphRectangle", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphRectangle", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphRectangle", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getParagraphRectangle", "paragraphIndex");
            initialize("getParagraphRectangle", "paragraphIndex", "Integer", valueParagraphIndex);
            TextBounds response = api.getParagraphRectangle(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "getParagraphRectangle", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "getParagraphRectangle");
        }
    }
    /**
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphRectangleInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphRectangle", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphRectangle", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphRectangle", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphRectangle", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphRectangle", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphRectangle", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphRectangle", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getParagraphRectangle", "password");
            initialize("getParagraphRectangle", "password", "String", valuePassword);
            TextBounds response = api.getParagraphRectangle(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getParagraphRectangle", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getParagraphRectangle");
        }
    }
    /**
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphRectangleInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphRectangle", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphRectangle", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphRectangle", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphRectangle", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphRectangle", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphRectangle", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphRectangle", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getParagraphRectangle", "folder");
            initialize("getParagraphRectangle", "folder", "String", valueFolder);
            TextBounds response = api.getParagraphRectangle(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getParagraphRectangle", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getParagraphRectangle");
        }
    }
    /**
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphRectangleInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphRectangle", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphRectangle", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphRectangle", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphRectangle", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphRectangle", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphRectangle", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphRectangle", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getParagraphRectangle", "storage");
            initialize("getParagraphRectangle", "storage", "String", valueStorage);
            TextBounds response = api.getParagraphRectangle(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getParagraphRectangle", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getParagraphRectangle");
        }
    }
    
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphsTest() throws ApiException, Exception {
        initialize("getParagraphs", null, null, null);
        Paragraphs response = null;
        String valueName = (String)getTestValue("String", "getParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraphs", "subShape");
        response = api.getParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraphs", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getParagraphs", "name");
            initialize("getParagraphs", "name", "String", valueName);
            Paragraphs response = api.getParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getParagraphs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraphs", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getParagraphs", "slideIndex");
            initialize("getParagraphs", "slideIndex", "Integer", valueSlideIndex);
            Paragraphs response = api.getParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getParagraphs", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraphs", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getParagraphs", "shapeIndex");
            initialize("getParagraphs", "shapeIndex", "Integer", valueShapeIndex);
            Paragraphs response = api.getParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "getParagraphs", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "getParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraphs", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getParagraphs", "password");
            initialize("getParagraphs", "password", "String", valuePassword);
            Paragraphs response = api.getParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getParagraphs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraphs", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getParagraphs", "folder");
            initialize("getParagraphs", "folder", "String", valueFolder);
            Paragraphs response = api.getParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getParagraphs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraphs", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getParagraphs", "storage");
            initialize("getParagraphs", "storage", "String", valueStorage);
            Paragraphs response = api.getParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getParagraphs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphsInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "getParagraphs", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "getParagraphs", "subShape");
            initialize("getParagraphs", "subShape", "String", valueSubShape);
            Paragraphs response = api.getParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "getParagraphs", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "getParagraphs");
        }
    }
    
    /**
     * Read slide placeholder info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholderTest() throws ApiException, Exception {
        initialize("getPlaceholder", null, null, null);
        Placeholder response = null;
        String valueName = (String)getTestValue("String", "getPlaceholder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholder", "slideIndex");
        Integer valuePlaceholderIndex = (Integer)getTestValue("Integer", "getPlaceholder", "placeholderIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholder", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholder", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholder", "storage");
        response = api.getPlaceholder(valueName, valueSlideIndex, valuePlaceholderIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide placeholder info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholderInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPlaceholder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholder", "slideIndex");
        Integer valuePlaceholderIndex = (Integer)getTestValue("Integer", "getPlaceholder", "placeholderIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholder", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholder", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholder", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getPlaceholder", "name");
            initialize("getPlaceholder", "name", "String", valueName);
            Placeholder response = api.getPlaceholder(valueName, valueSlideIndex, valuePlaceholderIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getPlaceholder", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getPlaceholder");
        }
    }
    /**
     * Read slide placeholder info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholderInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPlaceholder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholder", "slideIndex");
        Integer valuePlaceholderIndex = (Integer)getTestValue("Integer", "getPlaceholder", "placeholderIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholder", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholder", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholder", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getPlaceholder", "slideIndex");
            initialize("getPlaceholder", "slideIndex", "Integer", valueSlideIndex);
            Placeholder response = api.getPlaceholder(valueName, valueSlideIndex, valuePlaceholderIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getPlaceholder", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getPlaceholder");
        }
    }
    /**
     * Read slide placeholder info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholderInvalidPlaceholderIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPlaceholder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholder", "slideIndex");
        Integer valuePlaceholderIndex = (Integer)getTestValue("Integer", "getPlaceholder", "placeholderIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholder", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholder", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholder", "storage");
        try {
            valuePlaceholderIndex = (Integer)invalidizeTestValue("Integer", valuePlaceholderIndex, "getPlaceholder", "placeholderIndex");
            initialize("getPlaceholder", "placeholderIndex", "Integer", valuePlaceholderIndex);
            Placeholder response = api.getPlaceholder(valueName, valueSlideIndex, valuePlaceholderIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "placeholderIndex", "getPlaceholder", valuePlaceholderIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "placeholderIndex", "getPlaceholder");
        }
    }
    /**
     * Read slide placeholder info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholderInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPlaceholder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholder", "slideIndex");
        Integer valuePlaceholderIndex = (Integer)getTestValue("Integer", "getPlaceholder", "placeholderIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholder", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholder", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholder", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getPlaceholder", "password");
            initialize("getPlaceholder", "password", "String", valuePassword);
            Placeholder response = api.getPlaceholder(valueName, valueSlideIndex, valuePlaceholderIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getPlaceholder", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getPlaceholder");
        }
    }
    /**
     * Read slide placeholder info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholderInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPlaceholder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholder", "slideIndex");
        Integer valuePlaceholderIndex = (Integer)getTestValue("Integer", "getPlaceholder", "placeholderIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholder", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholder", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholder", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getPlaceholder", "folder");
            initialize("getPlaceholder", "folder", "String", valueFolder);
            Placeholder response = api.getPlaceholder(valueName, valueSlideIndex, valuePlaceholderIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getPlaceholder", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getPlaceholder");
        }
    }
    /**
     * Read slide placeholder info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholderInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPlaceholder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholder", "slideIndex");
        Integer valuePlaceholderIndex = (Integer)getTestValue("Integer", "getPlaceholder", "placeholderIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholder", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholder", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholder", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getPlaceholder", "storage");
            initialize("getPlaceholder", "storage", "String", valueStorage);
            Placeholder response = api.getPlaceholder(valueName, valueSlideIndex, valuePlaceholderIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getPlaceholder", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getPlaceholder");
        }
    }
    
    /**
     * Read slide placeholders info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholdersTest() throws ApiException, Exception {
        initialize("getPlaceholders", null, null, null);
        Placeholders response = null;
        String valueName = (String)getTestValue("String", "getPlaceholders", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholders", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholders", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholders", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholders", "storage");
        response = api.getPlaceholders(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide placeholders info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholdersInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPlaceholders", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholders", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholders", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholders", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholders", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getPlaceholders", "name");
            initialize("getPlaceholders", "name", "String", valueName);
            Placeholders response = api.getPlaceholders(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getPlaceholders", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getPlaceholders");
        }
    }
    /**
     * Read slide placeholders info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholdersInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPlaceholders", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholders", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholders", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholders", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholders", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getPlaceholders", "slideIndex");
            initialize("getPlaceholders", "slideIndex", "Integer", valueSlideIndex);
            Placeholders response = api.getPlaceholders(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getPlaceholders", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getPlaceholders");
        }
    }
    /**
     * Read slide placeholders info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholdersInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPlaceholders", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholders", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholders", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholders", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholders", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getPlaceholders", "password");
            initialize("getPlaceholders", "password", "String", valuePassword);
            Placeholders response = api.getPlaceholders(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getPlaceholders", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getPlaceholders");
        }
    }
    /**
     * Read slide placeholders info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholdersInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPlaceholders", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholders", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholders", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholders", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholders", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getPlaceholders", "folder");
            initialize("getPlaceholders", "folder", "String", valueFolder);
            Placeholders response = api.getPlaceholders(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getPlaceholders", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getPlaceholders");
        }
    }
    /**
     * Read slide placeholders info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholdersInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPlaceholders", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholders", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholders", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholders", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholders", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getPlaceholders", "storage");
            initialize("getPlaceholders", "storage", "String", valueStorage);
            Placeholders response = api.getPlaceholders(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getPlaceholders", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getPlaceholders");
        }
    }
    
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionTest() throws ApiException, Exception {
        initialize("getPortion", null, null, null);
        Portion response = null;
        String valueName = (String)getTestValue("String", "getPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortion", "password");
        String valueFolder = (String)getTestValue("String", "getPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getPortion", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortion", "subShape");
        response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortion", "password");
        String valueFolder = (String)getTestValue("String", "getPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getPortion", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortion", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getPortion", "name");
            initialize("getPortion", "name", "String", valueName);
            Portion response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getPortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getPortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortion", "password");
        String valueFolder = (String)getTestValue("String", "getPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getPortion", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortion", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getPortion", "slideIndex");
            initialize("getPortion", "slideIndex", "Integer", valueSlideIndex);
            Portion response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getPortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getPortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortion", "password");
        String valueFolder = (String)getTestValue("String", "getPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getPortion", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortion", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getPortion", "shapeIndex");
            initialize("getPortion", "shapeIndex", "Integer", valueShapeIndex);
            Portion response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "getPortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "getPortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortion", "password");
        String valueFolder = (String)getTestValue("String", "getPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getPortion", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortion", "subShape");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getPortion", "paragraphIndex");
            initialize("getPortion", "paragraphIndex", "Integer", valueParagraphIndex);
            Portion response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "getPortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "getPortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortion", "password");
        String valueFolder = (String)getTestValue("String", "getPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getPortion", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortion", "subShape");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "getPortion", "portionIndex");
            initialize("getPortion", "portionIndex", "Integer", valuePortionIndex);
            Portion response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "portionIndex", "getPortion", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "portionIndex", "getPortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortion", "password");
        String valueFolder = (String)getTestValue("String", "getPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getPortion", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortion", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getPortion", "password");
            initialize("getPortion", "password", "String", valuePassword);
            Portion response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getPortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getPortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortion", "password");
        String valueFolder = (String)getTestValue("String", "getPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getPortion", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortion", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getPortion", "folder");
            initialize("getPortion", "folder", "String", valueFolder);
            Portion response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getPortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getPortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortion", "password");
        String valueFolder = (String)getTestValue("String", "getPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getPortion", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortion", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getPortion", "storage");
            initialize("getPortion", "storage", "String", valueStorage);
            Portion response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getPortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getPortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortion", "password");
        String valueFolder = (String)getTestValue("String", "getPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getPortion", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortion", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "getPortion", "subShape");
            initialize("getPortion", "subShape", "String", valueSubShape);
            Portion response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "getPortion", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "getPortion");
        }
    }
    
    /**
     * Read effective portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionEffectiveTest() throws ApiException, Exception {
        initialize("getPortionEffective", null, null, null);
        Portion response = null;
        String valueName = (String)getTestValue("String", "getPortionEffective", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortionEffective", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortionEffective", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortionEffective", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortionEffective", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortionEffective", "password");
        String valueFolder = (String)getTestValue("String", "getPortionEffective", "folder");
        String valueStorage = (String)getTestValue("String", "getPortionEffective", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortionEffective", "subShape");
        response = api.getPortionEffective(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Read effective portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionEffectiveInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortionEffective", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortionEffective", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortionEffective", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortionEffective", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortionEffective", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortionEffective", "password");
        String valueFolder = (String)getTestValue("String", "getPortionEffective", "folder");
        String valueStorage = (String)getTestValue("String", "getPortionEffective", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortionEffective", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getPortionEffective", "name");
            initialize("getPortionEffective", "name", "String", valueName);
            Portion response = api.getPortionEffective(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getPortionEffective", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getPortionEffective");
        }
    }
    /**
     * Read effective portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionEffectiveInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortionEffective", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortionEffective", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortionEffective", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortionEffective", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortionEffective", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortionEffective", "password");
        String valueFolder = (String)getTestValue("String", "getPortionEffective", "folder");
        String valueStorage = (String)getTestValue("String", "getPortionEffective", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortionEffective", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getPortionEffective", "slideIndex");
            initialize("getPortionEffective", "slideIndex", "Integer", valueSlideIndex);
            Portion response = api.getPortionEffective(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getPortionEffective", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getPortionEffective");
        }
    }
    /**
     * Read effective portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionEffectiveInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortionEffective", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortionEffective", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortionEffective", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortionEffective", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortionEffective", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortionEffective", "password");
        String valueFolder = (String)getTestValue("String", "getPortionEffective", "folder");
        String valueStorage = (String)getTestValue("String", "getPortionEffective", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortionEffective", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getPortionEffective", "shapeIndex");
            initialize("getPortionEffective", "shapeIndex", "Integer", valueShapeIndex);
            Portion response = api.getPortionEffective(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "getPortionEffective", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "getPortionEffective");
        }
    }
    /**
     * Read effective portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionEffectiveInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortionEffective", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortionEffective", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortionEffective", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortionEffective", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortionEffective", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortionEffective", "password");
        String valueFolder = (String)getTestValue("String", "getPortionEffective", "folder");
        String valueStorage = (String)getTestValue("String", "getPortionEffective", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortionEffective", "subShape");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getPortionEffective", "paragraphIndex");
            initialize("getPortionEffective", "paragraphIndex", "Integer", valueParagraphIndex);
            Portion response = api.getPortionEffective(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "getPortionEffective", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "getPortionEffective");
        }
    }
    /**
     * Read effective portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionEffectiveInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortionEffective", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortionEffective", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortionEffective", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortionEffective", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortionEffective", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortionEffective", "password");
        String valueFolder = (String)getTestValue("String", "getPortionEffective", "folder");
        String valueStorage = (String)getTestValue("String", "getPortionEffective", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortionEffective", "subShape");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "getPortionEffective", "portionIndex");
            initialize("getPortionEffective", "portionIndex", "Integer", valuePortionIndex);
            Portion response = api.getPortionEffective(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "portionIndex", "getPortionEffective", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "portionIndex", "getPortionEffective");
        }
    }
    /**
     * Read effective portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionEffectiveInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortionEffective", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortionEffective", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortionEffective", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortionEffective", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortionEffective", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortionEffective", "password");
        String valueFolder = (String)getTestValue("String", "getPortionEffective", "folder");
        String valueStorage = (String)getTestValue("String", "getPortionEffective", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortionEffective", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getPortionEffective", "password");
            initialize("getPortionEffective", "password", "String", valuePassword);
            Portion response = api.getPortionEffective(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getPortionEffective", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getPortionEffective");
        }
    }
    /**
     * Read effective portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionEffectiveInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortionEffective", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortionEffective", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortionEffective", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortionEffective", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortionEffective", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortionEffective", "password");
        String valueFolder = (String)getTestValue("String", "getPortionEffective", "folder");
        String valueStorage = (String)getTestValue("String", "getPortionEffective", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortionEffective", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getPortionEffective", "folder");
            initialize("getPortionEffective", "folder", "String", valueFolder);
            Portion response = api.getPortionEffective(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getPortionEffective", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getPortionEffective");
        }
    }
    /**
     * Read effective portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionEffectiveInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortionEffective", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortionEffective", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortionEffective", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortionEffective", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortionEffective", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortionEffective", "password");
        String valueFolder = (String)getTestValue("String", "getPortionEffective", "folder");
        String valueStorage = (String)getTestValue("String", "getPortionEffective", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortionEffective", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getPortionEffective", "storage");
            initialize("getPortionEffective", "storage", "String", valueStorage);
            Portion response = api.getPortionEffective(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getPortionEffective", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getPortionEffective");
        }
    }
    /**
     * Read effective portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionEffectiveInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortionEffective", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortionEffective", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortionEffective", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortionEffective", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortionEffective", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortionEffective", "password");
        String valueFolder = (String)getTestValue("String", "getPortionEffective", "folder");
        String valueStorage = (String)getTestValue("String", "getPortionEffective", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortionEffective", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "getPortionEffective", "subShape");
            initialize("getPortionEffective", "subShape", "String", valueSubShape);
            Portion response = api.getPortionEffective(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "getPortionEffective", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "getPortionEffective");
        }
    }
    
    /**
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionRectangleTest() throws ApiException, Exception {
        initialize("getPortionRectangle", null, null, null);
        TextBounds response = null;
        String valueName = (String)getTestValue("String", "getPortionRectangle", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortionRectangle", "password");
        String valueFolder = (String)getTestValue("String", "getPortionRectangle", "folder");
        String valueStorage = (String)getTestValue("String", "getPortionRectangle", "storage");
        response = api.getPortionRectangle(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionRectangleInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortionRectangle", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortionRectangle", "password");
        String valueFolder = (String)getTestValue("String", "getPortionRectangle", "folder");
        String valueStorage = (String)getTestValue("String", "getPortionRectangle", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getPortionRectangle", "name");
            initialize("getPortionRectangle", "name", "String", valueName);
            TextBounds response = api.getPortionRectangle(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getPortionRectangle", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getPortionRectangle");
        }
    }
    /**
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionRectangleInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortionRectangle", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortionRectangle", "password");
        String valueFolder = (String)getTestValue("String", "getPortionRectangle", "folder");
        String valueStorage = (String)getTestValue("String", "getPortionRectangle", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getPortionRectangle", "slideIndex");
            initialize("getPortionRectangle", "slideIndex", "Integer", valueSlideIndex);
            TextBounds response = api.getPortionRectangle(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getPortionRectangle", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getPortionRectangle");
        }
    }
    /**
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionRectangleInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortionRectangle", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortionRectangle", "password");
        String valueFolder = (String)getTestValue("String", "getPortionRectangle", "folder");
        String valueStorage = (String)getTestValue("String", "getPortionRectangle", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getPortionRectangle", "shapeIndex");
            initialize("getPortionRectangle", "shapeIndex", "Integer", valueShapeIndex);
            TextBounds response = api.getPortionRectangle(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "getPortionRectangle", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "getPortionRectangle");
        }
    }
    /**
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionRectangleInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortionRectangle", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortionRectangle", "password");
        String valueFolder = (String)getTestValue("String", "getPortionRectangle", "folder");
        String valueStorage = (String)getTestValue("String", "getPortionRectangle", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getPortionRectangle", "paragraphIndex");
            initialize("getPortionRectangle", "paragraphIndex", "Integer", valueParagraphIndex);
            TextBounds response = api.getPortionRectangle(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "getPortionRectangle", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "getPortionRectangle");
        }
    }
    /**
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionRectangleInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortionRectangle", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortionRectangle", "password");
        String valueFolder = (String)getTestValue("String", "getPortionRectangle", "folder");
        String valueStorage = (String)getTestValue("String", "getPortionRectangle", "storage");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "getPortionRectangle", "portionIndex");
            initialize("getPortionRectangle", "portionIndex", "Integer", valuePortionIndex);
            TextBounds response = api.getPortionRectangle(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "portionIndex", "getPortionRectangle", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "portionIndex", "getPortionRectangle");
        }
    }
    /**
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionRectangleInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortionRectangle", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortionRectangle", "password");
        String valueFolder = (String)getTestValue("String", "getPortionRectangle", "folder");
        String valueStorage = (String)getTestValue("String", "getPortionRectangle", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getPortionRectangle", "password");
            initialize("getPortionRectangle", "password", "String", valuePassword);
            TextBounds response = api.getPortionRectangle(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getPortionRectangle", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getPortionRectangle");
        }
    }
    /**
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionRectangleInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortionRectangle", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortionRectangle", "password");
        String valueFolder = (String)getTestValue("String", "getPortionRectangle", "folder");
        String valueStorage = (String)getTestValue("String", "getPortionRectangle", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getPortionRectangle", "folder");
            initialize("getPortionRectangle", "folder", "String", valueFolder);
            TextBounds response = api.getPortionRectangle(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getPortionRectangle", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getPortionRectangle");
        }
    }
    /**
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionRectangleInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortionRectangle", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortionRectangle", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortionRectangle", "password");
        String valueFolder = (String)getTestValue("String", "getPortionRectangle", "folder");
        String valueStorage = (String)getTestValue("String", "getPortionRectangle", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getPortionRectangle", "storage");
            initialize("getPortionRectangle", "storage", "String", valueStorage);
            TextBounds response = api.getPortionRectangle(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getPortionRectangle", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getPortionRectangle");
        }
    }
    
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionsTest() throws ApiException, Exception {
        initialize("getPortions", null, null, null);
        Portions response = null;
        String valueName = (String)getTestValue("String", "getPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getPortions", "password");
        String valueFolder = (String)getTestValue("String", "getPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getPortions", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortions", "subShape");
        response = api.getPortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getPortions", "password");
        String valueFolder = (String)getTestValue("String", "getPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getPortions", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortions", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getPortions", "name");
            initialize("getPortions", "name", "String", valueName);
            Portions response = api.getPortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getPortions", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getPortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getPortions", "password");
        String valueFolder = (String)getTestValue("String", "getPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getPortions", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortions", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getPortions", "slideIndex");
            initialize("getPortions", "slideIndex", "Integer", valueSlideIndex);
            Portions response = api.getPortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getPortions", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getPortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getPortions", "password");
        String valueFolder = (String)getTestValue("String", "getPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getPortions", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortions", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getPortions", "shapeIndex");
            initialize("getPortions", "shapeIndex", "Integer", valueShapeIndex);
            Portions response = api.getPortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "getPortions", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "getPortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionsInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getPortions", "password");
        String valueFolder = (String)getTestValue("String", "getPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getPortions", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortions", "subShape");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getPortions", "paragraphIndex");
            initialize("getPortions", "paragraphIndex", "Integer", valueParagraphIndex);
            Portions response = api.getPortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "getPortions", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "getPortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getPortions", "password");
        String valueFolder = (String)getTestValue("String", "getPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getPortions", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortions", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getPortions", "password");
            initialize("getPortions", "password", "String", valuePassword);
            Portions response = api.getPortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getPortions", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getPortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getPortions", "password");
        String valueFolder = (String)getTestValue("String", "getPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getPortions", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortions", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getPortions", "folder");
            initialize("getPortions", "folder", "String", valueFolder);
            Portions response = api.getPortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getPortions", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getPortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getPortions", "password");
        String valueFolder = (String)getTestValue("String", "getPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getPortions", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortions", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getPortions", "storage");
            initialize("getPortions", "storage", "String", valueStorage);
            Portions response = api.getPortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getPortions", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getPortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionsInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getPortions", "password");
        String valueFolder = (String)getTestValue("String", "getPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getPortions", "storage");
        String valueSubShape = (String)getTestValue("String", "getPortions", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "getPortions", "subShape");
            initialize("getPortions", "subShape", "String", valueSubShape);
            Portions response = api.getPortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "getPortions", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "getPortions");
        }
    }
    
    /**
     * Read presentation info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationTest() throws ApiException, Exception {
        initialize("getPresentation", null, null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "getPresentation", "name");
        String valuePassword = (String)getTestValue("String", "getPresentation", "password");
        String valueFolder = (String)getTestValue("String", "getPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentation", "storage");
        response = api.getPresentation(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentation", "name");
        String valuePassword = (String)getTestValue("String", "getPresentation", "password");
        String valueFolder = (String)getTestValue("String", "getPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentation", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getPresentation", "name");
            initialize("getPresentation", "name", "String", valueName);
            Document response = api.getPresentation(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getPresentation", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getPresentation");
        }
    }
    /**
     * Read presentation info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentation", "name");
        String valuePassword = (String)getTestValue("String", "getPresentation", "password");
        String valueFolder = (String)getTestValue("String", "getPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentation", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getPresentation", "password");
            initialize("getPresentation", "password", "String", valuePassword);
            Document response = api.getPresentation(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getPresentation", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getPresentation");
        }
    }
    /**
     * Read presentation info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentation", "name");
        String valuePassword = (String)getTestValue("String", "getPresentation", "password");
        String valueFolder = (String)getTestValue("String", "getPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentation", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getPresentation", "folder");
            initialize("getPresentation", "folder", "String", valueFolder);
            Document response = api.getPresentation(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getPresentation", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getPresentation");
        }
    }
    /**
     * Read presentation info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentation", "name");
        String valuePassword = (String)getTestValue("String", "getPresentation", "password");
        String valueFolder = (String)getTestValue("String", "getPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentation", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getPresentation", "storage");
            initialize("getPresentation", "storage", "String", valueStorage);
            Document response = api.getPresentation(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getPresentation", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getPresentation");
        }
    }
    
    /**
     * Read presentation images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationImagesTest() throws ApiException, Exception {
        initialize("getPresentationImages", null, null, null);
        Images response = null;
        String valueName = (String)getTestValue("String", "getPresentationImages", "name");
        String valuePassword = (String)getTestValue("String", "getPresentationImages", "password");
        String valueFolder = (String)getTestValue("String", "getPresentationImages", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentationImages", "storage");
        response = api.getPresentationImages(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationImagesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentationImages", "name");
        String valuePassword = (String)getTestValue("String", "getPresentationImages", "password");
        String valueFolder = (String)getTestValue("String", "getPresentationImages", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentationImages", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getPresentationImages", "name");
            initialize("getPresentationImages", "name", "String", valueName);
            Images response = api.getPresentationImages(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getPresentationImages", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getPresentationImages");
        }
    }
    /**
     * Read presentation images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationImagesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentationImages", "name");
        String valuePassword = (String)getTestValue("String", "getPresentationImages", "password");
        String valueFolder = (String)getTestValue("String", "getPresentationImages", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentationImages", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getPresentationImages", "password");
            initialize("getPresentationImages", "password", "String", valuePassword);
            Images response = api.getPresentationImages(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getPresentationImages", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getPresentationImages");
        }
    }
    /**
     * Read presentation images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationImagesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentationImages", "name");
        String valuePassword = (String)getTestValue("String", "getPresentationImages", "password");
        String valueFolder = (String)getTestValue("String", "getPresentationImages", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentationImages", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getPresentationImages", "folder");
            initialize("getPresentationImages", "folder", "String", valueFolder);
            Images response = api.getPresentationImages(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getPresentationImages", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getPresentationImages");
        }
    }
    /**
     * Read presentation images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationImagesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentationImages", "name");
        String valuePassword = (String)getTestValue("String", "getPresentationImages", "password");
        String valueFolder = (String)getTestValue("String", "getPresentationImages", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentationImages", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getPresentationImages", "storage");
            initialize("getPresentationImages", "storage", "String", valueStorage);
            Images response = api.getPresentationImages(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getPresentationImages", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getPresentationImages");
        }
    }
    
    /**
     * Extract presentation text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationTextItemsTest() throws ApiException, Exception {
        initialize("getPresentationTextItems", null, null, null);
        TextItems response = null;
        String valueName = (String)getTestValue("String", "getPresentationTextItems", "name");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getPresentationTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getPresentationTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getPresentationTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentationTextItems", "storage");
        response = api.getPresentationTextItems(valueName, valueWithEmpty, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Extract presentation text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationTextItemsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentationTextItems", "name");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getPresentationTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getPresentationTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getPresentationTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentationTextItems", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getPresentationTextItems", "name");
            initialize("getPresentationTextItems", "name", "String", valueName);
            TextItems response = api.getPresentationTextItems(valueName, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getPresentationTextItems", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getPresentationTextItems");
        }
    }
    /**
     * Extract presentation text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationTextItemsInvalidWithEmptyTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentationTextItems", "name");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getPresentationTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getPresentationTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getPresentationTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentationTextItems", "storage");
        try {
            valueWithEmpty = (Boolean)invalidizeTestValue("Boolean", valueWithEmpty, "getPresentationTextItems", "withEmpty");
            initialize("getPresentationTextItems", "withEmpty", "Boolean", valueWithEmpty);
            TextItems response = api.getPresentationTextItems(valueName, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "withEmpty", "getPresentationTextItems", valueWithEmpty);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "withEmpty", "getPresentationTextItems");
        }
    }
    /**
     * Extract presentation text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationTextItemsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentationTextItems", "name");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getPresentationTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getPresentationTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getPresentationTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentationTextItems", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getPresentationTextItems", "password");
            initialize("getPresentationTextItems", "password", "String", valuePassword);
            TextItems response = api.getPresentationTextItems(valueName, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getPresentationTextItems", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getPresentationTextItems");
        }
    }
    /**
     * Extract presentation text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationTextItemsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentationTextItems", "name");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getPresentationTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getPresentationTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getPresentationTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentationTextItems", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getPresentationTextItems", "folder");
            initialize("getPresentationTextItems", "folder", "String", valueFolder);
            TextItems response = api.getPresentationTextItems(valueName, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getPresentationTextItems", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getPresentationTextItems");
        }
    }
    /**
     * Extract presentation text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationTextItemsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentationTextItems", "name");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getPresentationTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getPresentationTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getPresentationTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentationTextItems", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getPresentationTextItems", "storage");
            initialize("getPresentationTextItems", "storage", "String", valueStorage);
            TextItems response = api.getPresentationTextItems(valueName, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getPresentationTextItems", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getPresentationTextItems");
        }
    }
    
    /**
     * Read presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProtectionPropertiesTest() throws ApiException, Exception {
        initialize("getProtectionProperties", null, null, null);
        ProtectionProperties response = null;
        String valueName = (String)getTestValue("String", "getProtectionProperties", "name");
        String valuePassword = (String)getTestValue("String", "getProtectionProperties", "password");
        String valueFolder = (String)getTestValue("String", "getProtectionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getProtectionProperties", "storage");
        response = api.getProtectionProperties(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProtectionPropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getProtectionProperties", "name");
        String valuePassword = (String)getTestValue("String", "getProtectionProperties", "password");
        String valueFolder = (String)getTestValue("String", "getProtectionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getProtectionProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getProtectionProperties", "name");
            initialize("getProtectionProperties", "name", "String", valueName);
            ProtectionProperties response = api.getProtectionProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getProtectionProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getProtectionProperties");
        }
    }
    /**
     * Read presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProtectionPropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getProtectionProperties", "name");
        String valuePassword = (String)getTestValue("String", "getProtectionProperties", "password");
        String valueFolder = (String)getTestValue("String", "getProtectionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getProtectionProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getProtectionProperties", "password");
            initialize("getProtectionProperties", "password", "String", valuePassword);
            ProtectionProperties response = api.getProtectionProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getProtectionProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getProtectionProperties");
        }
    }
    /**
     * Read presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProtectionPropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getProtectionProperties", "name");
        String valuePassword = (String)getTestValue("String", "getProtectionProperties", "password");
        String valueFolder = (String)getTestValue("String", "getProtectionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getProtectionProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getProtectionProperties", "folder");
            initialize("getProtectionProperties", "folder", "String", valueFolder);
            ProtectionProperties response = api.getProtectionProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getProtectionProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getProtectionProperties");
        }
    }
    /**
     * Read presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProtectionPropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getProtectionProperties", "name");
        String valuePassword = (String)getTestValue("String", "getProtectionProperties", "password");
        String valueFolder = (String)getTestValue("String", "getProtectionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getProtectionProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getProtectionProperties", "storage");
            initialize("getProtectionProperties", "storage", "String", valueStorage);
            ProtectionProperties response = api.getProtectionProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getProtectionProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getProtectionProperties");
        }
    }
    
    /**
     * Read presentation sections info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSectionsTest() throws ApiException, Exception {
        initialize("getSections", null, null, null);
        Sections response = null;
        String valueName = (String)getTestValue("String", "getSections", "name");
        String valuePassword = (String)getTestValue("String", "getSections", "password");
        String valueFolder = (String)getTestValue("String", "getSections", "folder");
        String valueStorage = (String)getTestValue("String", "getSections", "storage");
        response = api.getSections(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation sections info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSectionsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSections", "name");
        String valuePassword = (String)getTestValue("String", "getSections", "password");
        String valueFolder = (String)getTestValue("String", "getSections", "folder");
        String valueStorage = (String)getTestValue("String", "getSections", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSections", "name");
            initialize("getSections", "name", "String", valueName);
            Sections response = api.getSections(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getSections", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getSections");
        }
    }
    /**
     * Read presentation sections info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSectionsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSections", "name");
        String valuePassword = (String)getTestValue("String", "getSections", "password");
        String valueFolder = (String)getTestValue("String", "getSections", "folder");
        String valueStorage = (String)getTestValue("String", "getSections", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSections", "password");
            initialize("getSections", "password", "String", valuePassword);
            Sections response = api.getSections(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getSections", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getSections");
        }
    }
    /**
     * Read presentation sections info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSectionsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSections", "name");
        String valuePassword = (String)getTestValue("String", "getSections", "password");
        String valueFolder = (String)getTestValue("String", "getSections", "folder");
        String valueStorage = (String)getTestValue("String", "getSections", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSections", "folder");
            initialize("getSections", "folder", "String", valueFolder);
            Sections response = api.getSections(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getSections", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getSections");
        }
    }
    /**
     * Read presentation sections info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSectionsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSections", "name");
        String valuePassword = (String)getTestValue("String", "getSections", "password");
        String valueFolder = (String)getTestValue("String", "getSections", "folder");
        String valueStorage = (String)getTestValue("String", "getSections", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSections", "storage");
            initialize("getSections", "storage", "String", valueStorage);
            Sections response = api.getSections(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getSections", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getSections");
        }
    }
    
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapeTest() throws ApiException, Exception {
        initialize("getShape", null, null, null);
        ShapeBase response = null;
        String valueName = (String)getTestValue("String", "getShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getShape", "password");
        String valueFolder = (String)getTestValue("String", "getShape", "folder");
        String valueStorage = (String)getTestValue("String", "getShape", "storage");
        String valueSubShape = (String)getTestValue("String", "getShape", "subShape");
        response = api.getShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getShape", "password");
        String valueFolder = (String)getTestValue("String", "getShape", "folder");
        String valueStorage = (String)getTestValue("String", "getShape", "storage");
        String valueSubShape = (String)getTestValue("String", "getShape", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getShape", "name");
            initialize("getShape", "name", "String", valueName);
            ShapeBase response = api.getShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getShape", "password");
        String valueFolder = (String)getTestValue("String", "getShape", "folder");
        String valueStorage = (String)getTestValue("String", "getShape", "storage");
        String valueSubShape = (String)getTestValue("String", "getShape", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getShape", "slideIndex");
            initialize("getShape", "slideIndex", "Integer", valueSlideIndex);
            ShapeBase response = api.getShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getShape", "password");
        String valueFolder = (String)getTestValue("String", "getShape", "folder");
        String valueStorage = (String)getTestValue("String", "getShape", "storage");
        String valueSubShape = (String)getTestValue("String", "getShape", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getShape", "shapeIndex");
            initialize("getShape", "shapeIndex", "Integer", valueShapeIndex);
            ShapeBase response = api.getShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "getShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "getShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getShape", "password");
        String valueFolder = (String)getTestValue("String", "getShape", "folder");
        String valueStorage = (String)getTestValue("String", "getShape", "storage");
        String valueSubShape = (String)getTestValue("String", "getShape", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getShape", "password");
            initialize("getShape", "password", "String", valuePassword);
            ShapeBase response = api.getShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getShape", "password");
        String valueFolder = (String)getTestValue("String", "getShape", "folder");
        String valueStorage = (String)getTestValue("String", "getShape", "storage");
        String valueSubShape = (String)getTestValue("String", "getShape", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getShape", "folder");
            initialize("getShape", "folder", "String", valueFolder);
            ShapeBase response = api.getShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getShape", "password");
        String valueFolder = (String)getTestValue("String", "getShape", "folder");
        String valueStorage = (String)getTestValue("String", "getShape", "storage");
        String valueSubShape = (String)getTestValue("String", "getShape", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getShape", "storage");
            initialize("getShape", "storage", "String", valueStorage);
            ShapeBase response = api.getShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapeInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getShape", "password");
        String valueFolder = (String)getTestValue("String", "getShape", "folder");
        String valueStorage = (String)getTestValue("String", "getShape", "storage");
        String valueSubShape = (String)getTestValue("String", "getShape", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "getShape", "subShape");
            initialize("getShape", "subShape", "String", valueSubShape);
            ShapeBase response = api.getShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "getShape", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "getShape");
        }
    }
    
    /**
     * Returns geometry path of the shape
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapeGeometryPathTest() throws ApiException, Exception {
        initialize("getShapeGeometryPath", null, null, null);
        GeometryPaths response = null;
        String valueName = (String)getTestValue("String", "getShapeGeometryPath", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShapeGeometryPath", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getShapeGeometryPath", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getShapeGeometryPath", "password");
        String valueFolder = (String)getTestValue("String", "getShapeGeometryPath", "folder");
        String valueStorage = (String)getTestValue("String", "getShapeGeometryPath", "storage");
        response = api.getShapeGeometryPath(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Returns geometry path of the shape
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapeGeometryPathInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShapeGeometryPath", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShapeGeometryPath", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getShapeGeometryPath", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getShapeGeometryPath", "password");
        String valueFolder = (String)getTestValue("String", "getShapeGeometryPath", "folder");
        String valueStorage = (String)getTestValue("String", "getShapeGeometryPath", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getShapeGeometryPath", "name");
            initialize("getShapeGeometryPath", "name", "String", valueName);
            GeometryPaths response = api.getShapeGeometryPath(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getShapeGeometryPath", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getShapeGeometryPath");
        }
    }
    /**
     * Returns geometry path of the shape
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapeGeometryPathInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShapeGeometryPath", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShapeGeometryPath", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getShapeGeometryPath", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getShapeGeometryPath", "password");
        String valueFolder = (String)getTestValue("String", "getShapeGeometryPath", "folder");
        String valueStorage = (String)getTestValue("String", "getShapeGeometryPath", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getShapeGeometryPath", "slideIndex");
            initialize("getShapeGeometryPath", "slideIndex", "Integer", valueSlideIndex);
            GeometryPaths response = api.getShapeGeometryPath(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getShapeGeometryPath", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getShapeGeometryPath");
        }
    }
    /**
     * Returns geometry path of the shape
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapeGeometryPathInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShapeGeometryPath", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShapeGeometryPath", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getShapeGeometryPath", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getShapeGeometryPath", "password");
        String valueFolder = (String)getTestValue("String", "getShapeGeometryPath", "folder");
        String valueStorage = (String)getTestValue("String", "getShapeGeometryPath", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getShapeGeometryPath", "shapeIndex");
            initialize("getShapeGeometryPath", "shapeIndex", "Integer", valueShapeIndex);
            GeometryPaths response = api.getShapeGeometryPath(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "getShapeGeometryPath", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "getShapeGeometryPath");
        }
    }
    /**
     * Returns geometry path of the shape
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapeGeometryPathInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShapeGeometryPath", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShapeGeometryPath", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getShapeGeometryPath", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getShapeGeometryPath", "password");
        String valueFolder = (String)getTestValue("String", "getShapeGeometryPath", "folder");
        String valueStorage = (String)getTestValue("String", "getShapeGeometryPath", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getShapeGeometryPath", "password");
            initialize("getShapeGeometryPath", "password", "String", valuePassword);
            GeometryPaths response = api.getShapeGeometryPath(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getShapeGeometryPath", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getShapeGeometryPath");
        }
    }
    /**
     * Returns geometry path of the shape
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapeGeometryPathInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShapeGeometryPath", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShapeGeometryPath", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getShapeGeometryPath", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getShapeGeometryPath", "password");
        String valueFolder = (String)getTestValue("String", "getShapeGeometryPath", "folder");
        String valueStorage = (String)getTestValue("String", "getShapeGeometryPath", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getShapeGeometryPath", "folder");
            initialize("getShapeGeometryPath", "folder", "String", valueFolder);
            GeometryPaths response = api.getShapeGeometryPath(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getShapeGeometryPath", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getShapeGeometryPath");
        }
    }
    /**
     * Returns geometry path of the shape
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapeGeometryPathInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShapeGeometryPath", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShapeGeometryPath", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getShapeGeometryPath", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getShapeGeometryPath", "password");
        String valueFolder = (String)getTestValue("String", "getShapeGeometryPath", "folder");
        String valueStorage = (String)getTestValue("String", "getShapeGeometryPath", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getShapeGeometryPath", "storage");
            initialize("getShapeGeometryPath", "storage", "String", valueStorage);
            GeometryPaths response = api.getShapeGeometryPath(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getShapeGeometryPath", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getShapeGeometryPath");
        }
    }
    
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapesTest() throws ApiException, Exception {
        initialize("getShapes", null, null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "getShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getShapes", "password");
        String valueFolder = (String)getTestValue("String", "getShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getShapes", "storage");
        ShapeType valueShapeType = (ShapeType)getTestValue("ShapeType", "getShapes", "shapeType");
        String valueSubShape = (String)getTestValue("String", "getShapes", "subShape");
        response = api.getShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage, valueShapeType, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getShapes", "password");
        String valueFolder = (String)getTestValue("String", "getShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getShapes", "storage");
        ShapeType valueShapeType = (ShapeType)getTestValue("ShapeType", "getShapes", "shapeType");
        String valueSubShape = (String)getTestValue("String", "getShapes", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getShapes", "name");
            initialize("getShapes", "name", "String", valueName);
            Shapes response = api.getShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage, valueShapeType, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getShapes", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getShapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getShapes", "password");
        String valueFolder = (String)getTestValue("String", "getShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getShapes", "storage");
        ShapeType valueShapeType = (ShapeType)getTestValue("ShapeType", "getShapes", "shapeType");
        String valueSubShape = (String)getTestValue("String", "getShapes", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getShapes", "slideIndex");
            initialize("getShapes", "slideIndex", "Integer", valueSlideIndex);
            Shapes response = api.getShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage, valueShapeType, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getShapes", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getShapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getShapes", "password");
        String valueFolder = (String)getTestValue("String", "getShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getShapes", "storage");
        ShapeType valueShapeType = (ShapeType)getTestValue("ShapeType", "getShapes", "shapeType");
        String valueSubShape = (String)getTestValue("String", "getShapes", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getShapes", "password");
            initialize("getShapes", "password", "String", valuePassword);
            Shapes response = api.getShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage, valueShapeType, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getShapes", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getShapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getShapes", "password");
        String valueFolder = (String)getTestValue("String", "getShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getShapes", "storage");
        ShapeType valueShapeType = (ShapeType)getTestValue("ShapeType", "getShapes", "shapeType");
        String valueSubShape = (String)getTestValue("String", "getShapes", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getShapes", "folder");
            initialize("getShapes", "folder", "String", valueFolder);
            Shapes response = api.getShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage, valueShapeType, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getShapes", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getShapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getShapes", "password");
        String valueFolder = (String)getTestValue("String", "getShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getShapes", "storage");
        ShapeType valueShapeType = (ShapeType)getTestValue("ShapeType", "getShapes", "shapeType");
        String valueSubShape = (String)getTestValue("String", "getShapes", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getShapes", "storage");
            initialize("getShapes", "storage", "String", valueStorage);
            Shapes response = api.getShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage, valueShapeType, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getShapes", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getShapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapesInvalidShapeTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getShapes", "password");
        String valueFolder = (String)getTestValue("String", "getShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getShapes", "storage");
        ShapeType valueShapeType = (ShapeType)getTestValue("ShapeType", "getShapes", "shapeType");
        String valueSubShape = (String)getTestValue("String", "getShapes", "subShape");
        try {
            valueShapeType = (ShapeType)invalidizeTestValue("ShapeType", valueShapeType, "getShapes", "shapeType");
            initialize("getShapes", "shapeType", "ShapeType", valueShapeType);
            Shapes response = api.getShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage, valueShapeType, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ShapeType", "shapeType", "getShapes", valueShapeType);
        }
        if (needAssertResponse) {
            assertResponse("ShapeType", "shapeType", "getShapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapesInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getShapes", "password");
        String valueFolder = (String)getTestValue("String", "getShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getShapes", "storage");
        ShapeType valueShapeType = (ShapeType)getTestValue("ShapeType", "getShapes", "shapeType");
        String valueSubShape = (String)getTestValue("String", "getShapes", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "getShapes", "subShape");
            initialize("getShapes", "subShape", "String", valueSubShape);
            Shapes response = api.getShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage, valueShapeType, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "getShapes", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "getShapes");
        }
    }
    
    /**
     * Read presentation slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideTest() throws ApiException, Exception {
        initialize("getSlide", null, null, null);
        Slide response = null;
        String valueName = (String)getTestValue("String", "getSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlide", "password");
        String valueFolder = (String)getTestValue("String", "getSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getSlide", "storage");
        response = api.getSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlide", "password");
        String valueFolder = (String)getTestValue("String", "getSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlide", "name");
            initialize("getSlide", "name", "String", valueName);
            Slide response = api.getSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getSlide");
        }
    }
    /**
     * Read presentation slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlide", "password");
        String valueFolder = (String)getTestValue("String", "getSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlide", "slideIndex");
            initialize("getSlide", "slideIndex", "Integer", valueSlideIndex);
            Slide response = api.getSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getSlide");
        }
    }
    /**
     * Read presentation slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlide", "password");
        String valueFolder = (String)getTestValue("String", "getSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlide", "password");
            initialize("getSlide", "password", "String", valuePassword);
            Slide response = api.getSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getSlide");
        }
    }
    /**
     * Read presentation slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlide", "password");
        String valueFolder = (String)getTestValue("String", "getSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlide", "folder");
            initialize("getSlide", "folder", "String", valueFolder);
            Slide response = api.getSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getSlide");
        }
    }
    /**
     * Read presentation slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlide", "password");
        String valueFolder = (String)getTestValue("String", "getSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlide", "storage");
            initialize("getSlide", "storage", "String", valueStorage);
            Slide response = api.getSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getSlide");
        }
    }
    
    /**
     * Read presentation slide comments.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideCommentsTest() throws ApiException, Exception {
        initialize("getSlideComments", null, null, null);
        SlideComments response = null;
        String valueName = (String)getTestValue("String", "getSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideComments", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "getSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideComments", "storage");
        response = api.getSlideComments(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation slide comments.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideCommentsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideComments", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "getSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideComments", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlideComments", "name");
            initialize("getSlideComments", "name", "String", valueName);
            SlideComments response = api.getSlideComments(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getSlideComments", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getSlideComments");
        }
    }
    /**
     * Read presentation slide comments.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideCommentsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideComments", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "getSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideComments", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlideComments", "slideIndex");
            initialize("getSlideComments", "slideIndex", "Integer", valueSlideIndex);
            SlideComments response = api.getSlideComments(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getSlideComments", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getSlideComments");
        }
    }
    /**
     * Read presentation slide comments.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideCommentsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideComments", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "getSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideComments", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlideComments", "password");
            initialize("getSlideComments", "password", "String", valuePassword);
            SlideComments response = api.getSlideComments(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getSlideComments", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getSlideComments");
        }
    }
    /**
     * Read presentation slide comments.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideCommentsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideComments", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "getSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideComments", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlideComments", "folder");
            initialize("getSlideComments", "folder", "String", valueFolder);
            SlideComments response = api.getSlideComments(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getSlideComments", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getSlideComments");
        }
    }
    /**
     * Read presentation slide comments.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideCommentsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideComments", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "getSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideComments", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlideComments", "storage");
            initialize("getSlideComments", "storage", "String", valueStorage);
            SlideComments response = api.getSlideComments(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getSlideComments", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getSlideComments");
        }
    }
    
    /**
     * Get footer info for the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideHeaderFooterTest() throws ApiException, Exception {
        initialize("getSlideHeaderFooter", null, null, null);
        HeaderFooter response = null;
        String valueName = (String)getTestValue("String", "getSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideHeaderFooter", "storage");
        response = api.getSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Get footer info for the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideHeaderFooterInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideHeaderFooter", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlideHeaderFooter", "name");
            initialize("getSlideHeaderFooter", "name", "String", valueName);
            HeaderFooter response = api.getSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getSlideHeaderFooter", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getSlideHeaderFooter");
        }
    }
    /**
     * Get footer info for the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideHeaderFooterInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideHeaderFooter", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlideHeaderFooter", "slideIndex");
            initialize("getSlideHeaderFooter", "slideIndex", "Integer", valueSlideIndex);
            HeaderFooter response = api.getSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getSlideHeaderFooter", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getSlideHeaderFooter");
        }
    }
    /**
     * Get footer info for the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideHeaderFooterInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideHeaderFooter", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlideHeaderFooter", "password");
            initialize("getSlideHeaderFooter", "password", "String", valuePassword);
            HeaderFooter response = api.getSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getSlideHeaderFooter", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getSlideHeaderFooter");
        }
    }
    /**
     * Get footer info for the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideHeaderFooterInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideHeaderFooter", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlideHeaderFooter", "folder");
            initialize("getSlideHeaderFooter", "folder", "String", valueFolder);
            HeaderFooter response = api.getSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getSlideHeaderFooter", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getSlideHeaderFooter");
        }
    }
    /**
     * Get footer info for the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideHeaderFooterInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideHeaderFooter", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlideHeaderFooter", "storage");
            initialize("getSlideHeaderFooter", "storage", "String", valueStorage);
            HeaderFooter response = api.getSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getSlideHeaderFooter", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getSlideHeaderFooter");
        }
    }
    
    /**
     * Read slide images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideImagesTest() throws ApiException, Exception {
        initialize("getSlideImages", null, null, null);
        Images response = null;
        String valueName = (String)getTestValue("String", "getSlideImages", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideImages", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideImages", "password");
        String valueFolder = (String)getTestValue("String", "getSlideImages", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideImages", "storage");
        response = api.getSlideImages(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideImagesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideImages", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideImages", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideImages", "password");
        String valueFolder = (String)getTestValue("String", "getSlideImages", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideImages", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlideImages", "name");
            initialize("getSlideImages", "name", "String", valueName);
            Images response = api.getSlideImages(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getSlideImages", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getSlideImages");
        }
    }
    /**
     * Read slide images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideImagesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideImages", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideImages", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideImages", "password");
        String valueFolder = (String)getTestValue("String", "getSlideImages", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideImages", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlideImages", "slideIndex");
            initialize("getSlideImages", "slideIndex", "Integer", valueSlideIndex);
            Images response = api.getSlideImages(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getSlideImages", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getSlideImages");
        }
    }
    /**
     * Read slide images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideImagesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideImages", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideImages", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideImages", "password");
        String valueFolder = (String)getTestValue("String", "getSlideImages", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideImages", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlideImages", "password");
            initialize("getSlideImages", "password", "String", valuePassword);
            Images response = api.getSlideImages(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getSlideImages", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getSlideImages");
        }
    }
    /**
     * Read slide images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideImagesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideImages", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideImages", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideImages", "password");
        String valueFolder = (String)getTestValue("String", "getSlideImages", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideImages", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlideImages", "folder");
            initialize("getSlideImages", "folder", "String", valueFolder);
            Images response = api.getSlideImages(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getSlideImages", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getSlideImages");
        }
    }
    /**
     * Read slide images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideImagesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideImages", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideImages", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideImages", "password");
        String valueFolder = (String)getTestValue("String", "getSlideImages", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideImages", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlideImages", "storage");
            initialize("getSlideImages", "storage", "String", valueStorage);
            Images response = api.getSlideImages(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getSlideImages", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getSlideImages");
        }
    }
    
    /**
     * Read presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidePropertiesTest() throws ApiException, Exception {
        initialize("getSlideProperties", null, null, null);
        SlideProperties response = null;
        String valueName = (String)getTestValue("String", "getSlideProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideProperties", "storage");
        response = api.getSlideProperties(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidePropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlideProperties", "name");
            initialize("getSlideProperties", "name", "String", valueName);
            SlideProperties response = api.getSlideProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getSlideProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getSlideProperties");
        }
    }
    /**
     * Read presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidePropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlideProperties", "password");
            initialize("getSlideProperties", "password", "String", valuePassword);
            SlideProperties response = api.getSlideProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getSlideProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getSlideProperties");
        }
    }
    /**
     * Read presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidePropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlideProperties", "folder");
            initialize("getSlideProperties", "folder", "String", valueFolder);
            SlideProperties response = api.getSlideProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getSlideProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getSlideProperties");
        }
    }
    /**
     * Read presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidePropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlideProperties", "storage");
            initialize("getSlideProperties", "storage", "String", valueStorage);
            SlideProperties response = api.getSlideProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getSlideProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getSlideProperties");
        }
    }
    
    /**
     * Read presentation slide show properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShowPropertiesTest() throws ApiException, Exception {
        initialize("getSlideShowProperties", null, null, null);
        SlideShowProperties response = null;
        String valueName = (String)getTestValue("String", "getSlideShowProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlideShowProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShowProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShowProperties", "storage");
        response = api.getSlideShowProperties(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation slide show properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShowPropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShowProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlideShowProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShowProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShowProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlideShowProperties", "name");
            initialize("getSlideShowProperties", "name", "String", valueName);
            SlideShowProperties response = api.getSlideShowProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getSlideShowProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getSlideShowProperties");
        }
    }
    /**
     * Read presentation slide show properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShowPropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShowProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlideShowProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShowProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShowProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlideShowProperties", "password");
            initialize("getSlideShowProperties", "password", "String", valuePassword);
            SlideShowProperties response = api.getSlideShowProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getSlideShowProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getSlideShowProperties");
        }
    }
    /**
     * Read presentation slide show properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShowPropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShowProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlideShowProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShowProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShowProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlideShowProperties", "folder");
            initialize("getSlideShowProperties", "folder", "String", valueFolder);
            SlideShowProperties response = api.getSlideShowProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getSlideShowProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getSlideShowProperties");
        }
    }
    /**
     * Read presentation slide show properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShowPropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShowProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlideShowProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShowProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShowProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlideShowProperties", "storage");
            initialize("getSlideShowProperties", "storage", "String", valueStorage);
            SlideShowProperties response = api.getSlideShowProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getSlideShowProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getSlideShowProperties");
        }
    }
    
    /**
     * Extract slide text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideTextItemsTest() throws ApiException, Exception {
        initialize("getSlideTextItems", null, null, null);
        TextItems response = null;
        String valueName = (String)getTestValue("String", "getSlideTextItems", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideTextItems", "slideIndex");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlideTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlideTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlideTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideTextItems", "storage");
        response = api.getSlideTextItems(valueName, valueSlideIndex, valueWithEmpty, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Extract slide text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideTextItemsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideTextItems", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideTextItems", "slideIndex");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlideTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlideTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlideTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideTextItems", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlideTextItems", "name");
            initialize("getSlideTextItems", "name", "String", valueName);
            TextItems response = api.getSlideTextItems(valueName, valueSlideIndex, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getSlideTextItems", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getSlideTextItems");
        }
    }
    /**
     * Extract slide text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideTextItemsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideTextItems", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideTextItems", "slideIndex");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlideTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlideTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlideTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideTextItems", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlideTextItems", "slideIndex");
            initialize("getSlideTextItems", "slideIndex", "Integer", valueSlideIndex);
            TextItems response = api.getSlideTextItems(valueName, valueSlideIndex, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getSlideTextItems", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getSlideTextItems");
        }
    }
    /**
     * Extract slide text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideTextItemsInvalidWithEmptyTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideTextItems", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideTextItems", "slideIndex");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlideTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlideTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlideTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideTextItems", "storage");
        try {
            valueWithEmpty = (Boolean)invalidizeTestValue("Boolean", valueWithEmpty, "getSlideTextItems", "withEmpty");
            initialize("getSlideTextItems", "withEmpty", "Boolean", valueWithEmpty);
            TextItems response = api.getSlideTextItems(valueName, valueSlideIndex, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "withEmpty", "getSlideTextItems", valueWithEmpty);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "withEmpty", "getSlideTextItems");
        }
    }
    /**
     * Extract slide text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideTextItemsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideTextItems", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideTextItems", "slideIndex");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlideTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlideTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlideTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideTextItems", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlideTextItems", "password");
            initialize("getSlideTextItems", "password", "String", valuePassword);
            TextItems response = api.getSlideTextItems(valueName, valueSlideIndex, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getSlideTextItems", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getSlideTextItems");
        }
    }
    /**
     * Extract slide text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideTextItemsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideTextItems", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideTextItems", "slideIndex");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlideTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlideTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlideTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideTextItems", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlideTextItems", "folder");
            initialize("getSlideTextItems", "folder", "String", valueFolder);
            TextItems response = api.getSlideTextItems(valueName, valueSlideIndex, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getSlideTextItems", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getSlideTextItems");
        }
    }
    /**
     * Extract slide text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideTextItemsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideTextItems", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideTextItems", "slideIndex");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlideTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlideTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlideTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideTextItems", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlideTextItems", "storage");
            initialize("getSlideTextItems", "storage", "String", valueStorage);
            TextItems response = api.getSlideTextItems(valueName, valueSlideIndex, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getSlideTextItems", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getSlideTextItems");
        }
    }
    
    /**
     * Read presentation slides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesTest() throws ApiException, Exception {
        initialize("getSlides", null, null, null);
        Slides response = null;
        String valueName = (String)getTestValue("String", "getSlides", "name");
        String valuePassword = (String)getTestValue("String", "getSlides", "password");
        String valueFolder = (String)getTestValue("String", "getSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getSlides", "storage");
        response = api.getSlides(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation slides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlides", "name");
        String valuePassword = (String)getTestValue("String", "getSlides", "password");
        String valueFolder = (String)getTestValue("String", "getSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getSlides", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlides", "name");
            initialize("getSlides", "name", "String", valueName);
            Slides response = api.getSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getSlides", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getSlides");
        }
    }
    /**
     * Read presentation slides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlides", "name");
        String valuePassword = (String)getTestValue("String", "getSlides", "password");
        String valueFolder = (String)getTestValue("String", "getSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getSlides", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlides", "password");
            initialize("getSlides", "password", "String", valuePassword);
            Slides response = api.getSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getSlides", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getSlides");
        }
    }
    /**
     * Read presentation slides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlides", "name");
        String valuePassword = (String)getTestValue("String", "getSlides", "password");
        String valueFolder = (String)getTestValue("String", "getSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getSlides", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlides", "folder");
            initialize("getSlides", "folder", "String", valueFolder);
            Slides response = api.getSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getSlides", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getSlides");
        }
    }
    /**
     * Read presentation slides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlides", "name");
        String valuePassword = (String)getTestValue("String", "getSlides", "password");
        String valueFolder = (String)getTestValue("String", "getSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getSlides", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlides", "storage");
            initialize("getSlides", "storage", "String", valueStorage);
            Slides response = api.getSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getSlides", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getSlides");
        }
    }
    
    /**
     * Read special slide (master, layout, notes) animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideAnimationTest() throws ApiException, Exception {
        initialize("getSpecialSlideAnimation", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "getSpecialSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideAnimation", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideAnimation", "storage");
        response = api.getSpecialSlideAnimation(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read special slide (master, layout, notes) animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideAnimationInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideAnimation", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideAnimation", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSpecialSlideAnimation", "name");
            initialize("getSpecialSlideAnimation", "name", "String", valueName);
            SlideAnimation response = api.getSpecialSlideAnimation(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getSpecialSlideAnimation", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getSpecialSlideAnimation");
        }
    }
    /**
     * Read special slide (master, layout, notes) animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideAnimationInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideAnimation", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideAnimation", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSpecialSlideAnimation", "slideIndex");
            initialize("getSpecialSlideAnimation", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.getSpecialSlideAnimation(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getSpecialSlideAnimation", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getSpecialSlideAnimation");
        }
    }
    /**
     * Read special slide (master, layout, notes) animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideAnimationInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideAnimation", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideAnimation", "storage");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "getSpecialSlideAnimation", "slideType");
            initialize("getSpecialSlideAnimation", "slideType", "SpecialSlideType", valueSlideType);
            SlideAnimation response = api.getSpecialSlideAnimation(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "getSpecialSlideAnimation", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "getSpecialSlideAnimation");
        }
    }
    /**
     * Read special slide (master, layout, notes) animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideAnimationInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideAnimation", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideAnimation", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getSpecialSlideAnimation", "shapeIndex");
            initialize("getSpecialSlideAnimation", "shapeIndex", "Integer", valueShapeIndex);
            SlideAnimation response = api.getSpecialSlideAnimation(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "getSpecialSlideAnimation", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "getSpecialSlideAnimation");
        }
    }
    /**
     * Read special slide (master, layout, notes) animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideAnimationInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideAnimation", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideAnimation", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getSpecialSlideAnimation", "paragraphIndex");
            initialize("getSpecialSlideAnimation", "paragraphIndex", "Integer", valueParagraphIndex);
            SlideAnimation response = api.getSpecialSlideAnimation(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "getSpecialSlideAnimation", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "getSpecialSlideAnimation");
        }
    }
    /**
     * Read special slide (master, layout, notes) animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideAnimationInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideAnimation", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideAnimation", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSpecialSlideAnimation", "password");
            initialize("getSpecialSlideAnimation", "password", "String", valuePassword);
            SlideAnimation response = api.getSpecialSlideAnimation(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getSpecialSlideAnimation", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getSpecialSlideAnimation");
        }
    }
    /**
     * Read special slide (master, layout, notes) animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideAnimationInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideAnimation", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideAnimation", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSpecialSlideAnimation", "folder");
            initialize("getSpecialSlideAnimation", "folder", "String", valueFolder);
            SlideAnimation response = api.getSpecialSlideAnimation(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getSpecialSlideAnimation", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getSpecialSlideAnimation");
        }
    }
    /**
     * Read special slide (master, layout, notes) animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideAnimationInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideAnimation", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlideAnimation", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideAnimation", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSpecialSlideAnimation", "storage");
            initialize("getSpecialSlideAnimation", "storage", "String", valueStorage);
            SlideAnimation response = api.getSpecialSlideAnimation(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getSpecialSlideAnimation", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getSpecialSlideAnimation");
        }
    }
    
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideParagraphTest() throws ApiException, Exception {
        initialize("getSpecialSlideParagraph", null, null, null);
        Paragraph response = null;
        String valueName = (String)getTestValue("String", "getSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideParagraph", "subShape");
        response = api.getSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideParagraph", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSpecialSlideParagraph", "name");
            initialize("getSpecialSlideParagraph", "name", "String", valueName);
            Paragraph response = api.getSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getSpecialSlideParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getSpecialSlideParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideParagraph", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSpecialSlideParagraph", "slideIndex");
            initialize("getSpecialSlideParagraph", "slideIndex", "Integer", valueSlideIndex);
            Paragraph response = api.getSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getSpecialSlideParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getSpecialSlideParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideParagraphInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideParagraph", "subShape");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "getSpecialSlideParagraph", "slideType");
            initialize("getSpecialSlideParagraph", "slideType", "SpecialSlideType", valueSlideType);
            Paragraph response = api.getSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "getSpecialSlideParagraph", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "getSpecialSlideParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideParagraph", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getSpecialSlideParagraph", "shapeIndex");
            initialize("getSpecialSlideParagraph", "shapeIndex", "Integer", valueShapeIndex);
            Paragraph response = api.getSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "getSpecialSlideParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "getSpecialSlideParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideParagraphInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideParagraph", "subShape");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getSpecialSlideParagraph", "paragraphIndex");
            initialize("getSpecialSlideParagraph", "paragraphIndex", "Integer", valueParagraphIndex);
            Paragraph response = api.getSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "getSpecialSlideParagraph", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "getSpecialSlideParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideParagraph", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSpecialSlideParagraph", "password");
            initialize("getSpecialSlideParagraph", "password", "String", valuePassword);
            Paragraph response = api.getSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getSpecialSlideParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getSpecialSlideParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideParagraph", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSpecialSlideParagraph", "folder");
            initialize("getSpecialSlideParagraph", "folder", "String", valueFolder);
            Paragraph response = api.getSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getSpecialSlideParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getSpecialSlideParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideParagraph", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSpecialSlideParagraph", "storage");
            initialize("getSpecialSlideParagraph", "storage", "String", valueStorage);
            Paragraph response = api.getSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getSpecialSlideParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getSpecialSlideParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideParagraphInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideParagraph", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "getSpecialSlideParagraph", "subShape");
            initialize("getSpecialSlideParagraph", "subShape", "String", valueSubShape);
            Paragraph response = api.getSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "getSpecialSlideParagraph", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "getSpecialSlideParagraph");
        }
    }
    
    /**
     * Read special shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideParagraphsTest() throws ApiException, Exception {
        initialize("getSpecialSlideParagraphs", null, null, null);
        Paragraphs response = null;
        String valueName = (String)getTestValue("String", "getSpecialSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraphs", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideParagraphs", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideParagraphs", "subShape");
        response = api.getSpecialSlideParagraphs(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Read special shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideParagraphsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraphs", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideParagraphs", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideParagraphs", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSpecialSlideParagraphs", "name");
            initialize("getSpecialSlideParagraphs", "name", "String", valueName);
            Paragraphs response = api.getSpecialSlideParagraphs(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getSpecialSlideParagraphs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getSpecialSlideParagraphs");
        }
    }
    /**
     * Read special shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideParagraphsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraphs", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideParagraphs", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideParagraphs", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSpecialSlideParagraphs", "slideIndex");
            initialize("getSpecialSlideParagraphs", "slideIndex", "Integer", valueSlideIndex);
            Paragraphs response = api.getSpecialSlideParagraphs(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getSpecialSlideParagraphs", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getSpecialSlideParagraphs");
        }
    }
    /**
     * Read special shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideParagraphsInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraphs", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideParagraphs", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideParagraphs", "subShape");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "getSpecialSlideParagraphs", "slideType");
            initialize("getSpecialSlideParagraphs", "slideType", "SpecialSlideType", valueSlideType);
            Paragraphs response = api.getSpecialSlideParagraphs(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "getSpecialSlideParagraphs", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "getSpecialSlideParagraphs");
        }
    }
    /**
     * Read special shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideParagraphsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraphs", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideParagraphs", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideParagraphs", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getSpecialSlideParagraphs", "shapeIndex");
            initialize("getSpecialSlideParagraphs", "shapeIndex", "Integer", valueShapeIndex);
            Paragraphs response = api.getSpecialSlideParagraphs(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "getSpecialSlideParagraphs", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "getSpecialSlideParagraphs");
        }
    }
    /**
     * Read special shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideParagraphsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraphs", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideParagraphs", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideParagraphs", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSpecialSlideParagraphs", "password");
            initialize("getSpecialSlideParagraphs", "password", "String", valuePassword);
            Paragraphs response = api.getSpecialSlideParagraphs(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getSpecialSlideParagraphs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getSpecialSlideParagraphs");
        }
    }
    /**
     * Read special shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideParagraphsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraphs", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideParagraphs", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideParagraphs", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSpecialSlideParagraphs", "folder");
            initialize("getSpecialSlideParagraphs", "folder", "String", valueFolder);
            Paragraphs response = api.getSpecialSlideParagraphs(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getSpecialSlideParagraphs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getSpecialSlideParagraphs");
        }
    }
    /**
     * Read special shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideParagraphsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraphs", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideParagraphs", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideParagraphs", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSpecialSlideParagraphs", "storage");
            initialize("getSpecialSlideParagraphs", "storage", "String", valueStorage);
            Paragraphs response = api.getSpecialSlideParagraphs(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getSpecialSlideParagraphs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getSpecialSlideParagraphs");
        }
    }
    /**
     * Read special shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideParagraphsInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraphs", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideParagraphs", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideParagraphs", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideParagraphs", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "getSpecialSlideParagraphs", "subShape");
            initialize("getSpecialSlideParagraphs", "subShape", "String", valueSubShape);
            Paragraphs response = api.getSpecialSlideParagraphs(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "getSpecialSlideParagraphs", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "getSpecialSlideParagraphs");
        }
    }
    
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlidePortionTest() throws ApiException, Exception {
        initialize("getSpecialSlidePortion", null, null, null);
        Portion response = null;
        String valueName = (String)getTestValue("String", "getSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlidePortion", "subShape");
        response = api.getSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlidePortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlidePortion", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSpecialSlidePortion", "name");
            initialize("getSpecialSlidePortion", "name", "String", valueName);
            Portion response = api.getSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getSpecialSlidePortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getSpecialSlidePortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlidePortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlidePortion", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSpecialSlidePortion", "slideIndex");
            initialize("getSpecialSlidePortion", "slideIndex", "Integer", valueSlideIndex);
            Portion response = api.getSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getSpecialSlidePortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getSpecialSlidePortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlidePortionInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlidePortion", "subShape");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "getSpecialSlidePortion", "slideType");
            initialize("getSpecialSlidePortion", "slideType", "SpecialSlideType", valueSlideType);
            Portion response = api.getSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "getSpecialSlidePortion", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "getSpecialSlidePortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlidePortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlidePortion", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getSpecialSlidePortion", "shapeIndex");
            initialize("getSpecialSlidePortion", "shapeIndex", "Integer", valueShapeIndex);
            Portion response = api.getSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "getSpecialSlidePortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "getSpecialSlidePortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlidePortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlidePortion", "subShape");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getSpecialSlidePortion", "paragraphIndex");
            initialize("getSpecialSlidePortion", "paragraphIndex", "Integer", valueParagraphIndex);
            Portion response = api.getSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "getSpecialSlidePortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "getSpecialSlidePortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlidePortionInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlidePortion", "subShape");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "getSpecialSlidePortion", "portionIndex");
            initialize("getSpecialSlidePortion", "portionIndex", "Integer", valuePortionIndex);
            Portion response = api.getSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "portionIndex", "getSpecialSlidePortion", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "portionIndex", "getSpecialSlidePortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlidePortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlidePortion", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSpecialSlidePortion", "password");
            initialize("getSpecialSlidePortion", "password", "String", valuePassword);
            Portion response = api.getSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getSpecialSlidePortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getSpecialSlidePortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlidePortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlidePortion", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSpecialSlidePortion", "folder");
            initialize("getSpecialSlidePortion", "folder", "String", valueFolder);
            Portion response = api.getSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getSpecialSlidePortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getSpecialSlidePortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlidePortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlidePortion", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSpecialSlidePortion", "storage");
            initialize("getSpecialSlidePortion", "storage", "String", valueStorage);
            Portion response = api.getSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getSpecialSlidePortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getSpecialSlidePortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlidePortionInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlidePortion", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "getSpecialSlidePortion", "subShape");
            initialize("getSpecialSlidePortion", "subShape", "String", valueSubShape);
            Portion response = api.getSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "getSpecialSlidePortion", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "getSpecialSlidePortion");
        }
    }
    
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlidePortionsTest() throws ApiException, Exception {
        initialize("getSpecialSlidePortions", null, null, null);
        Portions response = null;
        String valueName = (String)getTestValue("String", "getSpecialSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlidePortions", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlidePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlidePortions", "subShape");
        response = api.getSpecialSlidePortions(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlidePortionsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlidePortions", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlidePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlidePortions", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSpecialSlidePortions", "name");
            initialize("getSpecialSlidePortions", "name", "String", valueName);
            Portions response = api.getSpecialSlidePortions(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getSpecialSlidePortions", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getSpecialSlidePortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlidePortionsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlidePortions", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlidePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlidePortions", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSpecialSlidePortions", "slideIndex");
            initialize("getSpecialSlidePortions", "slideIndex", "Integer", valueSlideIndex);
            Portions response = api.getSpecialSlidePortions(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getSpecialSlidePortions", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getSpecialSlidePortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlidePortionsInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlidePortions", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlidePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlidePortions", "subShape");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "getSpecialSlidePortions", "slideType");
            initialize("getSpecialSlidePortions", "slideType", "SpecialSlideType", valueSlideType);
            Portions response = api.getSpecialSlidePortions(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "getSpecialSlidePortions", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "getSpecialSlidePortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlidePortionsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlidePortions", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlidePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlidePortions", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getSpecialSlidePortions", "shapeIndex");
            initialize("getSpecialSlidePortions", "shapeIndex", "Integer", valueShapeIndex);
            Portions response = api.getSpecialSlidePortions(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "getSpecialSlidePortions", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "getSpecialSlidePortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlidePortionsInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlidePortions", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlidePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlidePortions", "subShape");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getSpecialSlidePortions", "paragraphIndex");
            initialize("getSpecialSlidePortions", "paragraphIndex", "Integer", valueParagraphIndex);
            Portions response = api.getSpecialSlidePortions(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "getSpecialSlidePortions", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "getSpecialSlidePortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlidePortionsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlidePortions", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlidePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlidePortions", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSpecialSlidePortions", "password");
            initialize("getSpecialSlidePortions", "password", "String", valuePassword);
            Portions response = api.getSpecialSlidePortions(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getSpecialSlidePortions", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getSpecialSlidePortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlidePortionsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlidePortions", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlidePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlidePortions", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSpecialSlidePortions", "folder");
            initialize("getSpecialSlidePortions", "folder", "String", valueFolder);
            Portions response = api.getSpecialSlidePortions(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getSpecialSlidePortions", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getSpecialSlidePortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlidePortionsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlidePortions", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlidePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlidePortions", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSpecialSlidePortions", "storage");
            initialize("getSpecialSlidePortions", "storage", "String", valueStorage);
            Portions response = api.getSpecialSlidePortions(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getSpecialSlidePortions", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getSpecialSlidePortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlidePortionsInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlidePortions", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSpecialSlidePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlidePortions", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlidePortions", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "getSpecialSlidePortions", "subShape");
            initialize("getSpecialSlidePortions", "subShape", "String", valueSubShape);
            Portions response = api.getSpecialSlidePortions(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "getSpecialSlidePortions", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "getSpecialSlidePortions");
        }
    }
    
    /**
     * Read special slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideShapeTest() throws ApiException, Exception {
        initialize("getSpecialSlideShape", null, null, null);
        ShapeBase response = null;
        String valueName = (String)getTestValue("String", "getSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideShape", "subShape");
        response = api.getSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Read special slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideShape", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSpecialSlideShape", "name");
            initialize("getSpecialSlideShape", "name", "String", valueName);
            ShapeBase response = api.getSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getSpecialSlideShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getSpecialSlideShape");
        }
    }
    /**
     * Read special slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideShape", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSpecialSlideShape", "slideIndex");
            initialize("getSpecialSlideShape", "slideIndex", "Integer", valueSlideIndex);
            ShapeBase response = api.getSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getSpecialSlideShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getSpecialSlideShape");
        }
    }
    /**
     * Read special slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideShapeInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideShape", "subShape");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "getSpecialSlideShape", "slideType");
            initialize("getSpecialSlideShape", "slideType", "SpecialSlideType", valueSlideType);
            ShapeBase response = api.getSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "getSpecialSlideShape", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "getSpecialSlideShape");
        }
    }
    /**
     * Read special slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideShape", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getSpecialSlideShape", "shapeIndex");
            initialize("getSpecialSlideShape", "shapeIndex", "Integer", valueShapeIndex);
            ShapeBase response = api.getSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "getSpecialSlideShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "getSpecialSlideShape");
        }
    }
    /**
     * Read special slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideShape", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSpecialSlideShape", "password");
            initialize("getSpecialSlideShape", "password", "String", valuePassword);
            ShapeBase response = api.getSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getSpecialSlideShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getSpecialSlideShape");
        }
    }
    /**
     * Read special slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideShape", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSpecialSlideShape", "folder");
            initialize("getSpecialSlideShape", "folder", "String", valueFolder);
            ShapeBase response = api.getSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getSpecialSlideShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getSpecialSlideShape");
        }
    }
    /**
     * Read special slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideShape", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSpecialSlideShape", "storage");
            initialize("getSpecialSlideShape", "storage", "String", valueStorage);
            ShapeBase response = api.getSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getSpecialSlideShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getSpecialSlideShape");
        }
    }
    /**
     * Read special slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideShapeInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSpecialSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideShape", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "getSpecialSlideShape", "subShape");
            initialize("getSpecialSlideShape", "subShape", "String", valueSubShape);
            ShapeBase response = api.getSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "getSpecialSlideShape", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "getSpecialSlideShape");
        }
    }
    
    /**
     * Read special slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideShapesTest() throws ApiException, Exception {
        initialize("getSpecialSlideShapes", null, null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "getSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideShapes", "slideType");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideShapes", "subShape");
        response = api.getSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Read special slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideShapesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideShapes", "slideType");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideShapes", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSpecialSlideShapes", "name");
            initialize("getSpecialSlideShapes", "name", "String", valueName);
            Shapes response = api.getSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getSpecialSlideShapes", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getSpecialSlideShapes");
        }
    }
    /**
     * Read special slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideShapesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideShapes", "slideType");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideShapes", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSpecialSlideShapes", "slideIndex");
            initialize("getSpecialSlideShapes", "slideIndex", "Integer", valueSlideIndex);
            Shapes response = api.getSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getSpecialSlideShapes", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getSpecialSlideShapes");
        }
    }
    /**
     * Read special slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideShapesInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideShapes", "slideType");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideShapes", "subShape");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "getSpecialSlideShapes", "slideType");
            initialize("getSpecialSlideShapes", "slideType", "SpecialSlideType", valueSlideType);
            Shapes response = api.getSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "getSpecialSlideShapes", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "getSpecialSlideShapes");
        }
    }
    /**
     * Read special slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideShapesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideShapes", "slideType");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideShapes", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSpecialSlideShapes", "password");
            initialize("getSpecialSlideShapes", "password", "String", valuePassword);
            Shapes response = api.getSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getSpecialSlideShapes", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getSpecialSlideShapes");
        }
    }
    /**
     * Read special slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideShapesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideShapes", "slideType");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideShapes", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSpecialSlideShapes", "folder");
            initialize("getSpecialSlideShapes", "folder", "String", valueFolder);
            Shapes response = api.getSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getSpecialSlideShapes", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getSpecialSlideShapes");
        }
    }
    /**
     * Read special slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideShapesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideShapes", "slideType");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideShapes", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSpecialSlideShapes", "storage");
            initialize("getSpecialSlideShapes", "storage", "String", valueStorage);
            Shapes response = api.getSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getSpecialSlideShapes", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getSpecialSlideShapes");
        }
    }
    /**
     * Read special slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialSlideShapesInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSpecialSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSpecialSlideShapes", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "getSpecialSlideShapes", "slideType");
        String valuePassword = (String)getTestValue("String", "getSpecialSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getSpecialSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSpecialSlideShapes", "storage");
        String valueSubShape = (String)getTestValue("String", "getSpecialSlideShapes", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "getSpecialSlideShapes", "subShape");
            initialize("getSpecialSlideShapes", "subShape", "String", valueSubShape);
            Shapes response = api.getSpecialSlideShapes(valueName, valueSlideIndex, valueSlideType, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "getSpecialSlideShapes", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "getSpecialSlideShapes");
        }
    }
    
    /**
     * Read slide theme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getThemeTest() throws ApiException, Exception {
        initialize("getTheme", null, null, null);
        Theme response = null;
        String valueName = (String)getTestValue("String", "getTheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getTheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getTheme", "password");
        String valueFolder = (String)getTestValue("String", "getTheme", "folder");
        String valueStorage = (String)getTestValue("String", "getTheme", "storage");
        response = api.getTheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide theme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getThemeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getTheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getTheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getTheme", "password");
        String valueFolder = (String)getTestValue("String", "getTheme", "folder");
        String valueStorage = (String)getTestValue("String", "getTheme", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getTheme", "name");
            initialize("getTheme", "name", "String", valueName);
            Theme response = api.getTheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getTheme", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getTheme");
        }
    }
    /**
     * Read slide theme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getThemeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getTheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getTheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getTheme", "password");
        String valueFolder = (String)getTestValue("String", "getTheme", "folder");
        String valueStorage = (String)getTestValue("String", "getTheme", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getTheme", "slideIndex");
            initialize("getTheme", "slideIndex", "Integer", valueSlideIndex);
            Theme response = api.getTheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "getTheme", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "getTheme");
        }
    }
    /**
     * Read slide theme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getThemeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getTheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getTheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getTheme", "password");
        String valueFolder = (String)getTestValue("String", "getTheme", "folder");
        String valueStorage = (String)getTestValue("String", "getTheme", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getTheme", "password");
            initialize("getTheme", "password", "String", valuePassword);
            Theme response = api.getTheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getTheme", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getTheme");
        }
    }
    /**
     * Read slide theme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getThemeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getTheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getTheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getTheme", "password");
        String valueFolder = (String)getTestValue("String", "getTheme", "folder");
        String valueStorage = (String)getTestValue("String", "getTheme", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getTheme", "folder");
            initialize("getTheme", "folder", "String", valueFolder);
            Theme response = api.getTheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getTheme", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getTheme");
        }
    }
    /**
     * Read slide theme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getThemeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getTheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getTheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getTheme", "password");
        String valueFolder = (String)getTestValue("String", "getTheme", "folder");
        String valueStorage = (String)getTestValue("String", "getTheme", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getTheme", "storage");
            initialize("getTheme", "storage", "String", valueStorage);
            Theme response = api.getTheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getTheme", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getTheme");
        }
    }
    
    /**
     * Read presentation view properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getViewPropertiesTest() throws ApiException, Exception {
        initialize("getViewProperties", null, null, null);
        ViewProperties response = null;
        String valueName = (String)getTestValue("String", "getViewProperties", "name");
        String valuePassword = (String)getTestValue("String", "getViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "getViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getViewProperties", "storage");
        response = api.getViewProperties(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation view properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getViewPropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getViewProperties", "name");
        String valuePassword = (String)getTestValue("String", "getViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "getViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getViewProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getViewProperties", "name");
            initialize("getViewProperties", "name", "String", valueName);
            ViewProperties response = api.getViewProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "getViewProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "getViewProperties");
        }
    }
    /**
     * Read presentation view properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getViewPropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getViewProperties", "name");
        String valuePassword = (String)getTestValue("String", "getViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "getViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getViewProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getViewProperties", "password");
            initialize("getViewProperties", "password", "String", valuePassword);
            ViewProperties response = api.getViewProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "getViewProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "getViewProperties");
        }
    }
    /**
     * Read presentation view properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getViewPropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getViewProperties", "name");
        String valuePassword = (String)getTestValue("String", "getViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "getViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getViewProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getViewProperties", "folder");
            initialize("getViewProperties", "folder", "String", valueFolder);
            ViewProperties response = api.getViewProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "getViewProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "getViewProperties");
        }
    }
    /**
     * Read presentation view properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getViewPropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getViewProperties", "name");
        String valuePassword = (String)getTestValue("String", "getViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "getViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getViewProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getViewProperties", "storage");
            initialize("getViewProperties", "storage", "String", valueStorage);
            ViewProperties response = api.getViewProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "getViewProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "getViewProperties");
        }
    }
    
    /**
     * Highlight all matches of sample in text frame text using specified color.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void highlightShapeRegexTest() throws ApiException, Exception {
        initialize("highlightShapeRegex", null, null, null);
        Shape response = null;
        String valueName = (String)getTestValue("String", "highlightShapeRegex", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "highlightShapeRegex", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "highlightShapeRegex", "shapeIndex");
        String valueRegex = (String)getTestValue("String", "highlightShapeRegex", "regex");
        String valueColor = (String)getTestValue("String", "highlightShapeRegex", "color");
        Boolean valueWholeWordsOnly = (Boolean)getTestValue("Boolean", "highlightShapeRegex", "wholeWordsOnly");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "highlightShapeRegex", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "highlightShapeRegex", "password");
        String valueFolder = (String)getTestValue("String", "highlightShapeRegex", "folder");
        String valueStorage = (String)getTestValue("String", "highlightShapeRegex", "storage");
        response = api.highlightShapeRegex(valueName, valueSlideIndex, valueShapeIndex, valueRegex, valueColor, valueWholeWordsOnly, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Highlight all matches of sample in text frame text using specified color.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void highlightShapeRegexInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "highlightShapeRegex", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "highlightShapeRegex", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "highlightShapeRegex", "shapeIndex");
        String valueRegex = (String)getTestValue("String", "highlightShapeRegex", "regex");
        String valueColor = (String)getTestValue("String", "highlightShapeRegex", "color");
        Boolean valueWholeWordsOnly = (Boolean)getTestValue("Boolean", "highlightShapeRegex", "wholeWordsOnly");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "highlightShapeRegex", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "highlightShapeRegex", "password");
        String valueFolder = (String)getTestValue("String", "highlightShapeRegex", "folder");
        String valueStorage = (String)getTestValue("String", "highlightShapeRegex", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "highlightShapeRegex", "name");
            initialize("highlightShapeRegex", "name", "String", valueName);
            Shape response = api.highlightShapeRegex(valueName, valueSlideIndex, valueShapeIndex, valueRegex, valueColor, valueWholeWordsOnly, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "highlightShapeRegex", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "highlightShapeRegex");
        }
    }
    /**
     * Highlight all matches of sample in text frame text using specified color.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void highlightShapeRegexInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "highlightShapeRegex", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "highlightShapeRegex", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "highlightShapeRegex", "shapeIndex");
        String valueRegex = (String)getTestValue("String", "highlightShapeRegex", "regex");
        String valueColor = (String)getTestValue("String", "highlightShapeRegex", "color");
        Boolean valueWholeWordsOnly = (Boolean)getTestValue("Boolean", "highlightShapeRegex", "wholeWordsOnly");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "highlightShapeRegex", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "highlightShapeRegex", "password");
        String valueFolder = (String)getTestValue("String", "highlightShapeRegex", "folder");
        String valueStorage = (String)getTestValue("String", "highlightShapeRegex", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "highlightShapeRegex", "slideIndex");
            initialize("highlightShapeRegex", "slideIndex", "Integer", valueSlideIndex);
            Shape response = api.highlightShapeRegex(valueName, valueSlideIndex, valueShapeIndex, valueRegex, valueColor, valueWholeWordsOnly, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "highlightShapeRegex", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "highlightShapeRegex");
        }
    }
    /**
     * Highlight all matches of sample in text frame text using specified color.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void highlightShapeRegexInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "highlightShapeRegex", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "highlightShapeRegex", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "highlightShapeRegex", "shapeIndex");
        String valueRegex = (String)getTestValue("String", "highlightShapeRegex", "regex");
        String valueColor = (String)getTestValue("String", "highlightShapeRegex", "color");
        Boolean valueWholeWordsOnly = (Boolean)getTestValue("Boolean", "highlightShapeRegex", "wholeWordsOnly");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "highlightShapeRegex", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "highlightShapeRegex", "password");
        String valueFolder = (String)getTestValue("String", "highlightShapeRegex", "folder");
        String valueStorage = (String)getTestValue("String", "highlightShapeRegex", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "highlightShapeRegex", "shapeIndex");
            initialize("highlightShapeRegex", "shapeIndex", "Integer", valueShapeIndex);
            Shape response = api.highlightShapeRegex(valueName, valueSlideIndex, valueShapeIndex, valueRegex, valueColor, valueWholeWordsOnly, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "highlightShapeRegex", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "highlightShapeRegex");
        }
    }
    /**
     * Highlight all matches of sample in text frame text using specified color.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void highlightShapeRegexInvalidRegexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "highlightShapeRegex", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "highlightShapeRegex", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "highlightShapeRegex", "shapeIndex");
        String valueRegex = (String)getTestValue("String", "highlightShapeRegex", "regex");
        String valueColor = (String)getTestValue("String", "highlightShapeRegex", "color");
        Boolean valueWholeWordsOnly = (Boolean)getTestValue("Boolean", "highlightShapeRegex", "wholeWordsOnly");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "highlightShapeRegex", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "highlightShapeRegex", "password");
        String valueFolder = (String)getTestValue("String", "highlightShapeRegex", "folder");
        String valueStorage = (String)getTestValue("String", "highlightShapeRegex", "storage");
        try {
            valueRegex = (String)invalidizeTestValue("String", valueRegex, "highlightShapeRegex", "regex");
            initialize("highlightShapeRegex", "regex", "String", valueRegex);
            Shape response = api.highlightShapeRegex(valueName, valueSlideIndex, valueShapeIndex, valueRegex, valueColor, valueWholeWordsOnly, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "regex", "highlightShapeRegex", valueRegex);
        }
        if (needAssertResponse) {
            assertResponse("String", "regex", "highlightShapeRegex");
        }
    }
    /**
     * Highlight all matches of sample in text frame text using specified color.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void highlightShapeRegexInvalidColorTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "highlightShapeRegex", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "highlightShapeRegex", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "highlightShapeRegex", "shapeIndex");
        String valueRegex = (String)getTestValue("String", "highlightShapeRegex", "regex");
        String valueColor = (String)getTestValue("String", "highlightShapeRegex", "color");
        Boolean valueWholeWordsOnly = (Boolean)getTestValue("Boolean", "highlightShapeRegex", "wholeWordsOnly");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "highlightShapeRegex", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "highlightShapeRegex", "password");
        String valueFolder = (String)getTestValue("String", "highlightShapeRegex", "folder");
        String valueStorage = (String)getTestValue("String", "highlightShapeRegex", "storage");
        try {
            valueColor = (String)invalidizeTestValue("String", valueColor, "highlightShapeRegex", "color");
            initialize("highlightShapeRegex", "color", "String", valueColor);
            Shape response = api.highlightShapeRegex(valueName, valueSlideIndex, valueShapeIndex, valueRegex, valueColor, valueWholeWordsOnly, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "color", "highlightShapeRegex", valueColor);
        }
        if (needAssertResponse) {
            assertResponse("String", "color", "highlightShapeRegex");
        }
    }
    /**
     * Highlight all matches of sample in text frame text using specified color.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void highlightShapeRegexInvalidWholeWordsOnlyTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "highlightShapeRegex", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "highlightShapeRegex", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "highlightShapeRegex", "shapeIndex");
        String valueRegex = (String)getTestValue("String", "highlightShapeRegex", "regex");
        String valueColor = (String)getTestValue("String", "highlightShapeRegex", "color");
        Boolean valueWholeWordsOnly = (Boolean)getTestValue("Boolean", "highlightShapeRegex", "wholeWordsOnly");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "highlightShapeRegex", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "highlightShapeRegex", "password");
        String valueFolder = (String)getTestValue("String", "highlightShapeRegex", "folder");
        String valueStorage = (String)getTestValue("String", "highlightShapeRegex", "storage");
        try {
            valueWholeWordsOnly = (Boolean)invalidizeTestValue("Boolean", valueWholeWordsOnly, "highlightShapeRegex", "wholeWordsOnly");
            initialize("highlightShapeRegex", "wholeWordsOnly", "Boolean", valueWholeWordsOnly);
            Shape response = api.highlightShapeRegex(valueName, valueSlideIndex, valueShapeIndex, valueRegex, valueColor, valueWholeWordsOnly, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "wholeWordsOnly", "highlightShapeRegex", valueWholeWordsOnly);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "wholeWordsOnly", "highlightShapeRegex");
        }
    }
    /**
     * Highlight all matches of sample in text frame text using specified color.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void highlightShapeRegexInvalidIgnoreCaseTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "highlightShapeRegex", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "highlightShapeRegex", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "highlightShapeRegex", "shapeIndex");
        String valueRegex = (String)getTestValue("String", "highlightShapeRegex", "regex");
        String valueColor = (String)getTestValue("String", "highlightShapeRegex", "color");
        Boolean valueWholeWordsOnly = (Boolean)getTestValue("Boolean", "highlightShapeRegex", "wholeWordsOnly");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "highlightShapeRegex", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "highlightShapeRegex", "password");
        String valueFolder = (String)getTestValue("String", "highlightShapeRegex", "folder");
        String valueStorage = (String)getTestValue("String", "highlightShapeRegex", "storage");
        try {
            valueIgnoreCase = (Boolean)invalidizeTestValue("Boolean", valueIgnoreCase, "highlightShapeRegex", "ignoreCase");
            initialize("highlightShapeRegex", "ignoreCase", "Boolean", valueIgnoreCase);
            Shape response = api.highlightShapeRegex(valueName, valueSlideIndex, valueShapeIndex, valueRegex, valueColor, valueWholeWordsOnly, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "ignoreCase", "highlightShapeRegex", valueIgnoreCase);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "ignoreCase", "highlightShapeRegex");
        }
    }
    /**
     * Highlight all matches of sample in text frame text using specified color.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void highlightShapeRegexInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "highlightShapeRegex", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "highlightShapeRegex", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "highlightShapeRegex", "shapeIndex");
        String valueRegex = (String)getTestValue("String", "highlightShapeRegex", "regex");
        String valueColor = (String)getTestValue("String", "highlightShapeRegex", "color");
        Boolean valueWholeWordsOnly = (Boolean)getTestValue("Boolean", "highlightShapeRegex", "wholeWordsOnly");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "highlightShapeRegex", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "highlightShapeRegex", "password");
        String valueFolder = (String)getTestValue("String", "highlightShapeRegex", "folder");
        String valueStorage = (String)getTestValue("String", "highlightShapeRegex", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "highlightShapeRegex", "password");
            initialize("highlightShapeRegex", "password", "String", valuePassword);
            Shape response = api.highlightShapeRegex(valueName, valueSlideIndex, valueShapeIndex, valueRegex, valueColor, valueWholeWordsOnly, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "highlightShapeRegex", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "highlightShapeRegex");
        }
    }
    /**
     * Highlight all matches of sample in text frame text using specified color.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void highlightShapeRegexInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "highlightShapeRegex", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "highlightShapeRegex", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "highlightShapeRegex", "shapeIndex");
        String valueRegex = (String)getTestValue("String", "highlightShapeRegex", "regex");
        String valueColor = (String)getTestValue("String", "highlightShapeRegex", "color");
        Boolean valueWholeWordsOnly = (Boolean)getTestValue("Boolean", "highlightShapeRegex", "wholeWordsOnly");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "highlightShapeRegex", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "highlightShapeRegex", "password");
        String valueFolder = (String)getTestValue("String", "highlightShapeRegex", "folder");
        String valueStorage = (String)getTestValue("String", "highlightShapeRegex", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "highlightShapeRegex", "folder");
            initialize("highlightShapeRegex", "folder", "String", valueFolder);
            Shape response = api.highlightShapeRegex(valueName, valueSlideIndex, valueShapeIndex, valueRegex, valueColor, valueWholeWordsOnly, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "highlightShapeRegex", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "highlightShapeRegex");
        }
    }
    /**
     * Highlight all matches of sample in text frame text using specified color.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void highlightShapeRegexInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "highlightShapeRegex", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "highlightShapeRegex", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "highlightShapeRegex", "shapeIndex");
        String valueRegex = (String)getTestValue("String", "highlightShapeRegex", "regex");
        String valueColor = (String)getTestValue("String", "highlightShapeRegex", "color");
        Boolean valueWholeWordsOnly = (Boolean)getTestValue("Boolean", "highlightShapeRegex", "wholeWordsOnly");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "highlightShapeRegex", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "highlightShapeRegex", "password");
        String valueFolder = (String)getTestValue("String", "highlightShapeRegex", "folder");
        String valueStorage = (String)getTestValue("String", "highlightShapeRegex", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "highlightShapeRegex", "storage");
            initialize("highlightShapeRegex", "storage", "String", valueStorage);
            Shape response = api.highlightShapeRegex(valueName, valueSlideIndex, valueShapeIndex, valueRegex, valueColor, valueWholeWordsOnly, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "highlightShapeRegex", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "highlightShapeRegex");
        }
    }
    
    /**
     * Highlight all matches of sample in text frame text using specified color.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void highlightShapeTextTest() throws ApiException, Exception {
        initialize("highlightShapeText", null, null, null);
        Shape response = null;
        String valueName = (String)getTestValue("String", "highlightShapeText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "highlightShapeText", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "highlightShapeText", "shapeIndex");
        String valueText = (String)getTestValue("String", "highlightShapeText", "text");
        String valueColor = (String)getTestValue("String", "highlightShapeText", "color");
        Boolean valueWholeWordsOnly = (Boolean)getTestValue("Boolean", "highlightShapeText", "wholeWordsOnly");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "highlightShapeText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "highlightShapeText", "password");
        String valueFolder = (String)getTestValue("String", "highlightShapeText", "folder");
        String valueStorage = (String)getTestValue("String", "highlightShapeText", "storage");
        response = api.highlightShapeText(valueName, valueSlideIndex, valueShapeIndex, valueText, valueColor, valueWholeWordsOnly, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Highlight all matches of sample in text frame text using specified color.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void highlightShapeTextInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "highlightShapeText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "highlightShapeText", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "highlightShapeText", "shapeIndex");
        String valueText = (String)getTestValue("String", "highlightShapeText", "text");
        String valueColor = (String)getTestValue("String", "highlightShapeText", "color");
        Boolean valueWholeWordsOnly = (Boolean)getTestValue("Boolean", "highlightShapeText", "wholeWordsOnly");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "highlightShapeText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "highlightShapeText", "password");
        String valueFolder = (String)getTestValue("String", "highlightShapeText", "folder");
        String valueStorage = (String)getTestValue("String", "highlightShapeText", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "highlightShapeText", "name");
            initialize("highlightShapeText", "name", "String", valueName);
            Shape response = api.highlightShapeText(valueName, valueSlideIndex, valueShapeIndex, valueText, valueColor, valueWholeWordsOnly, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "highlightShapeText", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "highlightShapeText");
        }
    }
    /**
     * Highlight all matches of sample in text frame text using specified color.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void highlightShapeTextInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "highlightShapeText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "highlightShapeText", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "highlightShapeText", "shapeIndex");
        String valueText = (String)getTestValue("String", "highlightShapeText", "text");
        String valueColor = (String)getTestValue("String", "highlightShapeText", "color");
        Boolean valueWholeWordsOnly = (Boolean)getTestValue("Boolean", "highlightShapeText", "wholeWordsOnly");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "highlightShapeText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "highlightShapeText", "password");
        String valueFolder = (String)getTestValue("String", "highlightShapeText", "folder");
        String valueStorage = (String)getTestValue("String", "highlightShapeText", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "highlightShapeText", "slideIndex");
            initialize("highlightShapeText", "slideIndex", "Integer", valueSlideIndex);
            Shape response = api.highlightShapeText(valueName, valueSlideIndex, valueShapeIndex, valueText, valueColor, valueWholeWordsOnly, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "highlightShapeText", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "highlightShapeText");
        }
    }
    /**
     * Highlight all matches of sample in text frame text using specified color.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void highlightShapeTextInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "highlightShapeText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "highlightShapeText", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "highlightShapeText", "shapeIndex");
        String valueText = (String)getTestValue("String", "highlightShapeText", "text");
        String valueColor = (String)getTestValue("String", "highlightShapeText", "color");
        Boolean valueWholeWordsOnly = (Boolean)getTestValue("Boolean", "highlightShapeText", "wholeWordsOnly");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "highlightShapeText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "highlightShapeText", "password");
        String valueFolder = (String)getTestValue("String", "highlightShapeText", "folder");
        String valueStorage = (String)getTestValue("String", "highlightShapeText", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "highlightShapeText", "shapeIndex");
            initialize("highlightShapeText", "shapeIndex", "Integer", valueShapeIndex);
            Shape response = api.highlightShapeText(valueName, valueSlideIndex, valueShapeIndex, valueText, valueColor, valueWholeWordsOnly, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "highlightShapeText", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "highlightShapeText");
        }
    }
    /**
     * Highlight all matches of sample in text frame text using specified color.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void highlightShapeTextInvalidTextTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "highlightShapeText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "highlightShapeText", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "highlightShapeText", "shapeIndex");
        String valueText = (String)getTestValue("String", "highlightShapeText", "text");
        String valueColor = (String)getTestValue("String", "highlightShapeText", "color");
        Boolean valueWholeWordsOnly = (Boolean)getTestValue("Boolean", "highlightShapeText", "wholeWordsOnly");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "highlightShapeText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "highlightShapeText", "password");
        String valueFolder = (String)getTestValue("String", "highlightShapeText", "folder");
        String valueStorage = (String)getTestValue("String", "highlightShapeText", "storage");
        try {
            valueText = (String)invalidizeTestValue("String", valueText, "highlightShapeText", "text");
            initialize("highlightShapeText", "text", "String", valueText);
            Shape response = api.highlightShapeText(valueName, valueSlideIndex, valueShapeIndex, valueText, valueColor, valueWholeWordsOnly, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "text", "highlightShapeText", valueText);
        }
        if (needAssertResponse) {
            assertResponse("String", "text", "highlightShapeText");
        }
    }
    /**
     * Highlight all matches of sample in text frame text using specified color.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void highlightShapeTextInvalidColorTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "highlightShapeText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "highlightShapeText", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "highlightShapeText", "shapeIndex");
        String valueText = (String)getTestValue("String", "highlightShapeText", "text");
        String valueColor = (String)getTestValue("String", "highlightShapeText", "color");
        Boolean valueWholeWordsOnly = (Boolean)getTestValue("Boolean", "highlightShapeText", "wholeWordsOnly");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "highlightShapeText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "highlightShapeText", "password");
        String valueFolder = (String)getTestValue("String", "highlightShapeText", "folder");
        String valueStorage = (String)getTestValue("String", "highlightShapeText", "storage");
        try {
            valueColor = (String)invalidizeTestValue("String", valueColor, "highlightShapeText", "color");
            initialize("highlightShapeText", "color", "String", valueColor);
            Shape response = api.highlightShapeText(valueName, valueSlideIndex, valueShapeIndex, valueText, valueColor, valueWholeWordsOnly, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "color", "highlightShapeText", valueColor);
        }
        if (needAssertResponse) {
            assertResponse("String", "color", "highlightShapeText");
        }
    }
    /**
     * Highlight all matches of sample in text frame text using specified color.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void highlightShapeTextInvalidWholeWordsOnlyTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "highlightShapeText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "highlightShapeText", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "highlightShapeText", "shapeIndex");
        String valueText = (String)getTestValue("String", "highlightShapeText", "text");
        String valueColor = (String)getTestValue("String", "highlightShapeText", "color");
        Boolean valueWholeWordsOnly = (Boolean)getTestValue("Boolean", "highlightShapeText", "wholeWordsOnly");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "highlightShapeText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "highlightShapeText", "password");
        String valueFolder = (String)getTestValue("String", "highlightShapeText", "folder");
        String valueStorage = (String)getTestValue("String", "highlightShapeText", "storage");
        try {
            valueWholeWordsOnly = (Boolean)invalidizeTestValue("Boolean", valueWholeWordsOnly, "highlightShapeText", "wholeWordsOnly");
            initialize("highlightShapeText", "wholeWordsOnly", "Boolean", valueWholeWordsOnly);
            Shape response = api.highlightShapeText(valueName, valueSlideIndex, valueShapeIndex, valueText, valueColor, valueWholeWordsOnly, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "wholeWordsOnly", "highlightShapeText", valueWholeWordsOnly);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "wholeWordsOnly", "highlightShapeText");
        }
    }
    /**
     * Highlight all matches of sample in text frame text using specified color.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void highlightShapeTextInvalidIgnoreCaseTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "highlightShapeText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "highlightShapeText", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "highlightShapeText", "shapeIndex");
        String valueText = (String)getTestValue("String", "highlightShapeText", "text");
        String valueColor = (String)getTestValue("String", "highlightShapeText", "color");
        Boolean valueWholeWordsOnly = (Boolean)getTestValue("Boolean", "highlightShapeText", "wholeWordsOnly");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "highlightShapeText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "highlightShapeText", "password");
        String valueFolder = (String)getTestValue("String", "highlightShapeText", "folder");
        String valueStorage = (String)getTestValue("String", "highlightShapeText", "storage");
        try {
            valueIgnoreCase = (Boolean)invalidizeTestValue("Boolean", valueIgnoreCase, "highlightShapeText", "ignoreCase");
            initialize("highlightShapeText", "ignoreCase", "Boolean", valueIgnoreCase);
            Shape response = api.highlightShapeText(valueName, valueSlideIndex, valueShapeIndex, valueText, valueColor, valueWholeWordsOnly, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "ignoreCase", "highlightShapeText", valueIgnoreCase);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "ignoreCase", "highlightShapeText");
        }
    }
    /**
     * Highlight all matches of sample in text frame text using specified color.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void highlightShapeTextInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "highlightShapeText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "highlightShapeText", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "highlightShapeText", "shapeIndex");
        String valueText = (String)getTestValue("String", "highlightShapeText", "text");
        String valueColor = (String)getTestValue("String", "highlightShapeText", "color");
        Boolean valueWholeWordsOnly = (Boolean)getTestValue("Boolean", "highlightShapeText", "wholeWordsOnly");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "highlightShapeText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "highlightShapeText", "password");
        String valueFolder = (String)getTestValue("String", "highlightShapeText", "folder");
        String valueStorage = (String)getTestValue("String", "highlightShapeText", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "highlightShapeText", "password");
            initialize("highlightShapeText", "password", "String", valuePassword);
            Shape response = api.highlightShapeText(valueName, valueSlideIndex, valueShapeIndex, valueText, valueColor, valueWholeWordsOnly, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "highlightShapeText", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "highlightShapeText");
        }
    }
    /**
     * Highlight all matches of sample in text frame text using specified color.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void highlightShapeTextInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "highlightShapeText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "highlightShapeText", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "highlightShapeText", "shapeIndex");
        String valueText = (String)getTestValue("String", "highlightShapeText", "text");
        String valueColor = (String)getTestValue("String", "highlightShapeText", "color");
        Boolean valueWholeWordsOnly = (Boolean)getTestValue("Boolean", "highlightShapeText", "wholeWordsOnly");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "highlightShapeText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "highlightShapeText", "password");
        String valueFolder = (String)getTestValue("String", "highlightShapeText", "folder");
        String valueStorage = (String)getTestValue("String", "highlightShapeText", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "highlightShapeText", "folder");
            initialize("highlightShapeText", "folder", "String", valueFolder);
            Shape response = api.highlightShapeText(valueName, valueSlideIndex, valueShapeIndex, valueText, valueColor, valueWholeWordsOnly, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "highlightShapeText", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "highlightShapeText");
        }
    }
    /**
     * Highlight all matches of sample in text frame text using specified color.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void highlightShapeTextInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "highlightShapeText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "highlightShapeText", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "highlightShapeText", "shapeIndex");
        String valueText = (String)getTestValue("String", "highlightShapeText", "text");
        String valueColor = (String)getTestValue("String", "highlightShapeText", "color");
        Boolean valueWholeWordsOnly = (Boolean)getTestValue("Boolean", "highlightShapeText", "wholeWordsOnly");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "highlightShapeText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "highlightShapeText", "password");
        String valueFolder = (String)getTestValue("String", "highlightShapeText", "folder");
        String valueStorage = (String)getTestValue("String", "highlightShapeText", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "highlightShapeText", "storage");
            initialize("highlightShapeText", "storage", "String", valueStorage);
            Shape response = api.highlightShapeText(valueName, valueSlideIndex, valueShapeIndex, valueText, valueColor, valueWholeWordsOnly, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "highlightShapeText", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "highlightShapeText");
        }
    }
    
    /**
     * Create presentation document from html.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importFromHtmlTest() throws ApiException, Exception {
        initialize("importFromHtml", null, null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "importFromHtml", "name");
        String valueHtml = (String)getTestValue("String", "importFromHtml", "html");
        String valuePassword = (String)getTestValue("String", "importFromHtml", "password");
        String valueFolder = (String)getTestValue("String", "importFromHtml", "folder");
        String valueStorage = (String)getTestValue("String", "importFromHtml", "storage");
        response = api.importFromHtml(valueName, valueHtml, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create presentation document from html.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importFromHtmlInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importFromHtml", "name");
        String valueHtml = (String)getTestValue("String", "importFromHtml", "html");
        String valuePassword = (String)getTestValue("String", "importFromHtml", "password");
        String valueFolder = (String)getTestValue("String", "importFromHtml", "folder");
        String valueStorage = (String)getTestValue("String", "importFromHtml", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "importFromHtml", "name");
            initialize("importFromHtml", "name", "String", valueName);
            Document response = api.importFromHtml(valueName, valueHtml, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "importFromHtml", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "importFromHtml");
        }
    }
    /**
     * Create presentation document from html.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importFromHtmlInvalidHtmlTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importFromHtml", "name");
        String valueHtml = (String)getTestValue("String", "importFromHtml", "html");
        String valuePassword = (String)getTestValue("String", "importFromHtml", "password");
        String valueFolder = (String)getTestValue("String", "importFromHtml", "folder");
        String valueStorage = (String)getTestValue("String", "importFromHtml", "storage");
        try {
            valueHtml = (String)invalidizeTestValue("String", valueHtml, "importFromHtml", "html");
            initialize("importFromHtml", "html", "String", valueHtml);
            Document response = api.importFromHtml(valueName, valueHtml, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "html", "importFromHtml", valueHtml);
        }
        if (needAssertResponse) {
            assertResponse("String", "html", "importFromHtml");
        }
    }
    /**
     * Create presentation document from html.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importFromHtmlInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importFromHtml", "name");
        String valueHtml = (String)getTestValue("String", "importFromHtml", "html");
        String valuePassword = (String)getTestValue("String", "importFromHtml", "password");
        String valueFolder = (String)getTestValue("String", "importFromHtml", "folder");
        String valueStorage = (String)getTestValue("String", "importFromHtml", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "importFromHtml", "password");
            initialize("importFromHtml", "password", "String", valuePassword);
            Document response = api.importFromHtml(valueName, valueHtml, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "importFromHtml", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "importFromHtml");
        }
    }
    /**
     * Create presentation document from html.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importFromHtmlInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importFromHtml", "name");
        String valueHtml = (String)getTestValue("String", "importFromHtml", "html");
        String valuePassword = (String)getTestValue("String", "importFromHtml", "password");
        String valueFolder = (String)getTestValue("String", "importFromHtml", "folder");
        String valueStorage = (String)getTestValue("String", "importFromHtml", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "importFromHtml", "folder");
            initialize("importFromHtml", "folder", "String", valueFolder);
            Document response = api.importFromHtml(valueName, valueHtml, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "importFromHtml", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "importFromHtml");
        }
    }
    /**
     * Create presentation document from html.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importFromHtmlInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importFromHtml", "name");
        String valueHtml = (String)getTestValue("String", "importFromHtml", "html");
        String valuePassword = (String)getTestValue("String", "importFromHtml", "password");
        String valueFolder = (String)getTestValue("String", "importFromHtml", "folder");
        String valueStorage = (String)getTestValue("String", "importFromHtml", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "importFromHtml", "storage");
            initialize("importFromHtml", "storage", "String", valueStorage);
            Document response = api.importFromHtml(valueName, valueHtml, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "importFromHtml", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "importFromHtml");
        }
    }
    
    /**
     * Create presentation document from pdf or append pdf to an existing presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importFromPdfTest() throws ApiException, Exception {
        initialize("importFromPdf", null, null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "importFromPdf", "name");
        byte[] valuePdf = (byte[])getTestValue("byte[]", "importFromPdf", "pdf");
        String valuePassword = (String)getTestValue("String", "importFromPdf", "password");
        String valueFolder = (String)getTestValue("String", "importFromPdf", "folder");
        String valueStorage = (String)getTestValue("String", "importFromPdf", "storage");
        response = api.importFromPdf(valueName, valuePdf, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create presentation document from pdf or append pdf to an existing presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importFromPdfInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importFromPdf", "name");
        byte[] valuePdf = (byte[])getTestValue("byte[]", "importFromPdf", "pdf");
        String valuePassword = (String)getTestValue("String", "importFromPdf", "password");
        String valueFolder = (String)getTestValue("String", "importFromPdf", "folder");
        String valueStorage = (String)getTestValue("String", "importFromPdf", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "importFromPdf", "name");
            initialize("importFromPdf", "name", "String", valueName);
            Document response = api.importFromPdf(valueName, valuePdf, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "importFromPdf", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "importFromPdf");
        }
    }
    /**
     * Create presentation document from pdf or append pdf to an existing presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importFromPdfInvalidPdfTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importFromPdf", "name");
        byte[] valuePdf = (byte[])getTestValue("byte[]", "importFromPdf", "pdf");
        String valuePassword = (String)getTestValue("String", "importFromPdf", "password");
        String valueFolder = (String)getTestValue("String", "importFromPdf", "folder");
        String valueStorage = (String)getTestValue("String", "importFromPdf", "storage");
        try {
            valuePdf = (byte[])invalidizeTestValue("byte[]", valuePdf, "importFromPdf", "pdf");
            initialize("importFromPdf", "pdf", "byte[]", valuePdf);
            Document response = api.importFromPdf(valueName, valuePdf, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "pdf", "importFromPdf", valuePdf);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "pdf", "importFromPdf");
        }
    }
    /**
     * Create presentation document from pdf or append pdf to an existing presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importFromPdfInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importFromPdf", "name");
        byte[] valuePdf = (byte[])getTestValue("byte[]", "importFromPdf", "pdf");
        String valuePassword = (String)getTestValue("String", "importFromPdf", "password");
        String valueFolder = (String)getTestValue("String", "importFromPdf", "folder");
        String valueStorage = (String)getTestValue("String", "importFromPdf", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "importFromPdf", "password");
            initialize("importFromPdf", "password", "String", valuePassword);
            Document response = api.importFromPdf(valueName, valuePdf, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "importFromPdf", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "importFromPdf");
        }
    }
    /**
     * Create presentation document from pdf or append pdf to an existing presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importFromPdfInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importFromPdf", "name");
        byte[] valuePdf = (byte[])getTestValue("byte[]", "importFromPdf", "pdf");
        String valuePassword = (String)getTestValue("String", "importFromPdf", "password");
        String valueFolder = (String)getTestValue("String", "importFromPdf", "folder");
        String valueStorage = (String)getTestValue("String", "importFromPdf", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "importFromPdf", "folder");
            initialize("importFromPdf", "folder", "String", valueFolder);
            Document response = api.importFromPdf(valueName, valuePdf, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "importFromPdf", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "importFromPdf");
        }
    }
    /**
     * Create presentation document from pdf or append pdf to an existing presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importFromPdfInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importFromPdf", "name");
        byte[] valuePdf = (byte[])getTestValue("byte[]", "importFromPdf", "pdf");
        String valuePassword = (String)getTestValue("String", "importFromPdf", "password");
        String valueFolder = (String)getTestValue("String", "importFromPdf", "folder");
        String valueStorage = (String)getTestValue("String", "importFromPdf", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "importFromPdf", "storage");
            initialize("importFromPdf", "storage", "String", valueStorage);
            Document response = api.importFromPdf(valueName, valuePdf, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "importFromPdf", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "importFromPdf");
        }
    }
    
    /**
     * Imports shapes from SVG file.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importShapesFromSvgTest() throws ApiException, Exception {
        initialize("importShapesFromSvg", null, null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "importShapesFromSvg", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "importShapesFromSvg", "slideIndex");
        byte[] valueImage = (byte[])getTestValue("byte[]", "importShapesFromSvg", "image");
        Integer valueX = (Integer)getTestValue("Integer", "importShapesFromSvg", "x");
        Integer valueY = (Integer)getTestValue("Integer", "importShapesFromSvg", "y");
        Integer valueWidth = (Integer)getTestValue("Integer", "importShapesFromSvg", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "importShapesFromSvg", "height");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "importShapesFromSvg", "shapes");
        Boolean valueGroup = (Boolean)getTestValue("Boolean", "importShapesFromSvg", "group");
        String valuePassword = (String)getTestValue("String", "importShapesFromSvg", "password");
        String valueFolder = (String)getTestValue("String", "importShapesFromSvg", "folder");
        String valueStorage = (String)getTestValue("String", "importShapesFromSvg", "storage");
        response = api.importShapesFromSvg(valueName, valueSlideIndex, valueImage, valueX, valueY, valueWidth, valueHeight, valueShapes, valueGroup, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Imports shapes from SVG file.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importShapesFromSvgInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importShapesFromSvg", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "importShapesFromSvg", "slideIndex");
        byte[] valueImage = (byte[])getTestValue("byte[]", "importShapesFromSvg", "image");
        Integer valueX = (Integer)getTestValue("Integer", "importShapesFromSvg", "x");
        Integer valueY = (Integer)getTestValue("Integer", "importShapesFromSvg", "y");
        Integer valueWidth = (Integer)getTestValue("Integer", "importShapesFromSvg", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "importShapesFromSvg", "height");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "importShapesFromSvg", "shapes");
        Boolean valueGroup = (Boolean)getTestValue("Boolean", "importShapesFromSvg", "group");
        String valuePassword = (String)getTestValue("String", "importShapesFromSvg", "password");
        String valueFolder = (String)getTestValue("String", "importShapesFromSvg", "folder");
        String valueStorage = (String)getTestValue("String", "importShapesFromSvg", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "importShapesFromSvg", "name");
            initialize("importShapesFromSvg", "name", "String", valueName);
            Shapes response = api.importShapesFromSvg(valueName, valueSlideIndex, valueImage, valueX, valueY, valueWidth, valueHeight, valueShapes, valueGroup, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "importShapesFromSvg", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "importShapesFromSvg");
        }
    }
    /**
     * Imports shapes from SVG file.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importShapesFromSvgInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importShapesFromSvg", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "importShapesFromSvg", "slideIndex");
        byte[] valueImage = (byte[])getTestValue("byte[]", "importShapesFromSvg", "image");
        Integer valueX = (Integer)getTestValue("Integer", "importShapesFromSvg", "x");
        Integer valueY = (Integer)getTestValue("Integer", "importShapesFromSvg", "y");
        Integer valueWidth = (Integer)getTestValue("Integer", "importShapesFromSvg", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "importShapesFromSvg", "height");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "importShapesFromSvg", "shapes");
        Boolean valueGroup = (Boolean)getTestValue("Boolean", "importShapesFromSvg", "group");
        String valuePassword = (String)getTestValue("String", "importShapesFromSvg", "password");
        String valueFolder = (String)getTestValue("String", "importShapesFromSvg", "folder");
        String valueStorage = (String)getTestValue("String", "importShapesFromSvg", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "importShapesFromSvg", "slideIndex");
            initialize("importShapesFromSvg", "slideIndex", "Integer", valueSlideIndex);
            Shapes response = api.importShapesFromSvg(valueName, valueSlideIndex, valueImage, valueX, valueY, valueWidth, valueHeight, valueShapes, valueGroup, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "importShapesFromSvg", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "importShapesFromSvg");
        }
    }
    /**
     * Imports shapes from SVG file.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importShapesFromSvgInvalidImageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importShapesFromSvg", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "importShapesFromSvg", "slideIndex");
        byte[] valueImage = (byte[])getTestValue("byte[]", "importShapesFromSvg", "image");
        Integer valueX = (Integer)getTestValue("Integer", "importShapesFromSvg", "x");
        Integer valueY = (Integer)getTestValue("Integer", "importShapesFromSvg", "y");
        Integer valueWidth = (Integer)getTestValue("Integer", "importShapesFromSvg", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "importShapesFromSvg", "height");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "importShapesFromSvg", "shapes");
        Boolean valueGroup = (Boolean)getTestValue("Boolean", "importShapesFromSvg", "group");
        String valuePassword = (String)getTestValue("String", "importShapesFromSvg", "password");
        String valueFolder = (String)getTestValue("String", "importShapesFromSvg", "folder");
        String valueStorage = (String)getTestValue("String", "importShapesFromSvg", "storage");
        try {
            valueImage = (byte[])invalidizeTestValue("byte[]", valueImage, "importShapesFromSvg", "image");
            initialize("importShapesFromSvg", "image", "byte[]", valueImage);
            Shapes response = api.importShapesFromSvg(valueName, valueSlideIndex, valueImage, valueX, valueY, valueWidth, valueHeight, valueShapes, valueGroup, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "image", "importShapesFromSvg", valueImage);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "image", "importShapesFromSvg");
        }
    }
    /**
     * Imports shapes from SVG file.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importShapesFromSvgInvalidXTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importShapesFromSvg", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "importShapesFromSvg", "slideIndex");
        byte[] valueImage = (byte[])getTestValue("byte[]", "importShapesFromSvg", "image");
        Integer valueX = (Integer)getTestValue("Integer", "importShapesFromSvg", "x");
        Integer valueY = (Integer)getTestValue("Integer", "importShapesFromSvg", "y");
        Integer valueWidth = (Integer)getTestValue("Integer", "importShapesFromSvg", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "importShapesFromSvg", "height");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "importShapesFromSvg", "shapes");
        Boolean valueGroup = (Boolean)getTestValue("Boolean", "importShapesFromSvg", "group");
        String valuePassword = (String)getTestValue("String", "importShapesFromSvg", "password");
        String valueFolder = (String)getTestValue("String", "importShapesFromSvg", "folder");
        String valueStorage = (String)getTestValue("String", "importShapesFromSvg", "storage");
        try {
            valueX = (Integer)invalidizeTestValue("Integer", valueX, "importShapesFromSvg", "x");
            initialize("importShapesFromSvg", "x", "Integer", valueX);
            Shapes response = api.importShapesFromSvg(valueName, valueSlideIndex, valueImage, valueX, valueY, valueWidth, valueHeight, valueShapes, valueGroup, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "x", "importShapesFromSvg", valueX);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "x", "importShapesFromSvg");
        }
    }
    /**
     * Imports shapes from SVG file.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importShapesFromSvgInvalidYTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importShapesFromSvg", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "importShapesFromSvg", "slideIndex");
        byte[] valueImage = (byte[])getTestValue("byte[]", "importShapesFromSvg", "image");
        Integer valueX = (Integer)getTestValue("Integer", "importShapesFromSvg", "x");
        Integer valueY = (Integer)getTestValue("Integer", "importShapesFromSvg", "y");
        Integer valueWidth = (Integer)getTestValue("Integer", "importShapesFromSvg", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "importShapesFromSvg", "height");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "importShapesFromSvg", "shapes");
        Boolean valueGroup = (Boolean)getTestValue("Boolean", "importShapesFromSvg", "group");
        String valuePassword = (String)getTestValue("String", "importShapesFromSvg", "password");
        String valueFolder = (String)getTestValue("String", "importShapesFromSvg", "folder");
        String valueStorage = (String)getTestValue("String", "importShapesFromSvg", "storage");
        try {
            valueY = (Integer)invalidizeTestValue("Integer", valueY, "importShapesFromSvg", "y");
            initialize("importShapesFromSvg", "y", "Integer", valueY);
            Shapes response = api.importShapesFromSvg(valueName, valueSlideIndex, valueImage, valueX, valueY, valueWidth, valueHeight, valueShapes, valueGroup, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "y", "importShapesFromSvg", valueY);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "y", "importShapesFromSvg");
        }
    }
    /**
     * Imports shapes from SVG file.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importShapesFromSvgInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importShapesFromSvg", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "importShapesFromSvg", "slideIndex");
        byte[] valueImage = (byte[])getTestValue("byte[]", "importShapesFromSvg", "image");
        Integer valueX = (Integer)getTestValue("Integer", "importShapesFromSvg", "x");
        Integer valueY = (Integer)getTestValue("Integer", "importShapesFromSvg", "y");
        Integer valueWidth = (Integer)getTestValue("Integer", "importShapesFromSvg", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "importShapesFromSvg", "height");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "importShapesFromSvg", "shapes");
        Boolean valueGroup = (Boolean)getTestValue("Boolean", "importShapesFromSvg", "group");
        String valuePassword = (String)getTestValue("String", "importShapesFromSvg", "password");
        String valueFolder = (String)getTestValue("String", "importShapesFromSvg", "folder");
        String valueStorage = (String)getTestValue("String", "importShapesFromSvg", "storage");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "importShapesFromSvg", "width");
            initialize("importShapesFromSvg", "width", "Integer", valueWidth);
            Shapes response = api.importShapesFromSvg(valueName, valueSlideIndex, valueImage, valueX, valueY, valueWidth, valueHeight, valueShapes, valueGroup, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "width", "importShapesFromSvg", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "width", "importShapesFromSvg");
        }
    }
    /**
     * Imports shapes from SVG file.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importShapesFromSvgInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importShapesFromSvg", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "importShapesFromSvg", "slideIndex");
        byte[] valueImage = (byte[])getTestValue("byte[]", "importShapesFromSvg", "image");
        Integer valueX = (Integer)getTestValue("Integer", "importShapesFromSvg", "x");
        Integer valueY = (Integer)getTestValue("Integer", "importShapesFromSvg", "y");
        Integer valueWidth = (Integer)getTestValue("Integer", "importShapesFromSvg", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "importShapesFromSvg", "height");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "importShapesFromSvg", "shapes");
        Boolean valueGroup = (Boolean)getTestValue("Boolean", "importShapesFromSvg", "group");
        String valuePassword = (String)getTestValue("String", "importShapesFromSvg", "password");
        String valueFolder = (String)getTestValue("String", "importShapesFromSvg", "folder");
        String valueStorage = (String)getTestValue("String", "importShapesFromSvg", "storage");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "importShapesFromSvg", "height");
            initialize("importShapesFromSvg", "height", "Integer", valueHeight);
            Shapes response = api.importShapesFromSvg(valueName, valueSlideIndex, valueImage, valueX, valueY, valueWidth, valueHeight, valueShapes, valueGroup, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "height", "importShapesFromSvg", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "height", "importShapesFromSvg");
        }
    }
    /**
     * Imports shapes from SVG file.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importShapesFromSvgInvalidShapesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importShapesFromSvg", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "importShapesFromSvg", "slideIndex");
        byte[] valueImage = (byte[])getTestValue("byte[]", "importShapesFromSvg", "image");
        Integer valueX = (Integer)getTestValue("Integer", "importShapesFromSvg", "x");
        Integer valueY = (Integer)getTestValue("Integer", "importShapesFromSvg", "y");
        Integer valueWidth = (Integer)getTestValue("Integer", "importShapesFromSvg", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "importShapesFromSvg", "height");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "importShapesFromSvg", "shapes");
        Boolean valueGroup = (Boolean)getTestValue("Boolean", "importShapesFromSvg", "group");
        String valuePassword = (String)getTestValue("String", "importShapesFromSvg", "password");
        String valueFolder = (String)getTestValue("String", "importShapesFromSvg", "folder");
        String valueStorage = (String)getTestValue("String", "importShapesFromSvg", "storage");
        try {
            valueShapes = (List<Integer>)invalidizeTestValue("List<Integer>", valueShapes, "importShapesFromSvg", "shapes");
            initialize("importShapesFromSvg", "shapes", "List<Integer>", valueShapes);
            Shapes response = api.importShapesFromSvg(valueName, valueSlideIndex, valueImage, valueX, valueY, valueWidth, valueHeight, valueShapes, valueGroup, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "List<Integer>", "shapes", "importShapesFromSvg", valueShapes);
        }
        if (needAssertResponse) {
            assertResponse("List<Integer>", "shapes", "importShapesFromSvg");
        }
    }
    /**
     * Imports shapes from SVG file.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importShapesFromSvgInvalidGroupTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importShapesFromSvg", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "importShapesFromSvg", "slideIndex");
        byte[] valueImage = (byte[])getTestValue("byte[]", "importShapesFromSvg", "image");
        Integer valueX = (Integer)getTestValue("Integer", "importShapesFromSvg", "x");
        Integer valueY = (Integer)getTestValue("Integer", "importShapesFromSvg", "y");
        Integer valueWidth = (Integer)getTestValue("Integer", "importShapesFromSvg", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "importShapesFromSvg", "height");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "importShapesFromSvg", "shapes");
        Boolean valueGroup = (Boolean)getTestValue("Boolean", "importShapesFromSvg", "group");
        String valuePassword = (String)getTestValue("String", "importShapesFromSvg", "password");
        String valueFolder = (String)getTestValue("String", "importShapesFromSvg", "folder");
        String valueStorage = (String)getTestValue("String", "importShapesFromSvg", "storage");
        try {
            valueGroup = (Boolean)invalidizeTestValue("Boolean", valueGroup, "importShapesFromSvg", "group");
            initialize("importShapesFromSvg", "group", "Boolean", valueGroup);
            Shapes response = api.importShapesFromSvg(valueName, valueSlideIndex, valueImage, valueX, valueY, valueWidth, valueHeight, valueShapes, valueGroup, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "group", "importShapesFromSvg", valueGroup);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "group", "importShapesFromSvg");
        }
    }
    /**
     * Imports shapes from SVG file.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importShapesFromSvgInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importShapesFromSvg", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "importShapesFromSvg", "slideIndex");
        byte[] valueImage = (byte[])getTestValue("byte[]", "importShapesFromSvg", "image");
        Integer valueX = (Integer)getTestValue("Integer", "importShapesFromSvg", "x");
        Integer valueY = (Integer)getTestValue("Integer", "importShapesFromSvg", "y");
        Integer valueWidth = (Integer)getTestValue("Integer", "importShapesFromSvg", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "importShapesFromSvg", "height");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "importShapesFromSvg", "shapes");
        Boolean valueGroup = (Boolean)getTestValue("Boolean", "importShapesFromSvg", "group");
        String valuePassword = (String)getTestValue("String", "importShapesFromSvg", "password");
        String valueFolder = (String)getTestValue("String", "importShapesFromSvg", "folder");
        String valueStorage = (String)getTestValue("String", "importShapesFromSvg", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "importShapesFromSvg", "password");
            initialize("importShapesFromSvg", "password", "String", valuePassword);
            Shapes response = api.importShapesFromSvg(valueName, valueSlideIndex, valueImage, valueX, valueY, valueWidth, valueHeight, valueShapes, valueGroup, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "importShapesFromSvg", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "importShapesFromSvg");
        }
    }
    /**
     * Imports shapes from SVG file.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importShapesFromSvgInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importShapesFromSvg", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "importShapesFromSvg", "slideIndex");
        byte[] valueImage = (byte[])getTestValue("byte[]", "importShapesFromSvg", "image");
        Integer valueX = (Integer)getTestValue("Integer", "importShapesFromSvg", "x");
        Integer valueY = (Integer)getTestValue("Integer", "importShapesFromSvg", "y");
        Integer valueWidth = (Integer)getTestValue("Integer", "importShapesFromSvg", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "importShapesFromSvg", "height");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "importShapesFromSvg", "shapes");
        Boolean valueGroup = (Boolean)getTestValue("Boolean", "importShapesFromSvg", "group");
        String valuePassword = (String)getTestValue("String", "importShapesFromSvg", "password");
        String valueFolder = (String)getTestValue("String", "importShapesFromSvg", "folder");
        String valueStorage = (String)getTestValue("String", "importShapesFromSvg", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "importShapesFromSvg", "folder");
            initialize("importShapesFromSvg", "folder", "String", valueFolder);
            Shapes response = api.importShapesFromSvg(valueName, valueSlideIndex, valueImage, valueX, valueY, valueWidth, valueHeight, valueShapes, valueGroup, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "importShapesFromSvg", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "importShapesFromSvg");
        }
    }
    /**
     * Imports shapes from SVG file.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importShapesFromSvgInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importShapesFromSvg", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "importShapesFromSvg", "slideIndex");
        byte[] valueImage = (byte[])getTestValue("byte[]", "importShapesFromSvg", "image");
        Integer valueX = (Integer)getTestValue("Integer", "importShapesFromSvg", "x");
        Integer valueY = (Integer)getTestValue("Integer", "importShapesFromSvg", "y");
        Integer valueWidth = (Integer)getTestValue("Integer", "importShapesFromSvg", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "importShapesFromSvg", "height");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "importShapesFromSvg", "shapes");
        Boolean valueGroup = (Boolean)getTestValue("Boolean", "importShapesFromSvg", "group");
        String valuePassword = (String)getTestValue("String", "importShapesFromSvg", "password");
        String valueFolder = (String)getTestValue("String", "importShapesFromSvg", "folder");
        String valueStorage = (String)getTestValue("String", "importShapesFromSvg", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "importShapesFromSvg", "storage");
            initialize("importShapesFromSvg", "storage", "String", valueStorage);
            Shapes response = api.importShapesFromSvg(valueName, valueSlideIndex, valueImage, valueX, valueY, valueWidth, valueHeight, valueShapes, valueGroup, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "importShapesFromSvg", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "importShapesFromSvg");
        }
    }
    
    /**
     * Merge the presentation with other presentations specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeTest() throws ApiException, Exception {
        initialize("merge", null, null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "merge", "name");
        PresentationsMergeRequest valueRequest = (PresentationsMergeRequest)getTestValue("PresentationsMergeRequest", "merge", "request");
        String valuePassword = (String)getTestValue("String", "merge", "password");
        String valueFolder = (String)getTestValue("String", "merge", "folder");
        String valueStorage = (String)getTestValue("String", "merge", "storage");
        response = api.merge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Merge the presentation with other presentations specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "merge", "name");
        PresentationsMergeRequest valueRequest = (PresentationsMergeRequest)getTestValue("PresentationsMergeRequest", "merge", "request");
        String valuePassword = (String)getTestValue("String", "merge", "password");
        String valueFolder = (String)getTestValue("String", "merge", "folder");
        String valueStorage = (String)getTestValue("String", "merge", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "merge", "name");
            initialize("merge", "name", "String", valueName);
            Document response = api.merge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "merge", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "merge");
        }
    }
    /**
     * Merge the presentation with other presentations specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeInvalidRequestTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "merge", "name");
        PresentationsMergeRequest valueRequest = (PresentationsMergeRequest)getTestValue("PresentationsMergeRequest", "merge", "request");
        String valuePassword = (String)getTestValue("String", "merge", "password");
        String valueFolder = (String)getTestValue("String", "merge", "folder");
        String valueStorage = (String)getTestValue("String", "merge", "storage");
        try {
            valueRequest = (PresentationsMergeRequest)invalidizeTestValue("PresentationsMergeRequest", valueRequest, "merge", "request");
            initialize("merge", "request", "PresentationsMergeRequest", valueRequest);
            Document response = api.merge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "PresentationsMergeRequest", "request", "merge", valueRequest);
        }
        if (needAssertResponse) {
            assertResponse("PresentationsMergeRequest", "request", "merge");
        }
    }
    /**
     * Merge the presentation with other presentations specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "merge", "name");
        PresentationsMergeRequest valueRequest = (PresentationsMergeRequest)getTestValue("PresentationsMergeRequest", "merge", "request");
        String valuePassword = (String)getTestValue("String", "merge", "password");
        String valueFolder = (String)getTestValue("String", "merge", "folder");
        String valueStorage = (String)getTestValue("String", "merge", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "merge", "password");
            initialize("merge", "password", "String", valuePassword);
            Document response = api.merge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "merge", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "merge");
        }
    }
    /**
     * Merge the presentation with other presentations specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "merge", "name");
        PresentationsMergeRequest valueRequest = (PresentationsMergeRequest)getTestValue("PresentationsMergeRequest", "merge", "request");
        String valuePassword = (String)getTestValue("String", "merge", "password");
        String valueFolder = (String)getTestValue("String", "merge", "folder");
        String valueStorage = (String)getTestValue("String", "merge", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "merge", "folder");
            initialize("merge", "folder", "String", valueFolder);
            Document response = api.merge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "merge", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "merge");
        }
    }
    /**
     * Merge the presentation with other presentations specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "merge", "name");
        PresentationsMergeRequest valueRequest = (PresentationsMergeRequest)getTestValue("PresentationsMergeRequest", "merge", "request");
        String valuePassword = (String)getTestValue("String", "merge", "password");
        String valueFolder = (String)getTestValue("String", "merge", "folder");
        String valueStorage = (String)getTestValue("String", "merge", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "merge", "storage");
            initialize("merge", "storage", "String", valueStorage);
            Document response = api.merge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "merge", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "merge");
        }
    }
    
    /**
     * Merges presentations or some of their slides specified in the request parameter. Result will be save in the storage.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeAndSaveOnlineTest() throws ApiException, Exception {
        initialize("mergeAndSaveOnline", null, null, null);
        ;
        String valueOutPath = (String)getTestValue("String", "mergeAndSaveOnline", "outPath");
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "mergeAndSaveOnline", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "mergeAndSaveOnline", "request");
        String valueStorage = (String)getTestValue("String", "mergeAndSaveOnline", "storage");
        api.mergeAndSaveOnline(valueOutPath, valueFiles, valueRequest, valueStorage);
    }

    /**
     * Merges presentations or some of their slides specified in the request parameter. Result will be save in the storage.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeAndSaveOnlineInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueOutPath = (String)getTestValue("String", "mergeAndSaveOnline", "outPath");
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "mergeAndSaveOnline", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "mergeAndSaveOnline", "request");
        String valueStorage = (String)getTestValue("String", "mergeAndSaveOnline", "storage");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "mergeAndSaveOnline", "outPath");
            initialize("mergeAndSaveOnline", "outPath", "String", valueOutPath);
            api.mergeAndSaveOnline(valueOutPath, valueFiles, valueRequest, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "outPath", "mergeAndSaveOnline", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("String", "outPath", "mergeAndSaveOnline");
        }
    }
    /**
     * Merges presentations or some of their slides specified in the request parameter. Result will be save in the storage.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeAndSaveOnlineInvalidFilesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueOutPath = (String)getTestValue("String", "mergeAndSaveOnline", "outPath");
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "mergeAndSaveOnline", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "mergeAndSaveOnline", "request");
        String valueStorage = (String)getTestValue("String", "mergeAndSaveOnline", "storage");
        try {
            valueFiles = (List<FileInfo>)invalidizeTestValue("List<FileInfo>", valueFiles, "mergeAndSaveOnline", "files");
            initialize("mergeAndSaveOnline", "files", "List<FileInfo>", valueFiles);
            api.mergeAndSaveOnline(valueOutPath, valueFiles, valueRequest, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "List<FileInfo>", "files", "mergeAndSaveOnline", valueFiles);
        }
        if (needAssertResponse) {
            assertResponse("List<FileInfo>", "files", "mergeAndSaveOnline");
        }
    }
    /**
     * Merges presentations or some of their slides specified in the request parameter. Result will be save in the storage.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeAndSaveOnlineInvalidRequestTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueOutPath = (String)getTestValue("String", "mergeAndSaveOnline", "outPath");
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "mergeAndSaveOnline", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "mergeAndSaveOnline", "request");
        String valueStorage = (String)getTestValue("String", "mergeAndSaveOnline", "storage");
        try {
            valueRequest = (OrderedMergeRequest)invalidizeTestValue("OrderedMergeRequest", valueRequest, "mergeAndSaveOnline", "request");
            initialize("mergeAndSaveOnline", "request", "OrderedMergeRequest", valueRequest);
            api.mergeAndSaveOnline(valueOutPath, valueFiles, valueRequest, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "OrderedMergeRequest", "request", "mergeAndSaveOnline", valueRequest);
        }
        if (needAssertResponse) {
            assertResponse("OrderedMergeRequest", "request", "mergeAndSaveOnline");
        }
    }
    /**
     * Merges presentations or some of their slides specified in the request parameter. Result will be save in the storage.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeAndSaveOnlineInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueOutPath = (String)getTestValue("String", "mergeAndSaveOnline", "outPath");
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "mergeAndSaveOnline", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "mergeAndSaveOnline", "request");
        String valueStorage = (String)getTestValue("String", "mergeAndSaveOnline", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "mergeAndSaveOnline", "storage");
            initialize("mergeAndSaveOnline", "storage", "String", valueStorage);
            api.mergeAndSaveOnline(valueOutPath, valueFiles, valueRequest, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "mergeAndSaveOnline", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "mergeAndSaveOnline");
        }
    }
    
    /**
     * Merges presentations or some of their slides specified in the request parameter. Returns result file in the response. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeOnlineTest() throws ApiException, Exception {
        initialize("mergeOnline", null, null, null);
        File response = null;
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "mergeOnline", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "mergeOnline", "request");
        String valueStorage = (String)getTestValue("String", "mergeOnline", "storage");
        response = api.mergeOnline(valueFiles, valueRequest, valueStorage);
        assertTrue(response.isFile());
    }

    /**
     * Merges presentations or some of their slides specified in the request parameter. Returns result file in the response. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeOnlineInvalidFilesTest() throws ApiException {
        Boolean needAssertResponse = false;
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "mergeOnline", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "mergeOnline", "request");
        String valueStorage = (String)getTestValue("String", "mergeOnline", "storage");
        try {
            valueFiles = (List<FileInfo>)invalidizeTestValue("List<FileInfo>", valueFiles, "mergeOnline", "files");
            initialize("mergeOnline", "files", "List<FileInfo>", valueFiles);
            File response = api.mergeOnline(valueFiles, valueRequest, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "List<FileInfo>", "files", "mergeOnline", valueFiles);
        }
        if (needAssertResponse) {
            assertResponse("List<FileInfo>", "files", "mergeOnline");
        }
    }
    /**
     * Merges presentations or some of their slides specified in the request parameter. Returns result file in the response. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeOnlineInvalidRequestTest() throws ApiException {
        Boolean needAssertResponse = false;
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "mergeOnline", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "mergeOnline", "request");
        String valueStorage = (String)getTestValue("String", "mergeOnline", "storage");
        try {
            valueRequest = (OrderedMergeRequest)invalidizeTestValue("OrderedMergeRequest", valueRequest, "mergeOnline", "request");
            initialize("mergeOnline", "request", "OrderedMergeRequest", valueRequest);
            File response = api.mergeOnline(valueFiles, valueRequest, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "OrderedMergeRequest", "request", "mergeOnline", valueRequest);
        }
        if (needAssertResponse) {
            assertResponse("OrderedMergeRequest", "request", "mergeOnline");
        }
    }
    /**
     * Merges presentations or some of their slides specified in the request parameter. Returns result file in the response. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeOnlineInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "mergeOnline", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "mergeOnline", "request");
        String valueStorage = (String)getTestValue("String", "mergeOnline", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "mergeOnline", "storage");
            initialize("mergeOnline", "storage", "String", valueStorage);
            File response = api.mergeOnline(valueFiles, valueRequest, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "mergeOnline", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "mergeOnline");
        }
    }
    
    /**
     * Move file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFileTest() throws ApiException, Exception {
        initialize("moveFile", null, null, null);
        ;
        String valueSrcPath = (String)getTestValue("String", "moveFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "moveFile", "versionId");
        api.moveFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
    }

    /**
     * Move file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFileInvalidSrcPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "moveFile", "versionId");
        try {
            valueSrcPath = (String)invalidizeTestValue("String", valueSrcPath, "moveFile", "srcPath");
            initialize("moveFile", "srcPath", "String", valueSrcPath);
            api.moveFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "srcPath", "moveFile", valueSrcPath);
        }
        if (needAssertResponse) {
            assertResponse("String", "srcPath", "moveFile");
        }
    }
    /**
     * Move file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFileInvalidDestPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "moveFile", "versionId");
        try {
            valueDestPath = (String)invalidizeTestValue("String", valueDestPath, "moveFile", "destPath");
            initialize("moveFile", "destPath", "String", valueDestPath);
            api.moveFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "destPath", "moveFile", valueDestPath);
        }
        if (needAssertResponse) {
            assertResponse("String", "destPath", "moveFile");
        }
    }
    /**
     * Move file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFileInvalidSrcStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "moveFile", "versionId");
        try {
            valueSrcStorageName = (String)invalidizeTestValue("String", valueSrcStorageName, "moveFile", "srcStorageName");
            initialize("moveFile", "srcStorageName", "String", valueSrcStorageName);
            api.moveFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "srcStorageName", "moveFile", valueSrcStorageName);
        }
        if (needAssertResponse) {
            assertResponse("String", "srcStorageName", "moveFile");
        }
    }
    /**
     * Move file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFileInvalidDestStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "moveFile", "versionId");
        try {
            valueDestStorageName = (String)invalidizeTestValue("String", valueDestStorageName, "moveFile", "destStorageName");
            initialize("moveFile", "destStorageName", "String", valueDestStorageName);
            api.moveFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "destStorageName", "moveFile", valueDestStorageName);
        }
        if (needAssertResponse) {
            assertResponse("String", "destStorageName", "moveFile");
        }
    }
    /**
     * Move file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFileInvalidVersionIdTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "moveFile", "versionId");
        try {
            valueVersionId = (String)invalidizeTestValue("String", valueVersionId, "moveFile", "versionId");
            initialize("moveFile", "versionId", "String", valueVersionId);
            api.moveFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "versionId", "moveFile", valueVersionId);
        }
        if (needAssertResponse) {
            assertResponse("String", "versionId", "moveFile");
        }
    }
    
    /**
     * Move folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFolderTest() throws ApiException, Exception {
        initialize("moveFolder", null, null, null);
        ;
        String valueSrcPath = (String)getTestValue("String", "moveFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFolder", "destStorageName");
        api.moveFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
    }

    /**
     * Move folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFolderInvalidSrcPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFolder", "destStorageName");
        try {
            valueSrcPath = (String)invalidizeTestValue("String", valueSrcPath, "moveFolder", "srcPath");
            initialize("moveFolder", "srcPath", "String", valueSrcPath);
            api.moveFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "srcPath", "moveFolder", valueSrcPath);
        }
        if (needAssertResponse) {
            assertResponse("String", "srcPath", "moveFolder");
        }
    }
    /**
     * Move folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFolderInvalidDestPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFolder", "destStorageName");
        try {
            valueDestPath = (String)invalidizeTestValue("String", valueDestPath, "moveFolder", "destPath");
            initialize("moveFolder", "destPath", "String", valueDestPath);
            api.moveFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "destPath", "moveFolder", valueDestPath);
        }
        if (needAssertResponse) {
            assertResponse("String", "destPath", "moveFolder");
        }
    }
    /**
     * Move folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFolderInvalidSrcStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFolder", "destStorageName");
        try {
            valueSrcStorageName = (String)invalidizeTestValue("String", valueSrcStorageName, "moveFolder", "srcStorageName");
            initialize("moveFolder", "srcStorageName", "String", valueSrcStorageName);
            api.moveFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "srcStorageName", "moveFolder", valueSrcStorageName);
        }
        if (needAssertResponse) {
            assertResponse("String", "srcStorageName", "moveFolder");
        }
    }
    /**
     * Move folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFolderInvalidDestStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFolder", "destStorageName");
        try {
            valueDestStorageName = (String)invalidizeTestValue("String", valueDestStorageName, "moveFolder", "destStorageName");
            initialize("moveFolder", "destStorageName", "String", valueDestStorageName);
            api.moveFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "destStorageName", "moveFolder", valueDestStorageName);
        }
        if (needAssertResponse) {
            assertResponse("String", "destStorageName", "moveFolder");
        }
    }
    
    /**
     * Move presentation section to a specified position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSectionTest() throws ApiException, Exception {
        initialize("moveSection", null, null, null);
        Sections response = null;
        String valueName = (String)getTestValue("String", "moveSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "moveSection", "sectionIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSection", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSection", "password");
        String valueFolder = (String)getTestValue("String", "moveSection", "folder");
        String valueStorage = (String)getTestValue("String", "moveSection", "storage");
        response = api.moveSection(valueName, valueSectionIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Move presentation section to a specified position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSectionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "moveSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "moveSection", "sectionIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSection", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSection", "password");
        String valueFolder = (String)getTestValue("String", "moveSection", "folder");
        String valueStorage = (String)getTestValue("String", "moveSection", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "moveSection", "name");
            initialize("moveSection", "name", "String", valueName);
            Sections response = api.moveSection(valueName, valueSectionIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "moveSection", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "moveSection");
        }
    }
    /**
     * Move presentation section to a specified position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSectionInvalidSectionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "moveSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "moveSection", "sectionIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSection", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSection", "password");
        String valueFolder = (String)getTestValue("String", "moveSection", "folder");
        String valueStorage = (String)getTestValue("String", "moveSection", "storage");
        try {
            valueSectionIndex = (Integer)invalidizeTestValue("Integer", valueSectionIndex, "moveSection", "sectionIndex");
            initialize("moveSection", "sectionIndex", "Integer", valueSectionIndex);
            Sections response = api.moveSection(valueName, valueSectionIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "sectionIndex", "moveSection", valueSectionIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "sectionIndex", "moveSection");
        }
    }
    /**
     * Move presentation section to a specified position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSectionInvalidNewPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "moveSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "moveSection", "sectionIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSection", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSection", "password");
        String valueFolder = (String)getTestValue("String", "moveSection", "folder");
        String valueStorage = (String)getTestValue("String", "moveSection", "storage");
        try {
            valueNewPosition = (Integer)invalidizeTestValue("Integer", valueNewPosition, "moveSection", "newPosition");
            initialize("moveSection", "newPosition", "Integer", valueNewPosition);
            Sections response = api.moveSection(valueName, valueSectionIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "newPosition", "moveSection", valueNewPosition);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "newPosition", "moveSection");
        }
    }
    /**
     * Move presentation section to a specified position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSectionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "moveSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "moveSection", "sectionIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSection", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSection", "password");
        String valueFolder = (String)getTestValue("String", "moveSection", "folder");
        String valueStorage = (String)getTestValue("String", "moveSection", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "moveSection", "password");
            initialize("moveSection", "password", "String", valuePassword);
            Sections response = api.moveSection(valueName, valueSectionIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "moveSection", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "moveSection");
        }
    }
    /**
     * Move presentation section to a specified position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSectionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "moveSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "moveSection", "sectionIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSection", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSection", "password");
        String valueFolder = (String)getTestValue("String", "moveSection", "folder");
        String valueStorage = (String)getTestValue("String", "moveSection", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "moveSection", "folder");
            initialize("moveSection", "folder", "String", valueFolder);
            Sections response = api.moveSection(valueName, valueSectionIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "moveSection", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "moveSection");
        }
    }
    /**
     * Move presentation section to a specified position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSectionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "moveSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "moveSection", "sectionIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSection", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSection", "password");
        String valueFolder = (String)getTestValue("String", "moveSection", "folder");
        String valueStorage = (String)getTestValue("String", "moveSection", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "moveSection", "storage");
            initialize("moveSection", "storage", "String", valueStorage);
            Sections response = api.moveSection(valueName, valueSectionIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "moveSection", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "moveSection");
        }
    }
    
    /**
     * Reorder presentation slide position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSlideTest() throws ApiException, Exception {
        initialize("moveSlide", null, null, null);
        Slides response = null;
        String valueName = (String)getTestValue("String", "moveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "moveSlide", "slideIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSlide", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSlide", "password");
        String valueFolder = (String)getTestValue("String", "moveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "moveSlide", "storage");
        response = api.moveSlide(valueName, valueSlideIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Reorder presentation slide position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "moveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "moveSlide", "slideIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSlide", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSlide", "password");
        String valueFolder = (String)getTestValue("String", "moveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "moveSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "moveSlide", "name");
            initialize("moveSlide", "name", "String", valueName);
            Slides response = api.moveSlide(valueName, valueSlideIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "moveSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "moveSlide");
        }
    }
    /**
     * Reorder presentation slide position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "moveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "moveSlide", "slideIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSlide", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSlide", "password");
        String valueFolder = (String)getTestValue("String", "moveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "moveSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "moveSlide", "slideIndex");
            initialize("moveSlide", "slideIndex", "Integer", valueSlideIndex);
            Slides response = api.moveSlide(valueName, valueSlideIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "moveSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "moveSlide");
        }
    }
    /**
     * Reorder presentation slide position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSlideInvalidNewPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "moveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "moveSlide", "slideIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSlide", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSlide", "password");
        String valueFolder = (String)getTestValue("String", "moveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "moveSlide", "storage");
        try {
            valueNewPosition = (Integer)invalidizeTestValue("Integer", valueNewPosition, "moveSlide", "newPosition");
            initialize("moveSlide", "newPosition", "Integer", valueNewPosition);
            Slides response = api.moveSlide(valueName, valueSlideIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "newPosition", "moveSlide", valueNewPosition);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "newPosition", "moveSlide");
        }
    }
    /**
     * Reorder presentation slide position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "moveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "moveSlide", "slideIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSlide", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSlide", "password");
        String valueFolder = (String)getTestValue("String", "moveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "moveSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "moveSlide", "password");
            initialize("moveSlide", "password", "String", valuePassword);
            Slides response = api.moveSlide(valueName, valueSlideIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "moveSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "moveSlide");
        }
    }
    /**
     * Reorder presentation slide position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "moveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "moveSlide", "slideIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSlide", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSlide", "password");
        String valueFolder = (String)getTestValue("String", "moveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "moveSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "moveSlide", "folder");
            initialize("moveSlide", "folder", "String", valueFolder);
            Slides response = api.moveSlide(valueName, valueSlideIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "moveSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "moveSlide");
        }
    }
    /**
     * Reorder presentation slide position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "moveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "moveSlide", "slideIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSlide", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSlide", "password");
        String valueFolder = (String)getTestValue("String", "moveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "moveSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "moveSlide", "storage");
            initialize("moveSlide", "storage", "String", valueStorage);
            Slides response = api.moveSlide(valueName, valueSlideIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "moveSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "moveSlide");
        }
    }
    
    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notesSlideExistsTest() throws ApiException, Exception {
        initialize("notesSlideExists", null, null, null);
        EntityExists response = null;
        String valueName = (String)getTestValue("String", "notesSlideExists", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "notesSlideExists", "slideIndex");
        String valuePassword = (String)getTestValue("String", "notesSlideExists", "password");
        String valueFolder = (String)getTestValue("String", "notesSlideExists", "folder");
        String valueStorage = (String)getTestValue("String", "notesSlideExists", "storage");
        response = api.notesSlideExists(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notesSlideExistsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "notesSlideExists", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "notesSlideExists", "slideIndex");
        String valuePassword = (String)getTestValue("String", "notesSlideExists", "password");
        String valueFolder = (String)getTestValue("String", "notesSlideExists", "folder");
        String valueStorage = (String)getTestValue("String", "notesSlideExists", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "notesSlideExists", "name");
            initialize("notesSlideExists", "name", "String", valueName);
            EntityExists response = api.notesSlideExists(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "notesSlideExists", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "notesSlideExists");
        }
    }
    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notesSlideExistsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "notesSlideExists", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "notesSlideExists", "slideIndex");
        String valuePassword = (String)getTestValue("String", "notesSlideExists", "password");
        String valueFolder = (String)getTestValue("String", "notesSlideExists", "folder");
        String valueStorage = (String)getTestValue("String", "notesSlideExists", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "notesSlideExists", "slideIndex");
            initialize("notesSlideExists", "slideIndex", "Integer", valueSlideIndex);
            EntityExists response = api.notesSlideExists(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "notesSlideExists", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "notesSlideExists");
        }
    }
    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notesSlideExistsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "notesSlideExists", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "notesSlideExists", "slideIndex");
        String valuePassword = (String)getTestValue("String", "notesSlideExists", "password");
        String valueFolder = (String)getTestValue("String", "notesSlideExists", "folder");
        String valueStorage = (String)getTestValue("String", "notesSlideExists", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "notesSlideExists", "password");
            initialize("notesSlideExists", "password", "String", valuePassword);
            EntityExists response = api.notesSlideExists(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "notesSlideExists", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "notesSlideExists");
        }
    }
    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notesSlideExistsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "notesSlideExists", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "notesSlideExists", "slideIndex");
        String valuePassword = (String)getTestValue("String", "notesSlideExists", "password");
        String valueFolder = (String)getTestValue("String", "notesSlideExists", "folder");
        String valueStorage = (String)getTestValue("String", "notesSlideExists", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "notesSlideExists", "folder");
            initialize("notesSlideExists", "folder", "String", valueFolder);
            EntityExists response = api.notesSlideExists(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "notesSlideExists", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "notesSlideExists");
        }
    }
    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notesSlideExistsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "notesSlideExists", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "notesSlideExists", "slideIndex");
        String valuePassword = (String)getTestValue("String", "notesSlideExists", "password");
        String valueFolder = (String)getTestValue("String", "notesSlideExists", "folder");
        String valueStorage = (String)getTestValue("String", "notesSlideExists", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "notesSlideExists", "storage");
            initialize("notesSlideExists", "storage", "String", valueStorage);
            EntityExists response = api.notesSlideExists(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "notesSlideExists", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "notesSlideExists");
        }
    }
    
    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notesSlideExistsOnlineTest() throws ApiException, Exception {
        initialize("notesSlideExistsOnline", null, null, null);
        EntityExists response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "notesSlideExistsOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "notesSlideExistsOnline", "slideIndex");
        String valuePassword = (String)getTestValue("String", "notesSlideExistsOnline", "password");
        response = api.notesSlideExistsOnline(valueDocument, valueSlideIndex, valuePassword);
        assertNotNull(response);
    }

    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notesSlideExistsOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "notesSlideExistsOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "notesSlideExistsOnline", "slideIndex");
        String valuePassword = (String)getTestValue("String", "notesSlideExistsOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "notesSlideExistsOnline", "document");
            initialize("notesSlideExistsOnline", "document", "byte[]", valueDocument);
            EntityExists response = api.notesSlideExistsOnline(valueDocument, valueSlideIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "notesSlideExistsOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "notesSlideExistsOnline");
        }
    }
    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notesSlideExistsOnlineInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "notesSlideExistsOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "notesSlideExistsOnline", "slideIndex");
        String valuePassword = (String)getTestValue("String", "notesSlideExistsOnline", "password");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "notesSlideExistsOnline", "slideIndex");
            initialize("notesSlideExistsOnline", "slideIndex", "Integer", valueSlideIndex);
            EntityExists response = api.notesSlideExistsOnline(valueDocument, valueSlideIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "notesSlideExistsOnline", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "notesSlideExistsOnline");
        }
    }
    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notesSlideExistsOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "notesSlideExistsOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "notesSlideExistsOnline", "slideIndex");
        String valuePassword = (String)getTestValue("String", "notesSlideExistsOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "notesSlideExistsOnline", "password");
            initialize("notesSlideExistsOnline", "password", "String", valuePassword);
            EntityExists response = api.notesSlideExistsOnline(valueDocument, valueSlideIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "notesSlideExistsOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "notesSlideExistsOnline");
        }
    }
    
    /**
     * Check if file or folder exists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectExistsTest() throws ApiException, Exception {
        initialize("objectExists", null, null, null);
        ObjectExist response = null;
        String valuePath = (String)getTestValue("String", "objectExists", "path");
        String valueStorageName = (String)getTestValue("String", "objectExists", "storageName");
        String valueVersionId = (String)getTestValue("String", "objectExists", "versionId");
        response = api.objectExists(valuePath, valueStorageName, valueVersionId);
        assertNotNull(response);
    }

    /**
     * Check if file or folder exists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectExistsInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "objectExists", "path");
        String valueStorageName = (String)getTestValue("String", "objectExists", "storageName");
        String valueVersionId = (String)getTestValue("String", "objectExists", "versionId");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "objectExists", "path");
            initialize("objectExists", "path", "String", valuePath);
            ObjectExist response = api.objectExists(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "path", "objectExists", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("String", "path", "objectExists");
        }
    }
    /**
     * Check if file or folder exists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectExistsInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "objectExists", "path");
        String valueStorageName = (String)getTestValue("String", "objectExists", "storageName");
        String valueVersionId = (String)getTestValue("String", "objectExists", "versionId");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "objectExists", "storageName");
            initialize("objectExists", "storageName", "String", valueStorageName);
            ObjectExist response = api.objectExists(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storageName", "objectExists", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("String", "storageName", "objectExists");
        }
    }
    /**
     * Check if file or folder exists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectExistsInvalidVersionIdTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "objectExists", "path");
        String valueStorageName = (String)getTestValue("String", "objectExists", "storageName");
        String valueVersionId = (String)getTestValue("String", "objectExists", "versionId");
        try {
            valueVersionId = (String)invalidizeTestValue("String", valueVersionId, "objectExists", "versionId");
            initialize("objectExists", "versionId", "String", valueVersionId);
            ObjectExist response = api.objectExists(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "versionId", "objectExists", valueVersionId);
        }
        if (needAssertResponse) {
            assertResponse("String", "versionId", "objectExists");
        }
    }
    
    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderedMergeTest() throws ApiException, Exception {
        initialize("orderedMerge", null, null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "orderedMerge", "name");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "orderedMerge", "request");
        String valuePassword = (String)getTestValue("String", "orderedMerge", "password");
        String valueFolder = (String)getTestValue("String", "orderedMerge", "folder");
        String valueStorage = (String)getTestValue("String", "orderedMerge", "storage");
        response = api.orderedMerge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderedMergeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "orderedMerge", "name");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "orderedMerge", "request");
        String valuePassword = (String)getTestValue("String", "orderedMerge", "password");
        String valueFolder = (String)getTestValue("String", "orderedMerge", "folder");
        String valueStorage = (String)getTestValue("String", "orderedMerge", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "orderedMerge", "name");
            initialize("orderedMerge", "name", "String", valueName);
            Document response = api.orderedMerge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "orderedMerge", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "orderedMerge");
        }
    }
    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderedMergeInvalidRequestTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "orderedMerge", "name");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "orderedMerge", "request");
        String valuePassword = (String)getTestValue("String", "orderedMerge", "password");
        String valueFolder = (String)getTestValue("String", "orderedMerge", "folder");
        String valueStorage = (String)getTestValue("String", "orderedMerge", "storage");
        try {
            valueRequest = (OrderedMergeRequest)invalidizeTestValue("OrderedMergeRequest", valueRequest, "orderedMerge", "request");
            initialize("orderedMerge", "request", "OrderedMergeRequest", valueRequest);
            Document response = api.orderedMerge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "OrderedMergeRequest", "request", "orderedMerge", valueRequest);
        }
        if (needAssertResponse) {
            assertResponse("OrderedMergeRequest", "request", "orderedMerge");
        }
    }
    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderedMergeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "orderedMerge", "name");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "orderedMerge", "request");
        String valuePassword = (String)getTestValue("String", "orderedMerge", "password");
        String valueFolder = (String)getTestValue("String", "orderedMerge", "folder");
        String valueStorage = (String)getTestValue("String", "orderedMerge", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "orderedMerge", "password");
            initialize("orderedMerge", "password", "String", valuePassword);
            Document response = api.orderedMerge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "orderedMerge", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "orderedMerge");
        }
    }
    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderedMergeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "orderedMerge", "name");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "orderedMerge", "request");
        String valuePassword = (String)getTestValue("String", "orderedMerge", "password");
        String valueFolder = (String)getTestValue("String", "orderedMerge", "folder");
        String valueStorage = (String)getTestValue("String", "orderedMerge", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "orderedMerge", "folder");
            initialize("orderedMerge", "folder", "String", valueFolder);
            Document response = api.orderedMerge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "orderedMerge", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "orderedMerge");
        }
    }
    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderedMergeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "orderedMerge", "name");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "orderedMerge", "request");
        String valuePassword = (String)getTestValue("String", "orderedMerge", "password");
        String valueFolder = (String)getTestValue("String", "orderedMerge", "folder");
        String valueStorage = (String)getTestValue("String", "orderedMerge", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "orderedMerge", "storage");
            initialize("orderedMerge", "storage", "String", valueStorage);
            Document response = api.orderedMerge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "orderedMerge", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "orderedMerge");
        }
    }
    
    /**
     * Performs slides pipeline.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pipelineTest() throws ApiException, Exception {
        initialize("pipeline", null, null, null);
        File response = null;
        Pipeline valuePipeline = (Pipeline)getTestValue("Pipeline", "pipeline", "pipeline");
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "pipeline", "files");
        response = api.pipeline(valuePipeline, valueFiles);
        assertTrue(response.isFile());
    }

    /**
     * Performs slides pipeline.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pipelineInvalidPipelineTest() throws ApiException {
        Boolean needAssertResponse = false;
        Pipeline valuePipeline = (Pipeline)getTestValue("Pipeline", "pipeline", "pipeline");
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "pipeline", "files");
        try {
            valuePipeline = (Pipeline)invalidizeTestValue("Pipeline", valuePipeline, "pipeline", "pipeline");
            initialize("pipeline", "pipeline", "Pipeline", valuePipeline);
            File response = api.pipeline(valuePipeline, valueFiles);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Pipeline", "pipeline", "pipeline", valuePipeline);
        }
        if (needAssertResponse) {
            assertResponse("Pipeline", "pipeline", "pipeline");
        }
    }
    /**
     * Performs slides pipeline.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pipelineInvalidFilesTest() throws ApiException {
        Boolean needAssertResponse = false;
        Pipeline valuePipeline = (Pipeline)getTestValue("Pipeline", "pipeline", "pipeline");
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "pipeline", "files");
        try {
            valueFiles = (List<FileInfo>)invalidizeTestValue("List<FileInfo>", valueFiles, "pipeline", "files");
            initialize("pipeline", "files", "List<FileInfo>", valueFiles);
            File response = api.pipeline(valuePipeline, valueFiles);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "List<FileInfo>", "files", "pipeline", valueFiles);
        }
        if (needAssertResponse) {
            assertResponse("List<FileInfo>", "files", "pipeline");
        }
    }
    
    /**
     * Reorder presentation slides positions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reorderSlidesTest() throws ApiException, Exception {
        initialize("reorderSlides", null, null, null);
        Slides response = null;
        String valueName = (String)getTestValue("String", "reorderSlides", "name");
        List<Integer> valueOldPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "oldPositions");
        List<Integer> valueNewPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "newPositions");
        String valuePassword = (String)getTestValue("String", "reorderSlides", "password");
        String valueFolder = (String)getTestValue("String", "reorderSlides", "folder");
        String valueStorage = (String)getTestValue("String", "reorderSlides", "storage");
        response = api.reorderSlides(valueName, valueOldPositions, valueNewPositions, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Reorder presentation slides positions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reorderSlidesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "reorderSlides", "name");
        List<Integer> valueOldPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "oldPositions");
        List<Integer> valueNewPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "newPositions");
        String valuePassword = (String)getTestValue("String", "reorderSlides", "password");
        String valueFolder = (String)getTestValue("String", "reorderSlides", "folder");
        String valueStorage = (String)getTestValue("String", "reorderSlides", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "reorderSlides", "name");
            initialize("reorderSlides", "name", "String", valueName);
            Slides response = api.reorderSlides(valueName, valueOldPositions, valueNewPositions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "reorderSlides", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "reorderSlides");
        }
    }
    /**
     * Reorder presentation slides positions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reorderSlidesInvalidOldPositionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "reorderSlides", "name");
        List<Integer> valueOldPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "oldPositions");
        List<Integer> valueNewPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "newPositions");
        String valuePassword = (String)getTestValue("String", "reorderSlides", "password");
        String valueFolder = (String)getTestValue("String", "reorderSlides", "folder");
        String valueStorage = (String)getTestValue("String", "reorderSlides", "storage");
        try {
            valueOldPositions = (List<Integer>)invalidizeTestValue("List<Integer>", valueOldPositions, "reorderSlides", "oldPositions");
            initialize("reorderSlides", "oldPositions", "List<Integer>", valueOldPositions);
            Slides response = api.reorderSlides(valueName, valueOldPositions, valueNewPositions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "List<Integer>", "oldPositions", "reorderSlides", valueOldPositions);
        }
        if (needAssertResponse) {
            assertResponse("List<Integer>", "oldPositions", "reorderSlides");
        }
    }
    /**
     * Reorder presentation slides positions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reorderSlidesInvalidNewPositionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "reorderSlides", "name");
        List<Integer> valueOldPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "oldPositions");
        List<Integer> valueNewPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "newPositions");
        String valuePassword = (String)getTestValue("String", "reorderSlides", "password");
        String valueFolder = (String)getTestValue("String", "reorderSlides", "folder");
        String valueStorage = (String)getTestValue("String", "reorderSlides", "storage");
        try {
            valueNewPositions = (List<Integer>)invalidizeTestValue("List<Integer>", valueNewPositions, "reorderSlides", "newPositions");
            initialize("reorderSlides", "newPositions", "List<Integer>", valueNewPositions);
            Slides response = api.reorderSlides(valueName, valueOldPositions, valueNewPositions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "List<Integer>", "newPositions", "reorderSlides", valueNewPositions);
        }
        if (needAssertResponse) {
            assertResponse("List<Integer>", "newPositions", "reorderSlides");
        }
    }
    /**
     * Reorder presentation slides positions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reorderSlidesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "reorderSlides", "name");
        List<Integer> valueOldPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "oldPositions");
        List<Integer> valueNewPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "newPositions");
        String valuePassword = (String)getTestValue("String", "reorderSlides", "password");
        String valueFolder = (String)getTestValue("String", "reorderSlides", "folder");
        String valueStorage = (String)getTestValue("String", "reorderSlides", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "reorderSlides", "password");
            initialize("reorderSlides", "password", "String", valuePassword);
            Slides response = api.reorderSlides(valueName, valueOldPositions, valueNewPositions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "reorderSlides", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "reorderSlides");
        }
    }
    /**
     * Reorder presentation slides positions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reorderSlidesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "reorderSlides", "name");
        List<Integer> valueOldPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "oldPositions");
        List<Integer> valueNewPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "newPositions");
        String valuePassword = (String)getTestValue("String", "reorderSlides", "password");
        String valueFolder = (String)getTestValue("String", "reorderSlides", "folder");
        String valueStorage = (String)getTestValue("String", "reorderSlides", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "reorderSlides", "folder");
            initialize("reorderSlides", "folder", "String", valueFolder);
            Slides response = api.reorderSlides(valueName, valueOldPositions, valueNewPositions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "reorderSlides", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "reorderSlides");
        }
    }
    /**
     * Reorder presentation slides positions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reorderSlidesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "reorderSlides", "name");
        List<Integer> valueOldPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "oldPositions");
        List<Integer> valueNewPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "newPositions");
        String valuePassword = (String)getTestValue("String", "reorderSlides", "password");
        String valueFolder = (String)getTestValue("String", "reorderSlides", "folder");
        String valueStorage = (String)getTestValue("String", "reorderSlides", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "reorderSlides", "storage");
            initialize("reorderSlides", "storage", "String", valueStorage);
            Slides response = api.reorderSlides(valueName, valueOldPositions, valueNewPositions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "reorderSlides", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "reorderSlides");
        }
    }
    
    /**
     * Replaces specified font and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceFontTest() throws ApiException, Exception {
        initialize("replaceFont", null, null, null);
        FontsData response = null;
        String valueName = (String)getTestValue("String", "replaceFont", "name");
        String valueSourceFont = (String)getTestValue("String", "replaceFont", "sourceFont");
        String valueTargetFont = (String)getTestValue("String", "replaceFont", "targetFont");
        Boolean valueEmbed = (Boolean)getTestValue("Boolean", "replaceFont", "embed");
        String valuePassword = (String)getTestValue("String", "replaceFont", "password");
        String valueFolder = (String)getTestValue("String", "replaceFont", "folder");
        String valueStorage = (String)getTestValue("String", "replaceFont", "storage");
        String valueFontsFolder = (String)getTestValue("String", "replaceFont", "fontsFolder");
        response = api.replaceFont(valueName, valueSourceFont, valueTargetFont, valueEmbed, valuePassword, valueFolder, valueStorage, valueFontsFolder);
        assertNotNull(response);
    }

    /**
     * Replaces specified font and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceFontInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replaceFont", "name");
        String valueSourceFont = (String)getTestValue("String", "replaceFont", "sourceFont");
        String valueTargetFont = (String)getTestValue("String", "replaceFont", "targetFont");
        Boolean valueEmbed = (Boolean)getTestValue("Boolean", "replaceFont", "embed");
        String valuePassword = (String)getTestValue("String", "replaceFont", "password");
        String valueFolder = (String)getTestValue("String", "replaceFont", "folder");
        String valueStorage = (String)getTestValue("String", "replaceFont", "storage");
        String valueFontsFolder = (String)getTestValue("String", "replaceFont", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "replaceFont", "name");
            initialize("replaceFont", "name", "String", valueName);
            FontsData response = api.replaceFont(valueName, valueSourceFont, valueTargetFont, valueEmbed, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "replaceFont", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "replaceFont");
        }
    }
    /**
     * Replaces specified font and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceFontInvalidSourceFontTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replaceFont", "name");
        String valueSourceFont = (String)getTestValue("String", "replaceFont", "sourceFont");
        String valueTargetFont = (String)getTestValue("String", "replaceFont", "targetFont");
        Boolean valueEmbed = (Boolean)getTestValue("Boolean", "replaceFont", "embed");
        String valuePassword = (String)getTestValue("String", "replaceFont", "password");
        String valueFolder = (String)getTestValue("String", "replaceFont", "folder");
        String valueStorage = (String)getTestValue("String", "replaceFont", "storage");
        String valueFontsFolder = (String)getTestValue("String", "replaceFont", "fontsFolder");
        try {
            valueSourceFont = (String)invalidizeTestValue("String", valueSourceFont, "replaceFont", "sourceFont");
            initialize("replaceFont", "sourceFont", "String", valueSourceFont);
            FontsData response = api.replaceFont(valueName, valueSourceFont, valueTargetFont, valueEmbed, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "sourceFont", "replaceFont", valueSourceFont);
        }
        if (needAssertResponse) {
            assertResponse("String", "sourceFont", "replaceFont");
        }
    }
    /**
     * Replaces specified font and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceFontInvalidTargetFontTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replaceFont", "name");
        String valueSourceFont = (String)getTestValue("String", "replaceFont", "sourceFont");
        String valueTargetFont = (String)getTestValue("String", "replaceFont", "targetFont");
        Boolean valueEmbed = (Boolean)getTestValue("Boolean", "replaceFont", "embed");
        String valuePassword = (String)getTestValue("String", "replaceFont", "password");
        String valueFolder = (String)getTestValue("String", "replaceFont", "folder");
        String valueStorage = (String)getTestValue("String", "replaceFont", "storage");
        String valueFontsFolder = (String)getTestValue("String", "replaceFont", "fontsFolder");
        try {
            valueTargetFont = (String)invalidizeTestValue("String", valueTargetFont, "replaceFont", "targetFont");
            initialize("replaceFont", "targetFont", "String", valueTargetFont);
            FontsData response = api.replaceFont(valueName, valueSourceFont, valueTargetFont, valueEmbed, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "targetFont", "replaceFont", valueTargetFont);
        }
        if (needAssertResponse) {
            assertResponse("String", "targetFont", "replaceFont");
        }
    }
    /**
     * Replaces specified font and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceFontInvalidEmbedTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replaceFont", "name");
        String valueSourceFont = (String)getTestValue("String", "replaceFont", "sourceFont");
        String valueTargetFont = (String)getTestValue("String", "replaceFont", "targetFont");
        Boolean valueEmbed = (Boolean)getTestValue("Boolean", "replaceFont", "embed");
        String valuePassword = (String)getTestValue("String", "replaceFont", "password");
        String valueFolder = (String)getTestValue("String", "replaceFont", "folder");
        String valueStorage = (String)getTestValue("String", "replaceFont", "storage");
        String valueFontsFolder = (String)getTestValue("String", "replaceFont", "fontsFolder");
        try {
            valueEmbed = (Boolean)invalidizeTestValue("Boolean", valueEmbed, "replaceFont", "embed");
            initialize("replaceFont", "embed", "Boolean", valueEmbed);
            FontsData response = api.replaceFont(valueName, valueSourceFont, valueTargetFont, valueEmbed, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "embed", "replaceFont", valueEmbed);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "embed", "replaceFont");
        }
    }
    /**
     * Replaces specified font and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceFontInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replaceFont", "name");
        String valueSourceFont = (String)getTestValue("String", "replaceFont", "sourceFont");
        String valueTargetFont = (String)getTestValue("String", "replaceFont", "targetFont");
        Boolean valueEmbed = (Boolean)getTestValue("Boolean", "replaceFont", "embed");
        String valuePassword = (String)getTestValue("String", "replaceFont", "password");
        String valueFolder = (String)getTestValue("String", "replaceFont", "folder");
        String valueStorage = (String)getTestValue("String", "replaceFont", "storage");
        String valueFontsFolder = (String)getTestValue("String", "replaceFont", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "replaceFont", "password");
            initialize("replaceFont", "password", "String", valuePassword);
            FontsData response = api.replaceFont(valueName, valueSourceFont, valueTargetFont, valueEmbed, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "replaceFont", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "replaceFont");
        }
    }
    /**
     * Replaces specified font and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceFontInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replaceFont", "name");
        String valueSourceFont = (String)getTestValue("String", "replaceFont", "sourceFont");
        String valueTargetFont = (String)getTestValue("String", "replaceFont", "targetFont");
        Boolean valueEmbed = (Boolean)getTestValue("Boolean", "replaceFont", "embed");
        String valuePassword = (String)getTestValue("String", "replaceFont", "password");
        String valueFolder = (String)getTestValue("String", "replaceFont", "folder");
        String valueStorage = (String)getTestValue("String", "replaceFont", "storage");
        String valueFontsFolder = (String)getTestValue("String", "replaceFont", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "replaceFont", "folder");
            initialize("replaceFont", "folder", "String", valueFolder);
            FontsData response = api.replaceFont(valueName, valueSourceFont, valueTargetFont, valueEmbed, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "replaceFont", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "replaceFont");
        }
    }
    /**
     * Replaces specified font and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceFontInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replaceFont", "name");
        String valueSourceFont = (String)getTestValue("String", "replaceFont", "sourceFont");
        String valueTargetFont = (String)getTestValue("String", "replaceFont", "targetFont");
        Boolean valueEmbed = (Boolean)getTestValue("Boolean", "replaceFont", "embed");
        String valuePassword = (String)getTestValue("String", "replaceFont", "password");
        String valueFolder = (String)getTestValue("String", "replaceFont", "folder");
        String valueStorage = (String)getTestValue("String", "replaceFont", "storage");
        String valueFontsFolder = (String)getTestValue("String", "replaceFont", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "replaceFont", "storage");
            initialize("replaceFont", "storage", "String", valueStorage);
            FontsData response = api.replaceFont(valueName, valueSourceFont, valueTargetFont, valueEmbed, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "replaceFont", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "replaceFont");
        }
    }
    /**
     * Replaces specified font and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceFontInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replaceFont", "name");
        String valueSourceFont = (String)getTestValue("String", "replaceFont", "sourceFont");
        String valueTargetFont = (String)getTestValue("String", "replaceFont", "targetFont");
        Boolean valueEmbed = (Boolean)getTestValue("Boolean", "replaceFont", "embed");
        String valuePassword = (String)getTestValue("String", "replaceFont", "password");
        String valueFolder = (String)getTestValue("String", "replaceFont", "folder");
        String valueStorage = (String)getTestValue("String", "replaceFont", "storage");
        String valueFontsFolder = (String)getTestValue("String", "replaceFont", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "replaceFont", "fontsFolder");
            initialize("replaceFont", "fontsFolder", "String", valueFontsFolder);
            FontsData response = api.replaceFont(valueName, valueSourceFont, valueTargetFont, valueEmbed, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontsFolder", "replaceFont", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontsFolder", "replaceFont");
        }
    }
    
    /**
     * Replaces specified font and returns presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceFontOnlineTest() throws ApiException, Exception {
        initialize("replaceFontOnline", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replaceFontOnline", "document");
        String valueSourceFont = (String)getTestValue("String", "replaceFontOnline", "sourceFont");
        String valueTargetFont = (String)getTestValue("String", "replaceFontOnline", "targetFont");
        Boolean valueEmbed = (Boolean)getTestValue("Boolean", "replaceFontOnline", "embed");
        String valuePassword = (String)getTestValue("String", "replaceFontOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "replaceFontOnline", "fontsFolder");
        response = api.replaceFontOnline(valueDocument, valueSourceFont, valueTargetFont, valueEmbed, valuePassword, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Replaces specified font and returns presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceFontOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replaceFontOnline", "document");
        String valueSourceFont = (String)getTestValue("String", "replaceFontOnline", "sourceFont");
        String valueTargetFont = (String)getTestValue("String", "replaceFontOnline", "targetFont");
        Boolean valueEmbed = (Boolean)getTestValue("Boolean", "replaceFontOnline", "embed");
        String valuePassword = (String)getTestValue("String", "replaceFontOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "replaceFontOnline", "fontsFolder");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "replaceFontOnline", "document");
            initialize("replaceFontOnline", "document", "byte[]", valueDocument);
            File response = api.replaceFontOnline(valueDocument, valueSourceFont, valueTargetFont, valueEmbed, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "replaceFontOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "replaceFontOnline");
        }
    }
    /**
     * Replaces specified font and returns presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceFontOnlineInvalidSourceFontTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replaceFontOnline", "document");
        String valueSourceFont = (String)getTestValue("String", "replaceFontOnline", "sourceFont");
        String valueTargetFont = (String)getTestValue("String", "replaceFontOnline", "targetFont");
        Boolean valueEmbed = (Boolean)getTestValue("Boolean", "replaceFontOnline", "embed");
        String valuePassword = (String)getTestValue("String", "replaceFontOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "replaceFontOnline", "fontsFolder");
        try {
            valueSourceFont = (String)invalidizeTestValue("String", valueSourceFont, "replaceFontOnline", "sourceFont");
            initialize("replaceFontOnline", "sourceFont", "String", valueSourceFont);
            File response = api.replaceFontOnline(valueDocument, valueSourceFont, valueTargetFont, valueEmbed, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "sourceFont", "replaceFontOnline", valueSourceFont);
        }
        if (needAssertResponse) {
            assertResponse("String", "sourceFont", "replaceFontOnline");
        }
    }
    /**
     * Replaces specified font and returns presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceFontOnlineInvalidTargetFontTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replaceFontOnline", "document");
        String valueSourceFont = (String)getTestValue("String", "replaceFontOnline", "sourceFont");
        String valueTargetFont = (String)getTestValue("String", "replaceFontOnline", "targetFont");
        Boolean valueEmbed = (Boolean)getTestValue("Boolean", "replaceFontOnline", "embed");
        String valuePassword = (String)getTestValue("String", "replaceFontOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "replaceFontOnline", "fontsFolder");
        try {
            valueTargetFont = (String)invalidizeTestValue("String", valueTargetFont, "replaceFontOnline", "targetFont");
            initialize("replaceFontOnline", "targetFont", "String", valueTargetFont);
            File response = api.replaceFontOnline(valueDocument, valueSourceFont, valueTargetFont, valueEmbed, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "targetFont", "replaceFontOnline", valueTargetFont);
        }
        if (needAssertResponse) {
            assertResponse("String", "targetFont", "replaceFontOnline");
        }
    }
    /**
     * Replaces specified font and returns presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceFontOnlineInvalidEmbedTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replaceFontOnline", "document");
        String valueSourceFont = (String)getTestValue("String", "replaceFontOnline", "sourceFont");
        String valueTargetFont = (String)getTestValue("String", "replaceFontOnline", "targetFont");
        Boolean valueEmbed = (Boolean)getTestValue("Boolean", "replaceFontOnline", "embed");
        String valuePassword = (String)getTestValue("String", "replaceFontOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "replaceFontOnline", "fontsFolder");
        try {
            valueEmbed = (Boolean)invalidizeTestValue("Boolean", valueEmbed, "replaceFontOnline", "embed");
            initialize("replaceFontOnline", "embed", "Boolean", valueEmbed);
            File response = api.replaceFontOnline(valueDocument, valueSourceFont, valueTargetFont, valueEmbed, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "embed", "replaceFontOnline", valueEmbed);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "embed", "replaceFontOnline");
        }
    }
    /**
     * Replaces specified font and returns presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceFontOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replaceFontOnline", "document");
        String valueSourceFont = (String)getTestValue("String", "replaceFontOnline", "sourceFont");
        String valueTargetFont = (String)getTestValue("String", "replaceFontOnline", "targetFont");
        Boolean valueEmbed = (Boolean)getTestValue("Boolean", "replaceFontOnline", "embed");
        String valuePassword = (String)getTestValue("String", "replaceFontOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "replaceFontOnline", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "replaceFontOnline", "password");
            initialize("replaceFontOnline", "password", "String", valuePassword);
            File response = api.replaceFontOnline(valueDocument, valueSourceFont, valueTargetFont, valueEmbed, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "replaceFontOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "replaceFontOnline");
        }
    }
    /**
     * Replaces specified font and returns presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceFontOnlineInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replaceFontOnline", "document");
        String valueSourceFont = (String)getTestValue("String", "replaceFontOnline", "sourceFont");
        String valueTargetFont = (String)getTestValue("String", "replaceFontOnline", "targetFont");
        Boolean valueEmbed = (Boolean)getTestValue("Boolean", "replaceFontOnline", "embed");
        String valuePassword = (String)getTestValue("String", "replaceFontOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "replaceFontOnline", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "replaceFontOnline", "fontsFolder");
            initialize("replaceFontOnline", "fontsFolder", "String", valueFontsFolder);
            File response = api.replaceFontOnline(valueDocument, valueSourceFont, valueTargetFont, valueEmbed, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontsFolder", "replaceFontOnline", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontsFolder", "replaceFontOnline");
        }
    }
    
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextTest() throws ApiException, Exception {
        initialize("replacePresentationText", null, null, null);
        DocumentReplaceResult response = null;
        String valueName = (String)getTestValue("String", "replacePresentationText", "name");
        String valueOldValue = (String)getTestValue("String", "replacePresentationText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationText", "password");
        String valueFolder = (String)getTestValue("String", "replacePresentationText", "folder");
        String valueStorage = (String)getTestValue("String", "replacePresentationText", "storage");
        response = api.replacePresentationText(valueName, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replacePresentationText", "name");
        String valueOldValue = (String)getTestValue("String", "replacePresentationText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationText", "password");
        String valueFolder = (String)getTestValue("String", "replacePresentationText", "folder");
        String valueStorage = (String)getTestValue("String", "replacePresentationText", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "replacePresentationText", "name");
            initialize("replacePresentationText", "name", "String", valueName);
            DocumentReplaceResult response = api.replacePresentationText(valueName, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "replacePresentationText", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "replacePresentationText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextInvalidOldValueTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replacePresentationText", "name");
        String valueOldValue = (String)getTestValue("String", "replacePresentationText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationText", "password");
        String valueFolder = (String)getTestValue("String", "replacePresentationText", "folder");
        String valueStorage = (String)getTestValue("String", "replacePresentationText", "storage");
        try {
            valueOldValue = (String)invalidizeTestValue("String", valueOldValue, "replacePresentationText", "oldValue");
            initialize("replacePresentationText", "oldValue", "String", valueOldValue);
            DocumentReplaceResult response = api.replacePresentationText(valueName, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "oldValue", "replacePresentationText", valueOldValue);
        }
        if (needAssertResponse) {
            assertResponse("String", "oldValue", "replacePresentationText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextInvalidNewValueTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replacePresentationText", "name");
        String valueOldValue = (String)getTestValue("String", "replacePresentationText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationText", "password");
        String valueFolder = (String)getTestValue("String", "replacePresentationText", "folder");
        String valueStorage = (String)getTestValue("String", "replacePresentationText", "storage");
        try {
            valueNewValue = (String)invalidizeTestValue("String", valueNewValue, "replacePresentationText", "newValue");
            initialize("replacePresentationText", "newValue", "String", valueNewValue);
            DocumentReplaceResult response = api.replacePresentationText(valueName, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "newValue", "replacePresentationText", valueNewValue);
        }
        if (needAssertResponse) {
            assertResponse("String", "newValue", "replacePresentationText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextInvalidIgnoreCaseTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replacePresentationText", "name");
        String valueOldValue = (String)getTestValue("String", "replacePresentationText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationText", "password");
        String valueFolder = (String)getTestValue("String", "replacePresentationText", "folder");
        String valueStorage = (String)getTestValue("String", "replacePresentationText", "storage");
        try {
            valueIgnoreCase = (Boolean)invalidizeTestValue("Boolean", valueIgnoreCase, "replacePresentationText", "ignoreCase");
            initialize("replacePresentationText", "ignoreCase", "Boolean", valueIgnoreCase);
            DocumentReplaceResult response = api.replacePresentationText(valueName, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "ignoreCase", "replacePresentationText", valueIgnoreCase);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "ignoreCase", "replacePresentationText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replacePresentationText", "name");
        String valueOldValue = (String)getTestValue("String", "replacePresentationText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationText", "password");
        String valueFolder = (String)getTestValue("String", "replacePresentationText", "folder");
        String valueStorage = (String)getTestValue("String", "replacePresentationText", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "replacePresentationText", "password");
            initialize("replacePresentationText", "password", "String", valuePassword);
            DocumentReplaceResult response = api.replacePresentationText(valueName, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "replacePresentationText", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "replacePresentationText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replacePresentationText", "name");
        String valueOldValue = (String)getTestValue("String", "replacePresentationText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationText", "password");
        String valueFolder = (String)getTestValue("String", "replacePresentationText", "folder");
        String valueStorage = (String)getTestValue("String", "replacePresentationText", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "replacePresentationText", "folder");
            initialize("replacePresentationText", "folder", "String", valueFolder);
            DocumentReplaceResult response = api.replacePresentationText(valueName, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "replacePresentationText", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "replacePresentationText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replacePresentationText", "name");
        String valueOldValue = (String)getTestValue("String", "replacePresentationText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationText", "password");
        String valueFolder = (String)getTestValue("String", "replacePresentationText", "folder");
        String valueStorage = (String)getTestValue("String", "replacePresentationText", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "replacePresentationText", "storage");
            initialize("replacePresentationText", "storage", "String", valueStorage);
            DocumentReplaceResult response = api.replacePresentationText(valueName, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "replacePresentationText", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "replacePresentationText");
        }
    }
    
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextOnlineTest() throws ApiException, Exception {
        initialize("replacePresentationTextOnline", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replacePresentationTextOnline", "document");
        String valueOldValue = (String)getTestValue("String", "replacePresentationTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationTextOnline", "password");
        response = api.replacePresentationTextOnline(valueDocument, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replacePresentationTextOnline", "document");
        String valueOldValue = (String)getTestValue("String", "replacePresentationTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationTextOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "replacePresentationTextOnline", "document");
            initialize("replacePresentationTextOnline", "document", "byte[]", valueDocument);
            File response = api.replacePresentationTextOnline(valueDocument, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "replacePresentationTextOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "replacePresentationTextOnline");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextOnlineInvalidOldValueTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replacePresentationTextOnline", "document");
        String valueOldValue = (String)getTestValue("String", "replacePresentationTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationTextOnline", "password");
        try {
            valueOldValue = (String)invalidizeTestValue("String", valueOldValue, "replacePresentationTextOnline", "oldValue");
            initialize("replacePresentationTextOnline", "oldValue", "String", valueOldValue);
            File response = api.replacePresentationTextOnline(valueDocument, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "oldValue", "replacePresentationTextOnline", valueOldValue);
        }
        if (needAssertResponse) {
            assertResponse("String", "oldValue", "replacePresentationTextOnline");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextOnlineInvalidNewValueTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replacePresentationTextOnline", "document");
        String valueOldValue = (String)getTestValue("String", "replacePresentationTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationTextOnline", "password");
        try {
            valueNewValue = (String)invalidizeTestValue("String", valueNewValue, "replacePresentationTextOnline", "newValue");
            initialize("replacePresentationTextOnline", "newValue", "String", valueNewValue);
            File response = api.replacePresentationTextOnline(valueDocument, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "newValue", "replacePresentationTextOnline", valueNewValue);
        }
        if (needAssertResponse) {
            assertResponse("String", "newValue", "replacePresentationTextOnline");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextOnlineInvalidIgnoreCaseTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replacePresentationTextOnline", "document");
        String valueOldValue = (String)getTestValue("String", "replacePresentationTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationTextOnline", "password");
        try {
            valueIgnoreCase = (Boolean)invalidizeTestValue("Boolean", valueIgnoreCase, "replacePresentationTextOnline", "ignoreCase");
            initialize("replacePresentationTextOnline", "ignoreCase", "Boolean", valueIgnoreCase);
            File response = api.replacePresentationTextOnline(valueDocument, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "ignoreCase", "replacePresentationTextOnline", valueIgnoreCase);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "ignoreCase", "replacePresentationTextOnline");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replacePresentationTextOnline", "document");
        String valueOldValue = (String)getTestValue("String", "replacePresentationTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationTextOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "replacePresentationTextOnline", "password");
            initialize("replacePresentationTextOnline", "password", "String", valuePassword);
            File response = api.replacePresentationTextOnline(valueDocument, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "replacePresentationTextOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "replacePresentationTextOnline");
        }
    }
    
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextTest() throws ApiException, Exception {
        initialize("replaceSlideText", null, null, null);
        SlideReplaceResult response = null;
        String valueName = (String)getTestValue("String", "replaceSlideText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideText", "password");
        String valueFolder = (String)getTestValue("String", "replaceSlideText", "folder");
        String valueStorage = (String)getTestValue("String", "replaceSlideText", "storage");
        response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replaceSlideText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideText", "password");
        String valueFolder = (String)getTestValue("String", "replaceSlideText", "folder");
        String valueStorage = (String)getTestValue("String", "replaceSlideText", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "replaceSlideText", "name");
            initialize("replaceSlideText", "name", "String", valueName);
            SlideReplaceResult response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "replaceSlideText", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "replaceSlideText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replaceSlideText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideText", "password");
        String valueFolder = (String)getTestValue("String", "replaceSlideText", "folder");
        String valueStorage = (String)getTestValue("String", "replaceSlideText", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "replaceSlideText", "slideIndex");
            initialize("replaceSlideText", "slideIndex", "Integer", valueSlideIndex);
            SlideReplaceResult response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "replaceSlideText", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "replaceSlideText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextInvalidOldValueTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replaceSlideText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideText", "password");
        String valueFolder = (String)getTestValue("String", "replaceSlideText", "folder");
        String valueStorage = (String)getTestValue("String", "replaceSlideText", "storage");
        try {
            valueOldValue = (String)invalidizeTestValue("String", valueOldValue, "replaceSlideText", "oldValue");
            initialize("replaceSlideText", "oldValue", "String", valueOldValue);
            SlideReplaceResult response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "oldValue", "replaceSlideText", valueOldValue);
        }
        if (needAssertResponse) {
            assertResponse("String", "oldValue", "replaceSlideText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextInvalidNewValueTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replaceSlideText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideText", "password");
        String valueFolder = (String)getTestValue("String", "replaceSlideText", "folder");
        String valueStorage = (String)getTestValue("String", "replaceSlideText", "storage");
        try {
            valueNewValue = (String)invalidizeTestValue("String", valueNewValue, "replaceSlideText", "newValue");
            initialize("replaceSlideText", "newValue", "String", valueNewValue);
            SlideReplaceResult response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "newValue", "replaceSlideText", valueNewValue);
        }
        if (needAssertResponse) {
            assertResponse("String", "newValue", "replaceSlideText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextInvalidIgnoreCaseTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replaceSlideText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideText", "password");
        String valueFolder = (String)getTestValue("String", "replaceSlideText", "folder");
        String valueStorage = (String)getTestValue("String", "replaceSlideText", "storage");
        try {
            valueIgnoreCase = (Boolean)invalidizeTestValue("Boolean", valueIgnoreCase, "replaceSlideText", "ignoreCase");
            initialize("replaceSlideText", "ignoreCase", "Boolean", valueIgnoreCase);
            SlideReplaceResult response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "ignoreCase", "replaceSlideText", valueIgnoreCase);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "ignoreCase", "replaceSlideText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replaceSlideText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideText", "password");
        String valueFolder = (String)getTestValue("String", "replaceSlideText", "folder");
        String valueStorage = (String)getTestValue("String", "replaceSlideText", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "replaceSlideText", "password");
            initialize("replaceSlideText", "password", "String", valuePassword);
            SlideReplaceResult response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "replaceSlideText", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "replaceSlideText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replaceSlideText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideText", "password");
        String valueFolder = (String)getTestValue("String", "replaceSlideText", "folder");
        String valueStorage = (String)getTestValue("String", "replaceSlideText", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "replaceSlideText", "folder");
            initialize("replaceSlideText", "folder", "String", valueFolder);
            SlideReplaceResult response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "replaceSlideText", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "replaceSlideText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replaceSlideText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideText", "password");
        String valueFolder = (String)getTestValue("String", "replaceSlideText", "folder");
        String valueStorage = (String)getTestValue("String", "replaceSlideText", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "replaceSlideText", "storage");
            initialize("replaceSlideText", "storage", "String", valueStorage);
            SlideReplaceResult response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "replaceSlideText", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "replaceSlideText");
        }
    }
    
    /**
     * Replace slide text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextOnlineTest() throws ApiException, Exception {
        initialize("replaceSlideTextOnline", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replaceSlideTextOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideTextOnline", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideTextOnline", "password");
        response = api.replaceSlideTextOnline(valueDocument, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Replace slide text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replaceSlideTextOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideTextOnline", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideTextOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "replaceSlideTextOnline", "document");
            initialize("replaceSlideTextOnline", "document", "byte[]", valueDocument);
            File response = api.replaceSlideTextOnline(valueDocument, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "replaceSlideTextOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "replaceSlideTextOnline");
        }
    }
    /**
     * Replace slide text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextOnlineInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replaceSlideTextOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideTextOnline", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideTextOnline", "password");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "replaceSlideTextOnline", "slideIndex");
            initialize("replaceSlideTextOnline", "slideIndex", "Integer", valueSlideIndex);
            File response = api.replaceSlideTextOnline(valueDocument, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "replaceSlideTextOnline", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "replaceSlideTextOnline");
        }
    }
    /**
     * Replace slide text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextOnlineInvalidOldValueTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replaceSlideTextOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideTextOnline", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideTextOnline", "password");
        try {
            valueOldValue = (String)invalidizeTestValue("String", valueOldValue, "replaceSlideTextOnline", "oldValue");
            initialize("replaceSlideTextOnline", "oldValue", "String", valueOldValue);
            File response = api.replaceSlideTextOnline(valueDocument, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "oldValue", "replaceSlideTextOnline", valueOldValue);
        }
        if (needAssertResponse) {
            assertResponse("String", "oldValue", "replaceSlideTextOnline");
        }
    }
    /**
     * Replace slide text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextOnlineInvalidNewValueTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replaceSlideTextOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideTextOnline", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideTextOnline", "password");
        try {
            valueNewValue = (String)invalidizeTestValue("String", valueNewValue, "replaceSlideTextOnline", "newValue");
            initialize("replaceSlideTextOnline", "newValue", "String", valueNewValue);
            File response = api.replaceSlideTextOnline(valueDocument, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "newValue", "replaceSlideTextOnline", valueNewValue);
        }
        if (needAssertResponse) {
            assertResponse("String", "newValue", "replaceSlideTextOnline");
        }
    }
    /**
     * Replace slide text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextOnlineInvalidIgnoreCaseTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replaceSlideTextOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideTextOnline", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideTextOnline", "password");
        try {
            valueIgnoreCase = (Boolean)invalidizeTestValue("Boolean", valueIgnoreCase, "replaceSlideTextOnline", "ignoreCase");
            initialize("replaceSlideTextOnline", "ignoreCase", "Boolean", valueIgnoreCase);
            File response = api.replaceSlideTextOnline(valueDocument, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "ignoreCase", "replaceSlideTextOnline", valueIgnoreCase);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "ignoreCase", "replaceSlideTextOnline");
        }
    }
    /**
     * Replace slide text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replaceSlideTextOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideTextOnline", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideTextOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "replaceSlideTextOnline", "password");
            initialize("replaceSlideTextOnline", "password", "String", valuePassword);
            File response = api.replaceSlideTextOnline(valueDocument, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "replaceSlideTextOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "replaceSlideTextOnline");
        }
    }
    
    /**
     * Convert Mathematical Text to MathML Format and saves result to the storage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePortionAsMathMlTest() throws ApiException, Exception {
        initialize("savePortionAsMathMl", null, null, null);
        ;
        String valueName = (String)getTestValue("String", "savePortionAsMathMl", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "portionIndex");
        String valueOutPath = (String)getTestValue("String", "savePortionAsMathMl", "outPath");
        String valuePassword = (String)getTestValue("String", "savePortionAsMathMl", "password");
        String valueFolder = (String)getTestValue("String", "savePortionAsMathMl", "folder");
        String valueStorage = (String)getTestValue("String", "savePortionAsMathMl", "storage");
        api.savePortionAsMathMl(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueOutPath, valuePassword, valueFolder, valueStorage);
    }

    /**
     * Convert Mathematical Text to MathML Format and saves result to the storage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePortionAsMathMlInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePortionAsMathMl", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "portionIndex");
        String valueOutPath = (String)getTestValue("String", "savePortionAsMathMl", "outPath");
        String valuePassword = (String)getTestValue("String", "savePortionAsMathMl", "password");
        String valueFolder = (String)getTestValue("String", "savePortionAsMathMl", "folder");
        String valueStorage = (String)getTestValue("String", "savePortionAsMathMl", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "savePortionAsMathMl", "name");
            initialize("savePortionAsMathMl", "name", "String", valueName);
            api.savePortionAsMathMl(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueOutPath, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "savePortionAsMathMl", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "savePortionAsMathMl");
        }
    }
    /**
     * Convert Mathematical Text to MathML Format and saves result to the storage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePortionAsMathMlInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePortionAsMathMl", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "portionIndex");
        String valueOutPath = (String)getTestValue("String", "savePortionAsMathMl", "outPath");
        String valuePassword = (String)getTestValue("String", "savePortionAsMathMl", "password");
        String valueFolder = (String)getTestValue("String", "savePortionAsMathMl", "folder");
        String valueStorage = (String)getTestValue("String", "savePortionAsMathMl", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "savePortionAsMathMl", "slideIndex");
            initialize("savePortionAsMathMl", "slideIndex", "Integer", valueSlideIndex);
            api.savePortionAsMathMl(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueOutPath, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "savePortionAsMathMl", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "savePortionAsMathMl");
        }
    }
    /**
     * Convert Mathematical Text to MathML Format and saves result to the storage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePortionAsMathMlInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePortionAsMathMl", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "portionIndex");
        String valueOutPath = (String)getTestValue("String", "savePortionAsMathMl", "outPath");
        String valuePassword = (String)getTestValue("String", "savePortionAsMathMl", "password");
        String valueFolder = (String)getTestValue("String", "savePortionAsMathMl", "folder");
        String valueStorage = (String)getTestValue("String", "savePortionAsMathMl", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "savePortionAsMathMl", "shapeIndex");
            initialize("savePortionAsMathMl", "shapeIndex", "Integer", valueShapeIndex);
            api.savePortionAsMathMl(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueOutPath, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "savePortionAsMathMl", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "savePortionAsMathMl");
        }
    }
    /**
     * Convert Mathematical Text to MathML Format and saves result to the storage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePortionAsMathMlInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePortionAsMathMl", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "portionIndex");
        String valueOutPath = (String)getTestValue("String", "savePortionAsMathMl", "outPath");
        String valuePassword = (String)getTestValue("String", "savePortionAsMathMl", "password");
        String valueFolder = (String)getTestValue("String", "savePortionAsMathMl", "folder");
        String valueStorage = (String)getTestValue("String", "savePortionAsMathMl", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "savePortionAsMathMl", "paragraphIndex");
            initialize("savePortionAsMathMl", "paragraphIndex", "Integer", valueParagraphIndex);
            api.savePortionAsMathMl(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueOutPath, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "savePortionAsMathMl", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "savePortionAsMathMl");
        }
    }
    /**
     * Convert Mathematical Text to MathML Format and saves result to the storage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePortionAsMathMlInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePortionAsMathMl", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "portionIndex");
        String valueOutPath = (String)getTestValue("String", "savePortionAsMathMl", "outPath");
        String valuePassword = (String)getTestValue("String", "savePortionAsMathMl", "password");
        String valueFolder = (String)getTestValue("String", "savePortionAsMathMl", "folder");
        String valueStorage = (String)getTestValue("String", "savePortionAsMathMl", "storage");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "savePortionAsMathMl", "portionIndex");
            initialize("savePortionAsMathMl", "portionIndex", "Integer", valuePortionIndex);
            api.savePortionAsMathMl(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueOutPath, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "portionIndex", "savePortionAsMathMl", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "portionIndex", "savePortionAsMathMl");
        }
    }
    /**
     * Convert Mathematical Text to MathML Format and saves result to the storage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePortionAsMathMlInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePortionAsMathMl", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "portionIndex");
        String valueOutPath = (String)getTestValue("String", "savePortionAsMathMl", "outPath");
        String valuePassword = (String)getTestValue("String", "savePortionAsMathMl", "password");
        String valueFolder = (String)getTestValue("String", "savePortionAsMathMl", "folder");
        String valueStorage = (String)getTestValue("String", "savePortionAsMathMl", "storage");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "savePortionAsMathMl", "outPath");
            initialize("savePortionAsMathMl", "outPath", "String", valueOutPath);
            api.savePortionAsMathMl(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueOutPath, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "outPath", "savePortionAsMathMl", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("String", "outPath", "savePortionAsMathMl");
        }
    }
    /**
     * Convert Mathematical Text to MathML Format and saves result to the storage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePortionAsMathMlInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePortionAsMathMl", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "portionIndex");
        String valueOutPath = (String)getTestValue("String", "savePortionAsMathMl", "outPath");
        String valuePassword = (String)getTestValue("String", "savePortionAsMathMl", "password");
        String valueFolder = (String)getTestValue("String", "savePortionAsMathMl", "folder");
        String valueStorage = (String)getTestValue("String", "savePortionAsMathMl", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "savePortionAsMathMl", "password");
            initialize("savePortionAsMathMl", "password", "String", valuePassword);
            api.savePortionAsMathMl(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueOutPath, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "savePortionAsMathMl", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "savePortionAsMathMl");
        }
    }
    /**
     * Convert Mathematical Text to MathML Format and saves result to the storage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePortionAsMathMlInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePortionAsMathMl", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "portionIndex");
        String valueOutPath = (String)getTestValue("String", "savePortionAsMathMl", "outPath");
        String valuePassword = (String)getTestValue("String", "savePortionAsMathMl", "password");
        String valueFolder = (String)getTestValue("String", "savePortionAsMathMl", "folder");
        String valueStorage = (String)getTestValue("String", "savePortionAsMathMl", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "savePortionAsMathMl", "folder");
            initialize("savePortionAsMathMl", "folder", "String", valueFolder);
            api.savePortionAsMathMl(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueOutPath, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "savePortionAsMathMl", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "savePortionAsMathMl");
        }
    }
    /**
     * Convert Mathematical Text to MathML Format and saves result to the storage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePortionAsMathMlInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePortionAsMathMl", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "savePortionAsMathMl", "portionIndex");
        String valueOutPath = (String)getTestValue("String", "savePortionAsMathMl", "outPath");
        String valuePassword = (String)getTestValue("String", "savePortionAsMathMl", "password");
        String valueFolder = (String)getTestValue("String", "savePortionAsMathMl", "folder");
        String valueStorage = (String)getTestValue("String", "savePortionAsMathMl", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "savePortionAsMathMl", "storage");
            initialize("savePortionAsMathMl", "storage", "String", valueStorage);
            api.savePortionAsMathMl(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueOutPath, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "savePortionAsMathMl", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "savePortionAsMathMl");
        }
    }
    
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePresentationTest() throws ApiException, Exception {
        initialize("savePresentation", null, null, null);
        ;
        String valueName = (String)getTestValue("String", "savePresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "savePresentation", "format");
        String valueOutPath = (String)getTestValue("String", "savePresentation", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "savePresentation", "options");
        String valuePassword = (String)getTestValue("String", "savePresentation", "password");
        String valueFolder = (String)getTestValue("String", "savePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "savePresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "savePresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "savePresentation", "slides");
        api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
    }

    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePresentationInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "savePresentation", "format");
        String valueOutPath = (String)getTestValue("String", "savePresentation", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "savePresentation", "options");
        String valuePassword = (String)getTestValue("String", "savePresentation", "password");
        String valueFolder = (String)getTestValue("String", "savePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "savePresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "savePresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "savePresentation", "slides");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "savePresentation", "name");
            initialize("savePresentation", "name", "String", valueName);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "savePresentation", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "savePresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePresentationInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "savePresentation", "format");
        String valueOutPath = (String)getTestValue("String", "savePresentation", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "savePresentation", "options");
        String valuePassword = (String)getTestValue("String", "savePresentation", "password");
        String valueFolder = (String)getTestValue("String", "savePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "savePresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "savePresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "savePresentation", "slides");
        try {
            valueFormat = (ExportFormat)invalidizeTestValue("ExportFormat", valueFormat, "savePresentation", "format");
            initialize("savePresentation", "format", "ExportFormat", valueFormat);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ExportFormat", "format", "savePresentation", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("ExportFormat", "format", "savePresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePresentationInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "savePresentation", "format");
        String valueOutPath = (String)getTestValue("String", "savePresentation", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "savePresentation", "options");
        String valuePassword = (String)getTestValue("String", "savePresentation", "password");
        String valueFolder = (String)getTestValue("String", "savePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "savePresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "savePresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "savePresentation", "slides");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "savePresentation", "outPath");
            initialize("savePresentation", "outPath", "String", valueOutPath);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "outPath", "savePresentation", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("String", "outPath", "savePresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePresentationInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "savePresentation", "format");
        String valueOutPath = (String)getTestValue("String", "savePresentation", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "savePresentation", "options");
        String valuePassword = (String)getTestValue("String", "savePresentation", "password");
        String valueFolder = (String)getTestValue("String", "savePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "savePresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "savePresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "savePresentation", "slides");
        try {
            valueOptions = (ExportOptions)invalidizeTestValue("ExportOptions", valueOptions, "savePresentation", "options");
            initialize("savePresentation", "options", "ExportOptions", valueOptions);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ExportOptions", "options", "savePresentation", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("ExportOptions", "options", "savePresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePresentationInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "savePresentation", "format");
        String valueOutPath = (String)getTestValue("String", "savePresentation", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "savePresentation", "options");
        String valuePassword = (String)getTestValue("String", "savePresentation", "password");
        String valueFolder = (String)getTestValue("String", "savePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "savePresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "savePresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "savePresentation", "slides");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "savePresentation", "password");
            initialize("savePresentation", "password", "String", valuePassword);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "savePresentation", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "savePresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePresentationInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "savePresentation", "format");
        String valueOutPath = (String)getTestValue("String", "savePresentation", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "savePresentation", "options");
        String valuePassword = (String)getTestValue("String", "savePresentation", "password");
        String valueFolder = (String)getTestValue("String", "savePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "savePresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "savePresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "savePresentation", "slides");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "savePresentation", "folder");
            initialize("savePresentation", "folder", "String", valueFolder);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "savePresentation", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "savePresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePresentationInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "savePresentation", "format");
        String valueOutPath = (String)getTestValue("String", "savePresentation", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "savePresentation", "options");
        String valuePassword = (String)getTestValue("String", "savePresentation", "password");
        String valueFolder = (String)getTestValue("String", "savePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "savePresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "savePresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "savePresentation", "slides");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "savePresentation", "storage");
            initialize("savePresentation", "storage", "String", valueStorage);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "savePresentation", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "savePresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePresentationInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "savePresentation", "format");
        String valueOutPath = (String)getTestValue("String", "savePresentation", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "savePresentation", "options");
        String valuePassword = (String)getTestValue("String", "savePresentation", "password");
        String valueFolder = (String)getTestValue("String", "savePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "savePresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "savePresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "savePresentation", "slides");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "savePresentation", "fontsFolder");
            initialize("savePresentation", "fontsFolder", "String", valueFontsFolder);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontsFolder", "savePresentation", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontsFolder", "savePresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePresentationInvalidSlidesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "savePresentation", "format");
        String valueOutPath = (String)getTestValue("String", "savePresentation", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "savePresentation", "options");
        String valuePassword = (String)getTestValue("String", "savePresentation", "password");
        String valueFolder = (String)getTestValue("String", "savePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "savePresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "savePresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "savePresentation", "slides");
        try {
            valueSlides = (List<Integer>)invalidizeTestValue("List<Integer>", valueSlides, "savePresentation", "slides");
            initialize("savePresentation", "slides", "List<Integer>", valueSlides);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "List<Integer>", "slides", "savePresentation", valueSlides);
        }
        if (needAssertResponse) {
            assertResponse("List<Integer>", "slides", "savePresentation");
        }
    }
    
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeTest() throws ApiException, Exception {
        initialize("saveShape", null, null, null);
        ;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveShape", "subShape");
        api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
    }

    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveShape", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "saveShape", "name");
            initialize("saveShape", "name", "String", valueName);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "saveShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "saveShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveShape", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "saveShape", "slideIndex");
            initialize("saveShape", "slideIndex", "Integer", valueSlideIndex);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "saveShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "saveShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveShape", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "saveShape", "shapeIndex");
            initialize("saveShape", "shapeIndex", "Integer", valueShapeIndex);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "saveShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "saveShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveShape", "subShape");
        try {
            valueFormat = (ShapeExportFormat)invalidizeTestValue("ShapeExportFormat", valueFormat, "saveShape", "format");
            initialize("saveShape", "format", "ShapeExportFormat", valueFormat);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ShapeExportFormat", "format", "saveShape", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("ShapeExportFormat", "format", "saveShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveShape", "subShape");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "saveShape", "outPath");
            initialize("saveShape", "outPath", "String", valueOutPath);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "outPath", "saveShape", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("String", "outPath", "saveShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveShape", "subShape");
        try {
            valueOptions = (IShapeExportOptions)invalidizeTestValue("IShapeExportOptions", valueOptions, "saveShape", "options");
            initialize("saveShape", "options", "IShapeExportOptions", valueOptions);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "IShapeExportOptions", "options", "saveShape", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("IShapeExportOptions", "options", "saveShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidScaleXTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveShape", "subShape");
        try {
            valueScaleX = (Double)invalidizeTestValue("Double", valueScaleX, "saveShape", "scaleX");
            initialize("saveShape", "scaleX", "Double", valueScaleX);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Double", "scaleX", "saveShape", valueScaleX);
        }
        if (needAssertResponse) {
            assertResponse("Double", "scaleX", "saveShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidScaleYTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveShape", "subShape");
        try {
            valueScaleY = (Double)invalidizeTestValue("Double", valueScaleY, "saveShape", "scaleY");
            initialize("saveShape", "scaleY", "Double", valueScaleY);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Double", "scaleY", "saveShape", valueScaleY);
        }
        if (needAssertResponse) {
            assertResponse("Double", "scaleY", "saveShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidBoundsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveShape", "subShape");
        try {
            valueBounds = (ShapeThumbnailBounds)invalidizeTestValue("ShapeThumbnailBounds", valueBounds, "saveShape", "bounds");
            initialize("saveShape", "bounds", "ShapeThumbnailBounds", valueBounds);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ShapeThumbnailBounds", "bounds", "saveShape", valueBounds);
        }
        if (needAssertResponse) {
            assertResponse("ShapeThumbnailBounds", "bounds", "saveShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveShape", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "saveShape", "password");
            initialize("saveShape", "password", "String", valuePassword);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "saveShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "saveShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveShape", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "saveShape", "folder");
            initialize("saveShape", "folder", "String", valueFolder);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "saveShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "saveShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveShape", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "saveShape", "storage");
            initialize("saveShape", "storage", "String", valueStorage);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "saveShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "saveShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveShape", "subShape");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "saveShape", "fontsFolder");
            initialize("saveShape", "fontsFolder", "String", valueFontsFolder);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontsFolder", "saveShape", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontsFolder", "saveShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveShape", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "saveShape", "subShape");
            initialize("saveShape", "subShape", "String", valueSubShape);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "saveShape", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "saveShape");
        }
    }
    
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeOnlineTest() throws ApiException, Exception {
        initialize("saveShapeOnline", null, null, null);
        ;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShapeOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveShapeOnline", "outPath");
        Double valueScaleX = (Double)getTestValue("Double", "saveShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShapeOnline", "fontsFolder");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShapeOnline", "options");
        api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder, valueOptions);
    }

    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShapeOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveShapeOnline", "outPath");
        Double valueScaleX = (Double)getTestValue("Double", "saveShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShapeOnline", "fontsFolder");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShapeOnline", "options");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "saveShapeOnline", "document");
            initialize("saveShapeOnline", "document", "byte[]", valueDocument);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "saveShapeOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "saveShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeOnlineInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShapeOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveShapeOnline", "outPath");
        Double valueScaleX = (Double)getTestValue("Double", "saveShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShapeOnline", "fontsFolder");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShapeOnline", "options");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "saveShapeOnline", "slideIndex");
            initialize("saveShapeOnline", "slideIndex", "Integer", valueSlideIndex);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "saveShapeOnline", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "saveShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeOnlineInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShapeOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveShapeOnline", "outPath");
        Double valueScaleX = (Double)getTestValue("Double", "saveShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShapeOnline", "fontsFolder");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShapeOnline", "options");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "saveShapeOnline", "shapeIndex");
            initialize("saveShapeOnline", "shapeIndex", "Integer", valueShapeIndex);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "saveShapeOnline", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "saveShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeOnlineInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShapeOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveShapeOnline", "outPath");
        Double valueScaleX = (Double)getTestValue("Double", "saveShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShapeOnline", "fontsFolder");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShapeOnline", "options");
        try {
            valueFormat = (ShapeExportFormat)invalidizeTestValue("ShapeExportFormat", valueFormat, "saveShapeOnline", "format");
            initialize("saveShapeOnline", "format", "ShapeExportFormat", valueFormat);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ShapeExportFormat", "format", "saveShapeOnline", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("ShapeExportFormat", "format", "saveShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeOnlineInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShapeOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveShapeOnline", "outPath");
        Double valueScaleX = (Double)getTestValue("Double", "saveShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShapeOnline", "fontsFolder");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShapeOnline", "options");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "saveShapeOnline", "outPath");
            initialize("saveShapeOnline", "outPath", "String", valueOutPath);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "outPath", "saveShapeOnline", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("String", "outPath", "saveShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeOnlineInvalidScaleXTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShapeOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveShapeOnline", "outPath");
        Double valueScaleX = (Double)getTestValue("Double", "saveShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShapeOnline", "fontsFolder");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShapeOnline", "options");
        try {
            valueScaleX = (Double)invalidizeTestValue("Double", valueScaleX, "saveShapeOnline", "scaleX");
            initialize("saveShapeOnline", "scaleX", "Double", valueScaleX);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Double", "scaleX", "saveShapeOnline", valueScaleX);
        }
        if (needAssertResponse) {
            assertResponse("Double", "scaleX", "saveShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeOnlineInvalidScaleYTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShapeOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveShapeOnline", "outPath");
        Double valueScaleX = (Double)getTestValue("Double", "saveShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShapeOnline", "fontsFolder");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShapeOnline", "options");
        try {
            valueScaleY = (Double)invalidizeTestValue("Double", valueScaleY, "saveShapeOnline", "scaleY");
            initialize("saveShapeOnline", "scaleY", "Double", valueScaleY);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Double", "scaleY", "saveShapeOnline", valueScaleY);
        }
        if (needAssertResponse) {
            assertResponse("Double", "scaleY", "saveShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeOnlineInvalidBoundsTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShapeOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveShapeOnline", "outPath");
        Double valueScaleX = (Double)getTestValue("Double", "saveShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShapeOnline", "fontsFolder");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShapeOnline", "options");
        try {
            valueBounds = (ShapeThumbnailBounds)invalidizeTestValue("ShapeThumbnailBounds", valueBounds, "saveShapeOnline", "bounds");
            initialize("saveShapeOnline", "bounds", "ShapeThumbnailBounds", valueBounds);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ShapeThumbnailBounds", "bounds", "saveShapeOnline", valueBounds);
        }
        if (needAssertResponse) {
            assertResponse("ShapeThumbnailBounds", "bounds", "saveShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShapeOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveShapeOnline", "outPath");
        Double valueScaleX = (Double)getTestValue("Double", "saveShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShapeOnline", "fontsFolder");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShapeOnline", "options");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "saveShapeOnline", "password");
            initialize("saveShapeOnline", "password", "String", valuePassword);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "saveShapeOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "saveShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeOnlineInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShapeOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveShapeOnline", "outPath");
        Double valueScaleX = (Double)getTestValue("Double", "saveShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShapeOnline", "fontsFolder");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShapeOnline", "options");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "saveShapeOnline", "storage");
            initialize("saveShapeOnline", "storage", "String", valueStorage);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "saveShapeOnline", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "saveShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeOnlineInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShapeOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveShapeOnline", "outPath");
        Double valueScaleX = (Double)getTestValue("Double", "saveShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShapeOnline", "fontsFolder");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShapeOnline", "options");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "saveShapeOnline", "fontsFolder");
            initialize("saveShapeOnline", "fontsFolder", "String", valueFontsFolder);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontsFolder", "saveShapeOnline", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontsFolder", "saveShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeOnlineInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShapeOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveShapeOnline", "outPath");
        Double valueScaleX = (Double)getTestValue("Double", "saveShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShapeOnline", "fontsFolder");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShapeOnline", "options");
        try {
            valueOptions = (IShapeExportOptions)invalidizeTestValue("IShapeExportOptions", valueOptions, "saveShapeOnline", "options");
            initialize("saveShapeOnline", "options", "IShapeExportOptions", valueOptions);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "IShapeExportOptions", "options", "saveShapeOnline", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("IShapeExportOptions", "options", "saveShapeOnline");
        }
    }
    
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideTest() throws ApiException, Exception {
        initialize("saveSlide", null, null, null);
        ;
        String valueName = (String)getTestValue("String", "saveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlide", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlide", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlide", "height");
        String valuePassword = (String)getTestValue("String", "saveSlide", "password");
        String valueFolder = (String)getTestValue("String", "saveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "saveSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlide", "fontsFolder");
        api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
    }

    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlide", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlide", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlide", "height");
        String valuePassword = (String)getTestValue("String", "saveSlide", "password");
        String valueFolder = (String)getTestValue("String", "saveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "saveSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlide", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "saveSlide", "name");
            initialize("saveSlide", "name", "String", valueName);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "saveSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "saveSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlide", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlide", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlide", "height");
        String valuePassword = (String)getTestValue("String", "saveSlide", "password");
        String valueFolder = (String)getTestValue("String", "saveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "saveSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlide", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "saveSlide", "slideIndex");
            initialize("saveSlide", "slideIndex", "Integer", valueSlideIndex);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "saveSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "saveSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlide", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlide", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlide", "height");
        String valuePassword = (String)getTestValue("String", "saveSlide", "password");
        String valueFolder = (String)getTestValue("String", "saveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "saveSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlide", "fontsFolder");
        try {
            valueFormat = (SlideExportFormat)invalidizeTestValue("SlideExportFormat", valueFormat, "saveSlide", "format");
            initialize("saveSlide", "format", "SlideExportFormat", valueFormat);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SlideExportFormat", "format", "saveSlide", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("SlideExportFormat", "format", "saveSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlide", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlide", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlide", "height");
        String valuePassword = (String)getTestValue("String", "saveSlide", "password");
        String valueFolder = (String)getTestValue("String", "saveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "saveSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlide", "fontsFolder");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "saveSlide", "outPath");
            initialize("saveSlide", "outPath", "String", valueOutPath);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "outPath", "saveSlide", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("String", "outPath", "saveSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlide", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlide", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlide", "height");
        String valuePassword = (String)getTestValue("String", "saveSlide", "password");
        String valueFolder = (String)getTestValue("String", "saveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "saveSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlide", "fontsFolder");
        try {
            valueOptions = (ExportOptions)invalidizeTestValue("ExportOptions", valueOptions, "saveSlide", "options");
            initialize("saveSlide", "options", "ExportOptions", valueOptions);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ExportOptions", "options", "saveSlide", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("ExportOptions", "options", "saveSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlide", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlide", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlide", "height");
        String valuePassword = (String)getTestValue("String", "saveSlide", "password");
        String valueFolder = (String)getTestValue("String", "saveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "saveSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlide", "fontsFolder");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "saveSlide", "width");
            initialize("saveSlide", "width", "Integer", valueWidth);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "width", "saveSlide", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "width", "saveSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlide", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlide", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlide", "height");
        String valuePassword = (String)getTestValue("String", "saveSlide", "password");
        String valueFolder = (String)getTestValue("String", "saveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "saveSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlide", "fontsFolder");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "saveSlide", "height");
            initialize("saveSlide", "height", "Integer", valueHeight);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "height", "saveSlide", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "height", "saveSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlide", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlide", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlide", "height");
        String valuePassword = (String)getTestValue("String", "saveSlide", "password");
        String valueFolder = (String)getTestValue("String", "saveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "saveSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlide", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "saveSlide", "password");
            initialize("saveSlide", "password", "String", valuePassword);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "saveSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "saveSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlide", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlide", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlide", "height");
        String valuePassword = (String)getTestValue("String", "saveSlide", "password");
        String valueFolder = (String)getTestValue("String", "saveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "saveSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlide", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "saveSlide", "folder");
            initialize("saveSlide", "folder", "String", valueFolder);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "saveSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "saveSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlide", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlide", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlide", "height");
        String valuePassword = (String)getTestValue("String", "saveSlide", "password");
        String valueFolder = (String)getTestValue("String", "saveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "saveSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlide", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "saveSlide", "storage");
            initialize("saveSlide", "storage", "String", valueStorage);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "saveSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "saveSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlide", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlide", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlide", "height");
        String valuePassword = (String)getTestValue("String", "saveSlide", "password");
        String valueFolder = (String)getTestValue("String", "saveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "saveSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlide", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "saveSlide", "fontsFolder");
            initialize("saveSlide", "fontsFolder", "String", valueFontsFolder);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontsFolder", "saveSlide", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontsFolder", "saveSlide");
        }
    }
    
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideOnlineTest() throws ApiException, Exception {
        initialize("saveSlideOnline", null, null, null);
        ;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlideOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlideOnline", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "saveSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlideOnline", "fontsFolder");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlideOnline", "options");
        api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder, valueOptions);
    }

    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlideOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlideOnline", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "saveSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlideOnline", "fontsFolder");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlideOnline", "options");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "saveSlideOnline", "document");
            initialize("saveSlideOnline", "document", "byte[]", valueDocument);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "saveSlideOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "saveSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideOnlineInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlideOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlideOnline", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "saveSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlideOnline", "fontsFolder");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlideOnline", "options");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "saveSlideOnline", "slideIndex");
            initialize("saveSlideOnline", "slideIndex", "Integer", valueSlideIndex);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "saveSlideOnline", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "saveSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideOnlineInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlideOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlideOnline", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "saveSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlideOnline", "fontsFolder");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlideOnline", "options");
        try {
            valueFormat = (SlideExportFormat)invalidizeTestValue("SlideExportFormat", valueFormat, "saveSlideOnline", "format");
            initialize("saveSlideOnline", "format", "SlideExportFormat", valueFormat);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SlideExportFormat", "format", "saveSlideOnline", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("SlideExportFormat", "format", "saveSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideOnlineInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlideOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlideOnline", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "saveSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlideOnline", "fontsFolder");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlideOnline", "options");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "saveSlideOnline", "outPath");
            initialize("saveSlideOnline", "outPath", "String", valueOutPath);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "outPath", "saveSlideOnline", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("String", "outPath", "saveSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideOnlineInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlideOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlideOnline", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "saveSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlideOnline", "fontsFolder");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlideOnline", "options");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "saveSlideOnline", "width");
            initialize("saveSlideOnline", "width", "Integer", valueWidth);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "width", "saveSlideOnline", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "width", "saveSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideOnlineInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlideOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlideOnline", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "saveSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlideOnline", "fontsFolder");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlideOnline", "options");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "saveSlideOnline", "height");
            initialize("saveSlideOnline", "height", "Integer", valueHeight);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "height", "saveSlideOnline", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "height", "saveSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlideOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlideOnline", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "saveSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlideOnline", "fontsFolder");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlideOnline", "options");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "saveSlideOnline", "password");
            initialize("saveSlideOnline", "password", "String", valuePassword);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "saveSlideOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "saveSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideOnlineInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlideOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlideOnline", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "saveSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlideOnline", "fontsFolder");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlideOnline", "options");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "saveSlideOnline", "storage");
            initialize("saveSlideOnline", "storage", "String", valueStorage);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "saveSlideOnline", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "saveSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideOnlineInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlideOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlideOnline", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "saveSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlideOnline", "fontsFolder");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlideOnline", "options");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "saveSlideOnline", "fontsFolder");
            initialize("saveSlideOnline", "fontsFolder", "String", valueFontsFolder);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontsFolder", "saveSlideOnline", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontsFolder", "saveSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideOnlineInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlideOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlideOnline", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "saveSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlideOnline", "fontsFolder");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlideOnline", "options");
        try {
            valueOptions = (ExportOptions)invalidizeTestValue("ExportOptions", valueOptions, "saveSlideOnline", "options");
            initialize("saveSlideOnline", "options", "ExportOptions", valueOptions);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder, valueOptions);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ExportOptions", "options", "saveSlideOnline", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("ExportOptions", "options", "saveSlideOnline");
        }
    }
    
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSpecialSlideShapeTest() throws ApiException, Exception {
        initialize("saveSpecialSlideShape", null, null, null);
        ;
        String valueName = (String)getTestValue("String", "saveSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "saveSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSpecialSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSpecialSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveSpecialSlideShape", "subShape");
        api.saveSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
    }

    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSpecialSlideShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "saveSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSpecialSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSpecialSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveSpecialSlideShape", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "saveSpecialSlideShape", "name");
            initialize("saveSpecialSlideShape", "name", "String", valueName);
            api.saveSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "saveSpecialSlideShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "saveSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSpecialSlideShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "saveSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSpecialSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSpecialSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveSpecialSlideShape", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "saveSpecialSlideShape", "slideIndex");
            initialize("saveSpecialSlideShape", "slideIndex", "Integer", valueSlideIndex);
            api.saveSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "saveSpecialSlideShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "saveSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSpecialSlideShapeInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "saveSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSpecialSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSpecialSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveSpecialSlideShape", "subShape");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "saveSpecialSlideShape", "slideType");
            initialize("saveSpecialSlideShape", "slideType", "SpecialSlideType", valueSlideType);
            api.saveSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "saveSpecialSlideShape", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "saveSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSpecialSlideShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "saveSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSpecialSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSpecialSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveSpecialSlideShape", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "saveSpecialSlideShape", "shapeIndex");
            initialize("saveSpecialSlideShape", "shapeIndex", "Integer", valueShapeIndex);
            api.saveSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "saveSpecialSlideShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "saveSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSpecialSlideShapeInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "saveSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSpecialSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSpecialSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveSpecialSlideShape", "subShape");
        try {
            valueFormat = (ShapeExportFormat)invalidizeTestValue("ShapeExportFormat", valueFormat, "saveSpecialSlideShape", "format");
            initialize("saveSpecialSlideShape", "format", "ShapeExportFormat", valueFormat);
            api.saveSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ShapeExportFormat", "format", "saveSpecialSlideShape", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("ShapeExportFormat", "format", "saveSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSpecialSlideShapeInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "saveSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSpecialSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSpecialSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveSpecialSlideShape", "subShape");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "saveSpecialSlideShape", "outPath");
            initialize("saveSpecialSlideShape", "outPath", "String", valueOutPath);
            api.saveSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "outPath", "saveSpecialSlideShape", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("String", "outPath", "saveSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSpecialSlideShapeInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "saveSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSpecialSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSpecialSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveSpecialSlideShape", "subShape");
        try {
            valueOptions = (IShapeExportOptions)invalidizeTestValue("IShapeExportOptions", valueOptions, "saveSpecialSlideShape", "options");
            initialize("saveSpecialSlideShape", "options", "IShapeExportOptions", valueOptions);
            api.saveSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "IShapeExportOptions", "options", "saveSpecialSlideShape", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("IShapeExportOptions", "options", "saveSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSpecialSlideShapeInvalidScaleXTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "saveSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSpecialSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSpecialSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveSpecialSlideShape", "subShape");
        try {
            valueScaleX = (Double)invalidizeTestValue("Double", valueScaleX, "saveSpecialSlideShape", "scaleX");
            initialize("saveSpecialSlideShape", "scaleX", "Double", valueScaleX);
            api.saveSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Double", "scaleX", "saveSpecialSlideShape", valueScaleX);
        }
        if (needAssertResponse) {
            assertResponse("Double", "scaleX", "saveSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSpecialSlideShapeInvalidScaleYTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "saveSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSpecialSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSpecialSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveSpecialSlideShape", "subShape");
        try {
            valueScaleY = (Double)invalidizeTestValue("Double", valueScaleY, "saveSpecialSlideShape", "scaleY");
            initialize("saveSpecialSlideShape", "scaleY", "Double", valueScaleY);
            api.saveSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Double", "scaleY", "saveSpecialSlideShape", valueScaleY);
        }
        if (needAssertResponse) {
            assertResponse("Double", "scaleY", "saveSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSpecialSlideShapeInvalidBoundsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "saveSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSpecialSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSpecialSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveSpecialSlideShape", "subShape");
        try {
            valueBounds = (ShapeThumbnailBounds)invalidizeTestValue("ShapeThumbnailBounds", valueBounds, "saveSpecialSlideShape", "bounds");
            initialize("saveSpecialSlideShape", "bounds", "ShapeThumbnailBounds", valueBounds);
            api.saveSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ShapeThumbnailBounds", "bounds", "saveSpecialSlideShape", valueBounds);
        }
        if (needAssertResponse) {
            assertResponse("ShapeThumbnailBounds", "bounds", "saveSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSpecialSlideShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "saveSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSpecialSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSpecialSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveSpecialSlideShape", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "saveSpecialSlideShape", "password");
            initialize("saveSpecialSlideShape", "password", "String", valuePassword);
            api.saveSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "saveSpecialSlideShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "saveSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSpecialSlideShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "saveSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSpecialSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSpecialSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveSpecialSlideShape", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "saveSpecialSlideShape", "folder");
            initialize("saveSpecialSlideShape", "folder", "String", valueFolder);
            api.saveSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "saveSpecialSlideShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "saveSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSpecialSlideShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "saveSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSpecialSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSpecialSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveSpecialSlideShape", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "saveSpecialSlideShape", "storage");
            initialize("saveSpecialSlideShape", "storage", "String", valueStorage);
            api.saveSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "saveSpecialSlideShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "saveSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSpecialSlideShapeInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "saveSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSpecialSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSpecialSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveSpecialSlideShape", "subShape");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "saveSpecialSlideShape", "fontsFolder");
            initialize("saveSpecialSlideShape", "fontsFolder", "String", valueFontsFolder);
            api.saveSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontsFolder", "saveSpecialSlideShape", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontsFolder", "saveSpecialSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSpecialSlideShapeInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "saveSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSpecialSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSpecialSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSpecialSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSpecialSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSpecialSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSpecialSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSpecialSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSpecialSlideShape", "fontsFolder");
        String valueSubShape = (String)getTestValue("String", "saveSpecialSlideShape", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "saveSpecialSlideShape", "subShape");
            initialize("saveSpecialSlideShape", "subShape", "String", valueSubShape);
            api.saveSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "saveSpecialSlideShape", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "saveSpecialSlideShape");
        }
    }
    
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAnimationTest() throws ApiException, Exception {
        initialize("setAnimation", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "setAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setAnimation", "slideIndex");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "setAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "setAnimation", "password");
        String valueFolder = (String)getTestValue("String", "setAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "setAnimation", "storage");
        response = api.setAnimation(valueName, valueSlideIndex, valueAnimation, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAnimationInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setAnimation", "slideIndex");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "setAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "setAnimation", "password");
        String valueFolder = (String)getTestValue("String", "setAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "setAnimation", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setAnimation", "name");
            initialize("setAnimation", "name", "String", valueName);
            SlideAnimation response = api.setAnimation(valueName, valueSlideIndex, valueAnimation, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "setAnimation", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "setAnimation");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAnimationInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setAnimation", "slideIndex");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "setAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "setAnimation", "password");
        String valueFolder = (String)getTestValue("String", "setAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "setAnimation", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "setAnimation", "slideIndex");
            initialize("setAnimation", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.setAnimation(valueName, valueSlideIndex, valueAnimation, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "setAnimation", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "setAnimation");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAnimationInvalidAnimationTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setAnimation", "slideIndex");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "setAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "setAnimation", "password");
        String valueFolder = (String)getTestValue("String", "setAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "setAnimation", "storage");
        try {
            valueAnimation = (SlideAnimation)invalidizeTestValue("SlideAnimation", valueAnimation, "setAnimation", "animation");
            initialize("setAnimation", "animation", "SlideAnimation", valueAnimation);
            SlideAnimation response = api.setAnimation(valueName, valueSlideIndex, valueAnimation, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SlideAnimation", "animation", "setAnimation", valueAnimation);
        }
        if (needAssertResponse) {
            assertResponse("SlideAnimation", "animation", "setAnimation");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAnimationInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setAnimation", "slideIndex");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "setAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "setAnimation", "password");
        String valueFolder = (String)getTestValue("String", "setAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "setAnimation", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setAnimation", "password");
            initialize("setAnimation", "password", "String", valuePassword);
            SlideAnimation response = api.setAnimation(valueName, valueSlideIndex, valueAnimation, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "setAnimation", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "setAnimation");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAnimationInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setAnimation", "slideIndex");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "setAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "setAnimation", "password");
        String valueFolder = (String)getTestValue("String", "setAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "setAnimation", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setAnimation", "folder");
            initialize("setAnimation", "folder", "String", valueFolder);
            SlideAnimation response = api.setAnimation(valueName, valueSlideIndex, valueAnimation, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "setAnimation", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "setAnimation");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAnimationInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setAnimation", "slideIndex");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "setAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "setAnimation", "password");
        String valueFolder = (String)getTestValue("String", "setAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "setAnimation", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setAnimation", "storage");
            initialize("setAnimation", "storage", "String", valueStorage);
            SlideAnimation response = api.setAnimation(valueName, valueSlideIndex, valueAnimation, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "setAnimation", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "setAnimation");
        }
    }
    
    /**
     * Set background for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundTest() throws ApiException, Exception {
        initialize("setBackground", null, null, null);
        SlideBackground response = null;
        String valueName = (String)getTestValue("String", "setBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackground", "slideIndex");
        SlideBackground valueBackground = (SlideBackground)getTestValue("SlideBackground", "setBackground", "background");
        String valuePassword = (String)getTestValue("String", "setBackground", "password");
        String valueFolder = (String)getTestValue("String", "setBackground", "folder");
        String valueStorage = (String)getTestValue("String", "setBackground", "storage");
        response = api.setBackground(valueName, valueSlideIndex, valueBackground, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set background for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackground", "slideIndex");
        SlideBackground valueBackground = (SlideBackground)getTestValue("SlideBackground", "setBackground", "background");
        String valuePassword = (String)getTestValue("String", "setBackground", "password");
        String valueFolder = (String)getTestValue("String", "setBackground", "folder");
        String valueStorage = (String)getTestValue("String", "setBackground", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setBackground", "name");
            initialize("setBackground", "name", "String", valueName);
            SlideBackground response = api.setBackground(valueName, valueSlideIndex, valueBackground, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "setBackground", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "setBackground");
        }
    }
    /**
     * Set background for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackground", "slideIndex");
        SlideBackground valueBackground = (SlideBackground)getTestValue("SlideBackground", "setBackground", "background");
        String valuePassword = (String)getTestValue("String", "setBackground", "password");
        String valueFolder = (String)getTestValue("String", "setBackground", "folder");
        String valueStorage = (String)getTestValue("String", "setBackground", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "setBackground", "slideIndex");
            initialize("setBackground", "slideIndex", "Integer", valueSlideIndex);
            SlideBackground response = api.setBackground(valueName, valueSlideIndex, valueBackground, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "setBackground", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "setBackground");
        }
    }
    /**
     * Set background for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundInvalidBackgroundTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackground", "slideIndex");
        SlideBackground valueBackground = (SlideBackground)getTestValue("SlideBackground", "setBackground", "background");
        String valuePassword = (String)getTestValue("String", "setBackground", "password");
        String valueFolder = (String)getTestValue("String", "setBackground", "folder");
        String valueStorage = (String)getTestValue("String", "setBackground", "storage");
        try {
            valueBackground = (SlideBackground)invalidizeTestValue("SlideBackground", valueBackground, "setBackground", "background");
            initialize("setBackground", "background", "SlideBackground", valueBackground);
            SlideBackground response = api.setBackground(valueName, valueSlideIndex, valueBackground, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SlideBackground", "background", "setBackground", valueBackground);
        }
        if (needAssertResponse) {
            assertResponse("SlideBackground", "background", "setBackground");
        }
    }
    /**
     * Set background for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackground", "slideIndex");
        SlideBackground valueBackground = (SlideBackground)getTestValue("SlideBackground", "setBackground", "background");
        String valuePassword = (String)getTestValue("String", "setBackground", "password");
        String valueFolder = (String)getTestValue("String", "setBackground", "folder");
        String valueStorage = (String)getTestValue("String", "setBackground", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setBackground", "password");
            initialize("setBackground", "password", "String", valuePassword);
            SlideBackground response = api.setBackground(valueName, valueSlideIndex, valueBackground, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "setBackground", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "setBackground");
        }
    }
    /**
     * Set background for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackground", "slideIndex");
        SlideBackground valueBackground = (SlideBackground)getTestValue("SlideBackground", "setBackground", "background");
        String valuePassword = (String)getTestValue("String", "setBackground", "password");
        String valueFolder = (String)getTestValue("String", "setBackground", "folder");
        String valueStorage = (String)getTestValue("String", "setBackground", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setBackground", "folder");
            initialize("setBackground", "folder", "String", valueFolder);
            SlideBackground response = api.setBackground(valueName, valueSlideIndex, valueBackground, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "setBackground", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "setBackground");
        }
    }
    /**
     * Set background for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackground", "slideIndex");
        SlideBackground valueBackground = (SlideBackground)getTestValue("SlideBackground", "setBackground", "background");
        String valuePassword = (String)getTestValue("String", "setBackground", "password");
        String valueFolder = (String)getTestValue("String", "setBackground", "folder");
        String valueStorage = (String)getTestValue("String", "setBackground", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setBackground", "storage");
            initialize("setBackground", "storage", "String", valueStorage);
            SlideBackground response = api.setBackground(valueName, valueSlideIndex, valueBackground, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "setBackground", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "setBackground");
        }
    }
    
    /**
     * Set background color for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundColorTest() throws ApiException, Exception {
        initialize("setBackgroundColor", null, null, null);
        SlideBackground response = null;
        String valueName = (String)getTestValue("String", "setBackgroundColor", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackgroundColor", "slideIndex");
        String valueColor = (String)getTestValue("String", "setBackgroundColor", "color");
        String valuePassword = (String)getTestValue("String", "setBackgroundColor", "password");
        String valueFolder = (String)getTestValue("String", "setBackgroundColor", "folder");
        String valueStorage = (String)getTestValue("String", "setBackgroundColor", "storage");
        response = api.setBackgroundColor(valueName, valueSlideIndex, valueColor, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set background color for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundColorInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setBackgroundColor", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackgroundColor", "slideIndex");
        String valueColor = (String)getTestValue("String", "setBackgroundColor", "color");
        String valuePassword = (String)getTestValue("String", "setBackgroundColor", "password");
        String valueFolder = (String)getTestValue("String", "setBackgroundColor", "folder");
        String valueStorage = (String)getTestValue("String", "setBackgroundColor", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setBackgroundColor", "name");
            initialize("setBackgroundColor", "name", "String", valueName);
            SlideBackground response = api.setBackgroundColor(valueName, valueSlideIndex, valueColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "setBackgroundColor", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "setBackgroundColor");
        }
    }
    /**
     * Set background color for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundColorInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setBackgroundColor", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackgroundColor", "slideIndex");
        String valueColor = (String)getTestValue("String", "setBackgroundColor", "color");
        String valuePassword = (String)getTestValue("String", "setBackgroundColor", "password");
        String valueFolder = (String)getTestValue("String", "setBackgroundColor", "folder");
        String valueStorage = (String)getTestValue("String", "setBackgroundColor", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "setBackgroundColor", "slideIndex");
            initialize("setBackgroundColor", "slideIndex", "Integer", valueSlideIndex);
            SlideBackground response = api.setBackgroundColor(valueName, valueSlideIndex, valueColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "setBackgroundColor", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "setBackgroundColor");
        }
    }
    /**
     * Set background color for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundColorInvalidColorTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setBackgroundColor", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackgroundColor", "slideIndex");
        String valueColor = (String)getTestValue("String", "setBackgroundColor", "color");
        String valuePassword = (String)getTestValue("String", "setBackgroundColor", "password");
        String valueFolder = (String)getTestValue("String", "setBackgroundColor", "folder");
        String valueStorage = (String)getTestValue("String", "setBackgroundColor", "storage");
        try {
            valueColor = (String)invalidizeTestValue("String", valueColor, "setBackgroundColor", "color");
            initialize("setBackgroundColor", "color", "String", valueColor);
            SlideBackground response = api.setBackgroundColor(valueName, valueSlideIndex, valueColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "color", "setBackgroundColor", valueColor);
        }
        if (needAssertResponse) {
            assertResponse("String", "color", "setBackgroundColor");
        }
    }
    /**
     * Set background color for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundColorInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setBackgroundColor", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackgroundColor", "slideIndex");
        String valueColor = (String)getTestValue("String", "setBackgroundColor", "color");
        String valuePassword = (String)getTestValue("String", "setBackgroundColor", "password");
        String valueFolder = (String)getTestValue("String", "setBackgroundColor", "folder");
        String valueStorage = (String)getTestValue("String", "setBackgroundColor", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setBackgroundColor", "password");
            initialize("setBackgroundColor", "password", "String", valuePassword);
            SlideBackground response = api.setBackgroundColor(valueName, valueSlideIndex, valueColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "setBackgroundColor", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "setBackgroundColor");
        }
    }
    /**
     * Set background color for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundColorInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setBackgroundColor", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackgroundColor", "slideIndex");
        String valueColor = (String)getTestValue("String", "setBackgroundColor", "color");
        String valuePassword = (String)getTestValue("String", "setBackgroundColor", "password");
        String valueFolder = (String)getTestValue("String", "setBackgroundColor", "folder");
        String valueStorage = (String)getTestValue("String", "setBackgroundColor", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setBackgroundColor", "folder");
            initialize("setBackgroundColor", "folder", "String", valueFolder);
            SlideBackground response = api.setBackgroundColor(valueName, valueSlideIndex, valueColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "setBackgroundColor", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "setBackgroundColor");
        }
    }
    /**
     * Set background color for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundColorInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setBackgroundColor", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackgroundColor", "slideIndex");
        String valueColor = (String)getTestValue("String", "setBackgroundColor", "color");
        String valuePassword = (String)getTestValue("String", "setBackgroundColor", "password");
        String valueFolder = (String)getTestValue("String", "setBackgroundColor", "folder");
        String valueStorage = (String)getTestValue("String", "setBackgroundColor", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setBackgroundColor", "storage");
            initialize("setBackgroundColor", "storage", "String", valueStorage);
            SlideBackground response = api.setBackgroundColor(valueName, valueSlideIndex, valueColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "setBackgroundColor", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "setBackgroundColor");
        }
    }
    
    /**
     * Set chart axis.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartAxisTest() throws ApiException, Exception {
        initialize("setChartAxis", null, null, null);
        Axis response = null;
        String valueName = (String)getTestValue("String", "setChartAxis", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartAxis", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartAxis", "shapeIndex");
        AxisType valueAxisType = (AxisType)getTestValue("AxisType", "setChartAxis", "axisType");
        Axis valueAxis = (Axis)getTestValue("Axis", "setChartAxis", "axis");
        String valuePassword = (String)getTestValue("String", "setChartAxis", "password");
        String valueFolder = (String)getTestValue("String", "setChartAxis", "folder");
        String valueStorage = (String)getTestValue("String", "setChartAxis", "storage");
        response = api.setChartAxis(valueName, valueSlideIndex, valueShapeIndex, valueAxisType, valueAxis, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set chart axis.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartAxisInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartAxis", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartAxis", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartAxis", "shapeIndex");
        AxisType valueAxisType = (AxisType)getTestValue("AxisType", "setChartAxis", "axisType");
        Axis valueAxis = (Axis)getTestValue("Axis", "setChartAxis", "axis");
        String valuePassword = (String)getTestValue("String", "setChartAxis", "password");
        String valueFolder = (String)getTestValue("String", "setChartAxis", "folder");
        String valueStorage = (String)getTestValue("String", "setChartAxis", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setChartAxis", "name");
            initialize("setChartAxis", "name", "String", valueName);
            Axis response = api.setChartAxis(valueName, valueSlideIndex, valueShapeIndex, valueAxisType, valueAxis, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "setChartAxis", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "setChartAxis");
        }
    }
    /**
     * Set chart axis.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartAxisInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartAxis", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartAxis", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartAxis", "shapeIndex");
        AxisType valueAxisType = (AxisType)getTestValue("AxisType", "setChartAxis", "axisType");
        Axis valueAxis = (Axis)getTestValue("Axis", "setChartAxis", "axis");
        String valuePassword = (String)getTestValue("String", "setChartAxis", "password");
        String valueFolder = (String)getTestValue("String", "setChartAxis", "folder");
        String valueStorage = (String)getTestValue("String", "setChartAxis", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "setChartAxis", "slideIndex");
            initialize("setChartAxis", "slideIndex", "Integer", valueSlideIndex);
            Axis response = api.setChartAxis(valueName, valueSlideIndex, valueShapeIndex, valueAxisType, valueAxis, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "setChartAxis", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "setChartAxis");
        }
    }
    /**
     * Set chart axis.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartAxisInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartAxis", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartAxis", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartAxis", "shapeIndex");
        AxisType valueAxisType = (AxisType)getTestValue("AxisType", "setChartAxis", "axisType");
        Axis valueAxis = (Axis)getTestValue("Axis", "setChartAxis", "axis");
        String valuePassword = (String)getTestValue("String", "setChartAxis", "password");
        String valueFolder = (String)getTestValue("String", "setChartAxis", "folder");
        String valueStorage = (String)getTestValue("String", "setChartAxis", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "setChartAxis", "shapeIndex");
            initialize("setChartAxis", "shapeIndex", "Integer", valueShapeIndex);
            Axis response = api.setChartAxis(valueName, valueSlideIndex, valueShapeIndex, valueAxisType, valueAxis, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "setChartAxis", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "setChartAxis");
        }
    }
    /**
     * Set chart axis.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartAxisInvalidAxisTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartAxis", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartAxis", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartAxis", "shapeIndex");
        AxisType valueAxisType = (AxisType)getTestValue("AxisType", "setChartAxis", "axisType");
        Axis valueAxis = (Axis)getTestValue("Axis", "setChartAxis", "axis");
        String valuePassword = (String)getTestValue("String", "setChartAxis", "password");
        String valueFolder = (String)getTestValue("String", "setChartAxis", "folder");
        String valueStorage = (String)getTestValue("String", "setChartAxis", "storage");
        try {
            valueAxisType = (AxisType)invalidizeTestValue("AxisType", valueAxisType, "setChartAxis", "axisType");
            initialize("setChartAxis", "axisType", "AxisType", valueAxisType);
            Axis response = api.setChartAxis(valueName, valueSlideIndex, valueShapeIndex, valueAxisType, valueAxis, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "AxisType", "axisType", "setChartAxis", valueAxisType);
        }
        if (needAssertResponse) {
            assertResponse("AxisType", "axisType", "setChartAxis");
        }
    }
    /**
     * Set chart axis.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartAxisInvalidAxisTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartAxis", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartAxis", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartAxis", "shapeIndex");
        AxisType valueAxisType = (AxisType)getTestValue("AxisType", "setChartAxis", "axisType");
        Axis valueAxis = (Axis)getTestValue("Axis", "setChartAxis", "axis");
        String valuePassword = (String)getTestValue("String", "setChartAxis", "password");
        String valueFolder = (String)getTestValue("String", "setChartAxis", "folder");
        String valueStorage = (String)getTestValue("String", "setChartAxis", "storage");
        try {
            valueAxis = (Axis)invalidizeTestValue("Axis", valueAxis, "setChartAxis", "axis");
            initialize("setChartAxis", "axis", "Axis", valueAxis);
            Axis response = api.setChartAxis(valueName, valueSlideIndex, valueShapeIndex, valueAxisType, valueAxis, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Axis", "axis", "setChartAxis", valueAxis);
        }
        if (needAssertResponse) {
            assertResponse("Axis", "axis", "setChartAxis");
        }
    }
    /**
     * Set chart axis.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartAxisInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartAxis", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartAxis", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartAxis", "shapeIndex");
        AxisType valueAxisType = (AxisType)getTestValue("AxisType", "setChartAxis", "axisType");
        Axis valueAxis = (Axis)getTestValue("Axis", "setChartAxis", "axis");
        String valuePassword = (String)getTestValue("String", "setChartAxis", "password");
        String valueFolder = (String)getTestValue("String", "setChartAxis", "folder");
        String valueStorage = (String)getTestValue("String", "setChartAxis", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setChartAxis", "password");
            initialize("setChartAxis", "password", "String", valuePassword);
            Axis response = api.setChartAxis(valueName, valueSlideIndex, valueShapeIndex, valueAxisType, valueAxis, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "setChartAxis", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "setChartAxis");
        }
    }
    /**
     * Set chart axis.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartAxisInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartAxis", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartAxis", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartAxis", "shapeIndex");
        AxisType valueAxisType = (AxisType)getTestValue("AxisType", "setChartAxis", "axisType");
        Axis valueAxis = (Axis)getTestValue("Axis", "setChartAxis", "axis");
        String valuePassword = (String)getTestValue("String", "setChartAxis", "password");
        String valueFolder = (String)getTestValue("String", "setChartAxis", "folder");
        String valueStorage = (String)getTestValue("String", "setChartAxis", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setChartAxis", "folder");
            initialize("setChartAxis", "folder", "String", valueFolder);
            Axis response = api.setChartAxis(valueName, valueSlideIndex, valueShapeIndex, valueAxisType, valueAxis, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "setChartAxis", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "setChartAxis");
        }
    }
    /**
     * Set chart axis.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartAxisInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartAxis", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartAxis", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartAxis", "shapeIndex");
        AxisType valueAxisType = (AxisType)getTestValue("AxisType", "setChartAxis", "axisType");
        Axis valueAxis = (Axis)getTestValue("Axis", "setChartAxis", "axis");
        String valuePassword = (String)getTestValue("String", "setChartAxis", "password");
        String valueFolder = (String)getTestValue("String", "setChartAxis", "folder");
        String valueStorage = (String)getTestValue("String", "setChartAxis", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setChartAxis", "storage");
            initialize("setChartAxis", "storage", "String", valueStorage);
            Axis response = api.setChartAxis(valueName, valueSlideIndex, valueShapeIndex, valueAxisType, valueAxis, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "setChartAxis", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "setChartAxis");
        }
    }
    
    /**
     * Set chart axis.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartLegendTest() throws ApiException, Exception {
        initialize("setChartLegend", null, null, null);
        Legend response = null;
        String valueName = (String)getTestValue("String", "setChartLegend", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartLegend", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartLegend", "shapeIndex");
        Legend valueLegend = (Legend)getTestValue("Legend", "setChartLegend", "legend");
        String valuePassword = (String)getTestValue("String", "setChartLegend", "password");
        String valueFolder = (String)getTestValue("String", "setChartLegend", "folder");
        String valueStorage = (String)getTestValue("String", "setChartLegend", "storage");
        response = api.setChartLegend(valueName, valueSlideIndex, valueShapeIndex, valueLegend, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set chart axis.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartLegendInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartLegend", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartLegend", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartLegend", "shapeIndex");
        Legend valueLegend = (Legend)getTestValue("Legend", "setChartLegend", "legend");
        String valuePassword = (String)getTestValue("String", "setChartLegend", "password");
        String valueFolder = (String)getTestValue("String", "setChartLegend", "folder");
        String valueStorage = (String)getTestValue("String", "setChartLegend", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setChartLegend", "name");
            initialize("setChartLegend", "name", "String", valueName);
            Legend response = api.setChartLegend(valueName, valueSlideIndex, valueShapeIndex, valueLegend, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "setChartLegend", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "setChartLegend");
        }
    }
    /**
     * Set chart axis.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartLegendInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartLegend", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartLegend", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartLegend", "shapeIndex");
        Legend valueLegend = (Legend)getTestValue("Legend", "setChartLegend", "legend");
        String valuePassword = (String)getTestValue("String", "setChartLegend", "password");
        String valueFolder = (String)getTestValue("String", "setChartLegend", "folder");
        String valueStorage = (String)getTestValue("String", "setChartLegend", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "setChartLegend", "slideIndex");
            initialize("setChartLegend", "slideIndex", "Integer", valueSlideIndex);
            Legend response = api.setChartLegend(valueName, valueSlideIndex, valueShapeIndex, valueLegend, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "setChartLegend", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "setChartLegend");
        }
    }
    /**
     * Set chart axis.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartLegendInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartLegend", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartLegend", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartLegend", "shapeIndex");
        Legend valueLegend = (Legend)getTestValue("Legend", "setChartLegend", "legend");
        String valuePassword = (String)getTestValue("String", "setChartLegend", "password");
        String valueFolder = (String)getTestValue("String", "setChartLegend", "folder");
        String valueStorage = (String)getTestValue("String", "setChartLegend", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "setChartLegend", "shapeIndex");
            initialize("setChartLegend", "shapeIndex", "Integer", valueShapeIndex);
            Legend response = api.setChartLegend(valueName, valueSlideIndex, valueShapeIndex, valueLegend, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "setChartLegend", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "setChartLegend");
        }
    }
    /**
     * Set chart axis.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartLegendInvalidLegendTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartLegend", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartLegend", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartLegend", "shapeIndex");
        Legend valueLegend = (Legend)getTestValue("Legend", "setChartLegend", "legend");
        String valuePassword = (String)getTestValue("String", "setChartLegend", "password");
        String valueFolder = (String)getTestValue("String", "setChartLegend", "folder");
        String valueStorage = (String)getTestValue("String", "setChartLegend", "storage");
        try {
            valueLegend = (Legend)invalidizeTestValue("Legend", valueLegend, "setChartLegend", "legend");
            initialize("setChartLegend", "legend", "Legend", valueLegend);
            Legend response = api.setChartLegend(valueName, valueSlideIndex, valueShapeIndex, valueLegend, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Legend", "legend", "setChartLegend", valueLegend);
        }
        if (needAssertResponse) {
            assertResponse("Legend", "legend", "setChartLegend");
        }
    }
    /**
     * Set chart axis.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartLegendInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartLegend", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartLegend", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartLegend", "shapeIndex");
        Legend valueLegend = (Legend)getTestValue("Legend", "setChartLegend", "legend");
        String valuePassword = (String)getTestValue("String", "setChartLegend", "password");
        String valueFolder = (String)getTestValue("String", "setChartLegend", "folder");
        String valueStorage = (String)getTestValue("String", "setChartLegend", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setChartLegend", "password");
            initialize("setChartLegend", "password", "String", valuePassword);
            Legend response = api.setChartLegend(valueName, valueSlideIndex, valueShapeIndex, valueLegend, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "setChartLegend", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "setChartLegend");
        }
    }
    /**
     * Set chart axis.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartLegendInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartLegend", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartLegend", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartLegend", "shapeIndex");
        Legend valueLegend = (Legend)getTestValue("Legend", "setChartLegend", "legend");
        String valuePassword = (String)getTestValue("String", "setChartLegend", "password");
        String valueFolder = (String)getTestValue("String", "setChartLegend", "folder");
        String valueStorage = (String)getTestValue("String", "setChartLegend", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setChartLegend", "folder");
            initialize("setChartLegend", "folder", "String", valueFolder);
            Legend response = api.setChartLegend(valueName, valueSlideIndex, valueShapeIndex, valueLegend, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "setChartLegend", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "setChartLegend");
        }
    }
    /**
     * Set chart axis.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartLegendInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartLegend", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartLegend", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartLegend", "shapeIndex");
        Legend valueLegend = (Legend)getTestValue("Legend", "setChartLegend", "legend");
        String valuePassword = (String)getTestValue("String", "setChartLegend", "password");
        String valueFolder = (String)getTestValue("String", "setChartLegend", "folder");
        String valueStorage = (String)getTestValue("String", "setChartLegend", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setChartLegend", "storage");
            initialize("setChartLegend", "storage", "String", valueStorage);
            Legend response = api.setChartLegend(valueName, valueSlideIndex, valueShapeIndex, valueLegend, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "setChartLegend", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "setChartLegend");
        }
    }
    
    /**
     * Set a series group in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartSeriesGroupTest() throws ApiException, Exception {
        initialize("setChartSeriesGroup", null, null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "setChartSeriesGroup", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "shapeIndex");
        Integer valueSeriesGroupIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "seriesGroupIndex");
        ChartSeriesGroup valueSeriesGroup = (ChartSeriesGroup)getTestValue("ChartSeriesGroup", "setChartSeriesGroup", "seriesGroup");
        String valuePassword = (String)getTestValue("String", "setChartSeriesGroup", "password");
        String valueFolder = (String)getTestValue("String", "setChartSeriesGroup", "folder");
        String valueStorage = (String)getTestValue("String", "setChartSeriesGroup", "storage");
        response = api.setChartSeriesGroup(valueName, valueSlideIndex, valueShapeIndex, valueSeriesGroupIndex, valueSeriesGroup, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set a series group in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartSeriesGroupInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartSeriesGroup", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "shapeIndex");
        Integer valueSeriesGroupIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "seriesGroupIndex");
        ChartSeriesGroup valueSeriesGroup = (ChartSeriesGroup)getTestValue("ChartSeriesGroup", "setChartSeriesGroup", "seriesGroup");
        String valuePassword = (String)getTestValue("String", "setChartSeriesGroup", "password");
        String valueFolder = (String)getTestValue("String", "setChartSeriesGroup", "folder");
        String valueStorage = (String)getTestValue("String", "setChartSeriesGroup", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setChartSeriesGroup", "name");
            initialize("setChartSeriesGroup", "name", "String", valueName);
            Chart response = api.setChartSeriesGroup(valueName, valueSlideIndex, valueShapeIndex, valueSeriesGroupIndex, valueSeriesGroup, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "setChartSeriesGroup", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "setChartSeriesGroup");
        }
    }
    /**
     * Set a series group in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartSeriesGroupInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartSeriesGroup", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "shapeIndex");
        Integer valueSeriesGroupIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "seriesGroupIndex");
        ChartSeriesGroup valueSeriesGroup = (ChartSeriesGroup)getTestValue("ChartSeriesGroup", "setChartSeriesGroup", "seriesGroup");
        String valuePassword = (String)getTestValue("String", "setChartSeriesGroup", "password");
        String valueFolder = (String)getTestValue("String", "setChartSeriesGroup", "folder");
        String valueStorage = (String)getTestValue("String", "setChartSeriesGroup", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "setChartSeriesGroup", "slideIndex");
            initialize("setChartSeriesGroup", "slideIndex", "Integer", valueSlideIndex);
            Chart response = api.setChartSeriesGroup(valueName, valueSlideIndex, valueShapeIndex, valueSeriesGroupIndex, valueSeriesGroup, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "setChartSeriesGroup", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "setChartSeriesGroup");
        }
    }
    /**
     * Set a series group in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartSeriesGroupInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartSeriesGroup", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "shapeIndex");
        Integer valueSeriesGroupIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "seriesGroupIndex");
        ChartSeriesGroup valueSeriesGroup = (ChartSeriesGroup)getTestValue("ChartSeriesGroup", "setChartSeriesGroup", "seriesGroup");
        String valuePassword = (String)getTestValue("String", "setChartSeriesGroup", "password");
        String valueFolder = (String)getTestValue("String", "setChartSeriesGroup", "folder");
        String valueStorage = (String)getTestValue("String", "setChartSeriesGroup", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "setChartSeriesGroup", "shapeIndex");
            initialize("setChartSeriesGroup", "shapeIndex", "Integer", valueShapeIndex);
            Chart response = api.setChartSeriesGroup(valueName, valueSlideIndex, valueShapeIndex, valueSeriesGroupIndex, valueSeriesGroup, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "setChartSeriesGroup", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "setChartSeriesGroup");
        }
    }
    /**
     * Set a series group in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartSeriesGroupInvalidSeriesGroupIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartSeriesGroup", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "shapeIndex");
        Integer valueSeriesGroupIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "seriesGroupIndex");
        ChartSeriesGroup valueSeriesGroup = (ChartSeriesGroup)getTestValue("ChartSeriesGroup", "setChartSeriesGroup", "seriesGroup");
        String valuePassword = (String)getTestValue("String", "setChartSeriesGroup", "password");
        String valueFolder = (String)getTestValue("String", "setChartSeriesGroup", "folder");
        String valueStorage = (String)getTestValue("String", "setChartSeriesGroup", "storage");
        try {
            valueSeriesGroupIndex = (Integer)invalidizeTestValue("Integer", valueSeriesGroupIndex, "setChartSeriesGroup", "seriesGroupIndex");
            initialize("setChartSeriesGroup", "seriesGroupIndex", "Integer", valueSeriesGroupIndex);
            Chart response = api.setChartSeriesGroup(valueName, valueSlideIndex, valueShapeIndex, valueSeriesGroupIndex, valueSeriesGroup, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "seriesGroupIndex", "setChartSeriesGroup", valueSeriesGroupIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "seriesGroupIndex", "setChartSeriesGroup");
        }
    }
    /**
     * Set a series group in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartSeriesGroupInvalidSeriesGroupTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartSeriesGroup", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "shapeIndex");
        Integer valueSeriesGroupIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "seriesGroupIndex");
        ChartSeriesGroup valueSeriesGroup = (ChartSeriesGroup)getTestValue("ChartSeriesGroup", "setChartSeriesGroup", "seriesGroup");
        String valuePassword = (String)getTestValue("String", "setChartSeriesGroup", "password");
        String valueFolder = (String)getTestValue("String", "setChartSeriesGroup", "folder");
        String valueStorage = (String)getTestValue("String", "setChartSeriesGroup", "storage");
        try {
            valueSeriesGroup = (ChartSeriesGroup)invalidizeTestValue("ChartSeriesGroup", valueSeriesGroup, "setChartSeriesGroup", "seriesGroup");
            initialize("setChartSeriesGroup", "seriesGroup", "ChartSeriesGroup", valueSeriesGroup);
            Chart response = api.setChartSeriesGroup(valueName, valueSlideIndex, valueShapeIndex, valueSeriesGroupIndex, valueSeriesGroup, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ChartSeriesGroup", "seriesGroup", "setChartSeriesGroup", valueSeriesGroup);
        }
        if (needAssertResponse) {
            assertResponse("ChartSeriesGroup", "seriesGroup", "setChartSeriesGroup");
        }
    }
    /**
     * Set a series group in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartSeriesGroupInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartSeriesGroup", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "shapeIndex");
        Integer valueSeriesGroupIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "seriesGroupIndex");
        ChartSeriesGroup valueSeriesGroup = (ChartSeriesGroup)getTestValue("ChartSeriesGroup", "setChartSeriesGroup", "seriesGroup");
        String valuePassword = (String)getTestValue("String", "setChartSeriesGroup", "password");
        String valueFolder = (String)getTestValue("String", "setChartSeriesGroup", "folder");
        String valueStorage = (String)getTestValue("String", "setChartSeriesGroup", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setChartSeriesGroup", "password");
            initialize("setChartSeriesGroup", "password", "String", valuePassword);
            Chart response = api.setChartSeriesGroup(valueName, valueSlideIndex, valueShapeIndex, valueSeriesGroupIndex, valueSeriesGroup, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "setChartSeriesGroup", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "setChartSeriesGroup");
        }
    }
    /**
     * Set a series group in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartSeriesGroupInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartSeriesGroup", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "shapeIndex");
        Integer valueSeriesGroupIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "seriesGroupIndex");
        ChartSeriesGroup valueSeriesGroup = (ChartSeriesGroup)getTestValue("ChartSeriesGroup", "setChartSeriesGroup", "seriesGroup");
        String valuePassword = (String)getTestValue("String", "setChartSeriesGroup", "password");
        String valueFolder = (String)getTestValue("String", "setChartSeriesGroup", "folder");
        String valueStorage = (String)getTestValue("String", "setChartSeriesGroup", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setChartSeriesGroup", "folder");
            initialize("setChartSeriesGroup", "folder", "String", valueFolder);
            Chart response = api.setChartSeriesGroup(valueName, valueSlideIndex, valueShapeIndex, valueSeriesGroupIndex, valueSeriesGroup, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "setChartSeriesGroup", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "setChartSeriesGroup");
        }
    }
    /**
     * Set a series group in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartSeriesGroupInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartSeriesGroup", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "shapeIndex");
        Integer valueSeriesGroupIndex = (Integer)getTestValue("Integer", "setChartSeriesGroup", "seriesGroupIndex");
        ChartSeriesGroup valueSeriesGroup = (ChartSeriesGroup)getTestValue("ChartSeriesGroup", "setChartSeriesGroup", "seriesGroup");
        String valuePassword = (String)getTestValue("String", "setChartSeriesGroup", "password");
        String valueFolder = (String)getTestValue("String", "setChartSeriesGroup", "folder");
        String valueStorage = (String)getTestValue("String", "setChartSeriesGroup", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setChartSeriesGroup", "storage");
            initialize("setChartSeriesGroup", "storage", "String", valueStorage);
            Chart response = api.setChartSeriesGroup(valueName, valueSlideIndex, valueShapeIndex, valueSeriesGroupIndex, valueSeriesGroup, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "setChartSeriesGroup", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "setChartSeriesGroup");
        }
    }
    
    /**
     * Set 3D chart wall.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartWallTest() throws ApiException, Exception {
        initialize("setChartWall", null, null, null);
        ChartWall response = null;
        String valueName = (String)getTestValue("String", "setChartWall", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartWall", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartWall", "shapeIndex");
        ChartWallType valueChartWallType = (ChartWallType)getTestValue("ChartWallType", "setChartWall", "chartWallType");
        ChartWall valueChartWall = (ChartWall)getTestValue("ChartWall", "setChartWall", "chartWall");
        String valuePassword = (String)getTestValue("String", "setChartWall", "password");
        String valueFolder = (String)getTestValue("String", "setChartWall", "folder");
        String valueStorage = (String)getTestValue("String", "setChartWall", "storage");
        response = api.setChartWall(valueName, valueSlideIndex, valueShapeIndex, valueChartWallType, valueChartWall, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set 3D chart wall.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartWallInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartWall", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartWall", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartWall", "shapeIndex");
        ChartWallType valueChartWallType = (ChartWallType)getTestValue("ChartWallType", "setChartWall", "chartWallType");
        ChartWall valueChartWall = (ChartWall)getTestValue("ChartWall", "setChartWall", "chartWall");
        String valuePassword = (String)getTestValue("String", "setChartWall", "password");
        String valueFolder = (String)getTestValue("String", "setChartWall", "folder");
        String valueStorage = (String)getTestValue("String", "setChartWall", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setChartWall", "name");
            initialize("setChartWall", "name", "String", valueName);
            ChartWall response = api.setChartWall(valueName, valueSlideIndex, valueShapeIndex, valueChartWallType, valueChartWall, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "setChartWall", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "setChartWall");
        }
    }
    /**
     * Set 3D chart wall.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartWallInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartWall", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartWall", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartWall", "shapeIndex");
        ChartWallType valueChartWallType = (ChartWallType)getTestValue("ChartWallType", "setChartWall", "chartWallType");
        ChartWall valueChartWall = (ChartWall)getTestValue("ChartWall", "setChartWall", "chartWall");
        String valuePassword = (String)getTestValue("String", "setChartWall", "password");
        String valueFolder = (String)getTestValue("String", "setChartWall", "folder");
        String valueStorage = (String)getTestValue("String", "setChartWall", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "setChartWall", "slideIndex");
            initialize("setChartWall", "slideIndex", "Integer", valueSlideIndex);
            ChartWall response = api.setChartWall(valueName, valueSlideIndex, valueShapeIndex, valueChartWallType, valueChartWall, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "setChartWall", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "setChartWall");
        }
    }
    /**
     * Set 3D chart wall.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartWallInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartWall", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartWall", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartWall", "shapeIndex");
        ChartWallType valueChartWallType = (ChartWallType)getTestValue("ChartWallType", "setChartWall", "chartWallType");
        ChartWall valueChartWall = (ChartWall)getTestValue("ChartWall", "setChartWall", "chartWall");
        String valuePassword = (String)getTestValue("String", "setChartWall", "password");
        String valueFolder = (String)getTestValue("String", "setChartWall", "folder");
        String valueStorage = (String)getTestValue("String", "setChartWall", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "setChartWall", "shapeIndex");
            initialize("setChartWall", "shapeIndex", "Integer", valueShapeIndex);
            ChartWall response = api.setChartWall(valueName, valueSlideIndex, valueShapeIndex, valueChartWallType, valueChartWall, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "setChartWall", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "setChartWall");
        }
    }
    /**
     * Set 3D chart wall.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartWallInvalidChartWallTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartWall", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartWall", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartWall", "shapeIndex");
        ChartWallType valueChartWallType = (ChartWallType)getTestValue("ChartWallType", "setChartWall", "chartWallType");
        ChartWall valueChartWall = (ChartWall)getTestValue("ChartWall", "setChartWall", "chartWall");
        String valuePassword = (String)getTestValue("String", "setChartWall", "password");
        String valueFolder = (String)getTestValue("String", "setChartWall", "folder");
        String valueStorage = (String)getTestValue("String", "setChartWall", "storage");
        try {
            valueChartWallType = (ChartWallType)invalidizeTestValue("ChartWallType", valueChartWallType, "setChartWall", "chartWallType");
            initialize("setChartWall", "chartWallType", "ChartWallType", valueChartWallType);
            ChartWall response = api.setChartWall(valueName, valueSlideIndex, valueShapeIndex, valueChartWallType, valueChartWall, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ChartWallType", "chartWallType", "setChartWall", valueChartWallType);
        }
        if (needAssertResponse) {
            assertResponse("ChartWallType", "chartWallType", "setChartWall");
        }
    }
    /**
     * Set 3D chart wall.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartWallInvalidChartWallTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartWall", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartWall", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartWall", "shapeIndex");
        ChartWallType valueChartWallType = (ChartWallType)getTestValue("ChartWallType", "setChartWall", "chartWallType");
        ChartWall valueChartWall = (ChartWall)getTestValue("ChartWall", "setChartWall", "chartWall");
        String valuePassword = (String)getTestValue("String", "setChartWall", "password");
        String valueFolder = (String)getTestValue("String", "setChartWall", "folder");
        String valueStorage = (String)getTestValue("String", "setChartWall", "storage");
        try {
            valueChartWall = (ChartWall)invalidizeTestValue("ChartWall", valueChartWall, "setChartWall", "chartWall");
            initialize("setChartWall", "chartWall", "ChartWall", valueChartWall);
            ChartWall response = api.setChartWall(valueName, valueSlideIndex, valueShapeIndex, valueChartWallType, valueChartWall, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ChartWall", "chartWall", "setChartWall", valueChartWall);
        }
        if (needAssertResponse) {
            assertResponse("ChartWall", "chartWall", "setChartWall");
        }
    }
    /**
     * Set 3D chart wall.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartWallInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartWall", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartWall", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartWall", "shapeIndex");
        ChartWallType valueChartWallType = (ChartWallType)getTestValue("ChartWallType", "setChartWall", "chartWallType");
        ChartWall valueChartWall = (ChartWall)getTestValue("ChartWall", "setChartWall", "chartWall");
        String valuePassword = (String)getTestValue("String", "setChartWall", "password");
        String valueFolder = (String)getTestValue("String", "setChartWall", "folder");
        String valueStorage = (String)getTestValue("String", "setChartWall", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setChartWall", "password");
            initialize("setChartWall", "password", "String", valuePassword);
            ChartWall response = api.setChartWall(valueName, valueSlideIndex, valueShapeIndex, valueChartWallType, valueChartWall, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "setChartWall", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "setChartWall");
        }
    }
    /**
     * Set 3D chart wall.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartWallInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartWall", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartWall", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartWall", "shapeIndex");
        ChartWallType valueChartWallType = (ChartWallType)getTestValue("ChartWallType", "setChartWall", "chartWallType");
        ChartWall valueChartWall = (ChartWall)getTestValue("ChartWall", "setChartWall", "chartWall");
        String valuePassword = (String)getTestValue("String", "setChartWall", "password");
        String valueFolder = (String)getTestValue("String", "setChartWall", "folder");
        String valueStorage = (String)getTestValue("String", "setChartWall", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setChartWall", "folder");
            initialize("setChartWall", "folder", "String", valueFolder);
            ChartWall response = api.setChartWall(valueName, valueSlideIndex, valueShapeIndex, valueChartWallType, valueChartWall, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "setChartWall", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "setChartWall");
        }
    }
    /**
     * Set 3D chart wall.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChartWallInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setChartWall", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setChartWall", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setChartWall", "shapeIndex");
        ChartWallType valueChartWallType = (ChartWallType)getTestValue("ChartWallType", "setChartWall", "chartWallType");
        ChartWall valueChartWall = (ChartWall)getTestValue("ChartWall", "setChartWall", "chartWall");
        String valuePassword = (String)getTestValue("String", "setChartWall", "password");
        String valueFolder = (String)getTestValue("String", "setChartWall", "folder");
        String valueStorage = (String)getTestValue("String", "setChartWall", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setChartWall", "storage");
            initialize("setChartWall", "storage", "String", valueStorage);
            ChartWall response = api.setChartWall(valueName, valueSlideIndex, valueShapeIndex, valueChartWallType, valueChartWall, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "setChartWall", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "setChartWall");
        }
    }
    
    /**
     * Set document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertiesTest() throws ApiException, Exception {
        initialize("setDocumentProperties", null, null, null);
        DocumentProperties response = null;
        String valueName = (String)getTestValue("String", "setDocumentProperties", "name");
        DocumentProperties valueProperties = (DocumentProperties)getTestValue("DocumentProperties", "setDocumentProperties", "properties");
        String valuePassword = (String)getTestValue("String", "setDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperties", "storage");
        response = api.setDocumentProperties(valueName, valueProperties, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setDocumentProperties", "name");
        DocumentProperties valueProperties = (DocumentProperties)getTestValue("DocumentProperties", "setDocumentProperties", "properties");
        String valuePassword = (String)getTestValue("String", "setDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setDocumentProperties", "name");
            initialize("setDocumentProperties", "name", "String", valueName);
            DocumentProperties response = api.setDocumentProperties(valueName, valueProperties, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "setDocumentProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "setDocumentProperties");
        }
    }
    /**
     * Set document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertiesInvalidPropertiesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setDocumentProperties", "name");
        DocumentProperties valueProperties = (DocumentProperties)getTestValue("DocumentProperties", "setDocumentProperties", "properties");
        String valuePassword = (String)getTestValue("String", "setDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperties", "storage");
        try {
            valueProperties = (DocumentProperties)invalidizeTestValue("DocumentProperties", valueProperties, "setDocumentProperties", "properties");
            initialize("setDocumentProperties", "properties", "DocumentProperties", valueProperties);
            DocumentProperties response = api.setDocumentProperties(valueName, valueProperties, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "DocumentProperties", "properties", "setDocumentProperties", valueProperties);
        }
        if (needAssertResponse) {
            assertResponse("DocumentProperties", "properties", "setDocumentProperties");
        }
    }
    /**
     * Set document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setDocumentProperties", "name");
        DocumentProperties valueProperties = (DocumentProperties)getTestValue("DocumentProperties", "setDocumentProperties", "properties");
        String valuePassword = (String)getTestValue("String", "setDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setDocumentProperties", "password");
            initialize("setDocumentProperties", "password", "String", valuePassword);
            DocumentProperties response = api.setDocumentProperties(valueName, valueProperties, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "setDocumentProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "setDocumentProperties");
        }
    }
    /**
     * Set document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setDocumentProperties", "name");
        DocumentProperties valueProperties = (DocumentProperties)getTestValue("DocumentProperties", "setDocumentProperties", "properties");
        String valuePassword = (String)getTestValue("String", "setDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setDocumentProperties", "folder");
            initialize("setDocumentProperties", "folder", "String", valueFolder);
            DocumentProperties response = api.setDocumentProperties(valueName, valueProperties, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "setDocumentProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "setDocumentProperties");
        }
    }
    /**
     * Set document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setDocumentProperties", "name");
        DocumentProperties valueProperties = (DocumentProperties)getTestValue("DocumentProperties", "setDocumentProperties", "properties");
        String valuePassword = (String)getTestValue("String", "setDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setDocumentProperties", "storage");
            initialize("setDocumentProperties", "storage", "String", valueStorage);
            DocumentProperties response = api.setDocumentProperties(valueName, valueProperties, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "setDocumentProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "setDocumentProperties");
        }
    }
    
    /**
     * Set document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertyTest() throws ApiException, Exception {
        initialize("setDocumentProperty", null, null, null);
        DocumentProperty response = null;
        String valueName = (String)getTestValue("String", "setDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "setDocumentProperty", "propertyName");
        DocumentProperty valueProperty = (DocumentProperty)getTestValue("DocumentProperty", "setDocumentProperty", "property");
        String valuePassword = (String)getTestValue("String", "setDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperty", "storage");
        response = api.setDocumentProperty(valueName, valuePropertyName, valueProperty, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertyInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "setDocumentProperty", "propertyName");
        DocumentProperty valueProperty = (DocumentProperty)getTestValue("DocumentProperty", "setDocumentProperty", "property");
        String valuePassword = (String)getTestValue("String", "setDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperty", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setDocumentProperty", "name");
            initialize("setDocumentProperty", "name", "String", valueName);
            DocumentProperty response = api.setDocumentProperty(valueName, valuePropertyName, valueProperty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "setDocumentProperty", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "setDocumentProperty");
        }
    }
    /**
     * Set document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertyInvalidPropertyNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "setDocumentProperty", "propertyName");
        DocumentProperty valueProperty = (DocumentProperty)getTestValue("DocumentProperty", "setDocumentProperty", "property");
        String valuePassword = (String)getTestValue("String", "setDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperty", "storage");
        try {
            valuePropertyName = (String)invalidizeTestValue("String", valuePropertyName, "setDocumentProperty", "propertyName");
            initialize("setDocumentProperty", "propertyName", "String", valuePropertyName);
            DocumentProperty response = api.setDocumentProperty(valueName, valuePropertyName, valueProperty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "propertyName", "setDocumentProperty", valuePropertyName);
        }
        if (needAssertResponse) {
            assertResponse("String", "propertyName", "setDocumentProperty");
        }
    }
    /**
     * Set document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertyInvalidPropertyTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "setDocumentProperty", "propertyName");
        DocumentProperty valueProperty = (DocumentProperty)getTestValue("DocumentProperty", "setDocumentProperty", "property");
        String valuePassword = (String)getTestValue("String", "setDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperty", "storage");
        try {
            valueProperty = (DocumentProperty)invalidizeTestValue("DocumentProperty", valueProperty, "setDocumentProperty", "property");
            initialize("setDocumentProperty", "property", "DocumentProperty", valueProperty);
            DocumentProperty response = api.setDocumentProperty(valueName, valuePropertyName, valueProperty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "DocumentProperty", "property", "setDocumentProperty", valueProperty);
        }
        if (needAssertResponse) {
            assertResponse("DocumentProperty", "property", "setDocumentProperty");
        }
    }
    /**
     * Set document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertyInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "setDocumentProperty", "propertyName");
        DocumentProperty valueProperty = (DocumentProperty)getTestValue("DocumentProperty", "setDocumentProperty", "property");
        String valuePassword = (String)getTestValue("String", "setDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperty", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setDocumentProperty", "password");
            initialize("setDocumentProperty", "password", "String", valuePassword);
            DocumentProperty response = api.setDocumentProperty(valueName, valuePropertyName, valueProperty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "setDocumentProperty", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "setDocumentProperty");
        }
    }
    /**
     * Set document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertyInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "setDocumentProperty", "propertyName");
        DocumentProperty valueProperty = (DocumentProperty)getTestValue("DocumentProperty", "setDocumentProperty", "property");
        String valuePassword = (String)getTestValue("String", "setDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperty", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setDocumentProperty", "folder");
            initialize("setDocumentProperty", "folder", "String", valueFolder);
            DocumentProperty response = api.setDocumentProperty(valueName, valuePropertyName, valueProperty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "setDocumentProperty", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "setDocumentProperty");
        }
    }
    /**
     * Set document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertyInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "setDocumentProperty", "propertyName");
        DocumentProperty valueProperty = (DocumentProperty)getTestValue("DocumentProperty", "setDocumentProperty", "property");
        String valuePassword = (String)getTestValue("String", "setDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperty", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setDocumentProperty", "storage");
            initialize("setDocumentProperty", "storage", "String", valueStorage);
            DocumentProperty response = api.setDocumentProperty(valueName, valuePropertyName, valueProperty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "setDocumentProperty", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "setDocumentProperty");
        }
    }
    
    /**
     * Embeds specified font and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontTest() throws ApiException, Exception {
        initialize("setEmbeddedFont", null, null, null);
        FontsData response = null;
        String valueName = (String)getTestValue("String", "setEmbeddedFont", "name");
        String valueFontName = (String)getTestValue("String", "setEmbeddedFont", "fontName");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFont", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFont", "password");
        String valueFolder = (String)getTestValue("String", "setEmbeddedFont", "folder");
        String valueStorage = (String)getTestValue("String", "setEmbeddedFont", "storage");
        String valueFontsFolder = (String)getTestValue("String", "setEmbeddedFont", "fontsFolder");
        response = api.setEmbeddedFont(valueName, valueFontName, valueOnlyUsed, valuePassword, valueFolder, valueStorage, valueFontsFolder);
        assertNotNull(response);
    }

    /**
     * Embeds specified font and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setEmbeddedFont", "name");
        String valueFontName = (String)getTestValue("String", "setEmbeddedFont", "fontName");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFont", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFont", "password");
        String valueFolder = (String)getTestValue("String", "setEmbeddedFont", "folder");
        String valueStorage = (String)getTestValue("String", "setEmbeddedFont", "storage");
        String valueFontsFolder = (String)getTestValue("String", "setEmbeddedFont", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setEmbeddedFont", "name");
            initialize("setEmbeddedFont", "name", "String", valueName);
            FontsData response = api.setEmbeddedFont(valueName, valueFontName, valueOnlyUsed, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "setEmbeddedFont", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "setEmbeddedFont");
        }
    }
    /**
     * Embeds specified font and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontInvalidFontNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setEmbeddedFont", "name");
        String valueFontName = (String)getTestValue("String", "setEmbeddedFont", "fontName");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFont", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFont", "password");
        String valueFolder = (String)getTestValue("String", "setEmbeddedFont", "folder");
        String valueStorage = (String)getTestValue("String", "setEmbeddedFont", "storage");
        String valueFontsFolder = (String)getTestValue("String", "setEmbeddedFont", "fontsFolder");
        try {
            valueFontName = (String)invalidizeTestValue("String", valueFontName, "setEmbeddedFont", "fontName");
            initialize("setEmbeddedFont", "fontName", "String", valueFontName);
            FontsData response = api.setEmbeddedFont(valueName, valueFontName, valueOnlyUsed, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontName", "setEmbeddedFont", valueFontName);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontName", "setEmbeddedFont");
        }
    }
    /**
     * Embeds specified font and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontInvalidOnlyUsedTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setEmbeddedFont", "name");
        String valueFontName = (String)getTestValue("String", "setEmbeddedFont", "fontName");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFont", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFont", "password");
        String valueFolder = (String)getTestValue("String", "setEmbeddedFont", "folder");
        String valueStorage = (String)getTestValue("String", "setEmbeddedFont", "storage");
        String valueFontsFolder = (String)getTestValue("String", "setEmbeddedFont", "fontsFolder");
        try {
            valueOnlyUsed = (Boolean)invalidizeTestValue("Boolean", valueOnlyUsed, "setEmbeddedFont", "onlyUsed");
            initialize("setEmbeddedFont", "onlyUsed", "Boolean", valueOnlyUsed);
            FontsData response = api.setEmbeddedFont(valueName, valueFontName, valueOnlyUsed, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "onlyUsed", "setEmbeddedFont", valueOnlyUsed);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "onlyUsed", "setEmbeddedFont");
        }
    }
    /**
     * Embeds specified font and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setEmbeddedFont", "name");
        String valueFontName = (String)getTestValue("String", "setEmbeddedFont", "fontName");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFont", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFont", "password");
        String valueFolder = (String)getTestValue("String", "setEmbeddedFont", "folder");
        String valueStorage = (String)getTestValue("String", "setEmbeddedFont", "storage");
        String valueFontsFolder = (String)getTestValue("String", "setEmbeddedFont", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setEmbeddedFont", "password");
            initialize("setEmbeddedFont", "password", "String", valuePassword);
            FontsData response = api.setEmbeddedFont(valueName, valueFontName, valueOnlyUsed, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "setEmbeddedFont", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "setEmbeddedFont");
        }
    }
    /**
     * Embeds specified font and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setEmbeddedFont", "name");
        String valueFontName = (String)getTestValue("String", "setEmbeddedFont", "fontName");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFont", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFont", "password");
        String valueFolder = (String)getTestValue("String", "setEmbeddedFont", "folder");
        String valueStorage = (String)getTestValue("String", "setEmbeddedFont", "storage");
        String valueFontsFolder = (String)getTestValue("String", "setEmbeddedFont", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setEmbeddedFont", "folder");
            initialize("setEmbeddedFont", "folder", "String", valueFolder);
            FontsData response = api.setEmbeddedFont(valueName, valueFontName, valueOnlyUsed, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "setEmbeddedFont", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "setEmbeddedFont");
        }
    }
    /**
     * Embeds specified font and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setEmbeddedFont", "name");
        String valueFontName = (String)getTestValue("String", "setEmbeddedFont", "fontName");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFont", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFont", "password");
        String valueFolder = (String)getTestValue("String", "setEmbeddedFont", "folder");
        String valueStorage = (String)getTestValue("String", "setEmbeddedFont", "storage");
        String valueFontsFolder = (String)getTestValue("String", "setEmbeddedFont", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setEmbeddedFont", "storage");
            initialize("setEmbeddedFont", "storage", "String", valueStorage);
            FontsData response = api.setEmbeddedFont(valueName, valueFontName, valueOnlyUsed, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "setEmbeddedFont", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "setEmbeddedFont");
        }
    }
    /**
     * Embeds specified font and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setEmbeddedFont", "name");
        String valueFontName = (String)getTestValue("String", "setEmbeddedFont", "fontName");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFont", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFont", "password");
        String valueFolder = (String)getTestValue("String", "setEmbeddedFont", "folder");
        String valueStorage = (String)getTestValue("String", "setEmbeddedFont", "storage");
        String valueFontsFolder = (String)getTestValue("String", "setEmbeddedFont", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "setEmbeddedFont", "fontsFolder");
            initialize("setEmbeddedFont", "fontsFolder", "String", valueFontsFolder);
            FontsData response = api.setEmbeddedFont(valueName, valueFontName, valueOnlyUsed, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontsFolder", "setEmbeddedFont", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontsFolder", "setEmbeddedFont");
        }
    }
    
    /**
     * Embeds font from request and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontFromRequestTest() throws ApiException, Exception {
        initialize("setEmbeddedFontFromRequest", null, null, null);
        FontsData response = null;
        byte[] valueFont = (byte[])getTestValue("byte[]", "setEmbeddedFontFromRequest", "font");
        String valueName = (String)getTestValue("String", "setEmbeddedFontFromRequest", "name");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFontFromRequest", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFontFromRequest", "password");
        String valueFolder = (String)getTestValue("String", "setEmbeddedFontFromRequest", "folder");
        String valueStorage = (String)getTestValue("String", "setEmbeddedFontFromRequest", "storage");
        response = api.setEmbeddedFontFromRequest(valueFont, valueName, valueOnlyUsed, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Embeds font from request and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontFromRequestInvalidFontTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueFont = (byte[])getTestValue("byte[]", "setEmbeddedFontFromRequest", "font");
        String valueName = (String)getTestValue("String", "setEmbeddedFontFromRequest", "name");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFontFromRequest", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFontFromRequest", "password");
        String valueFolder = (String)getTestValue("String", "setEmbeddedFontFromRequest", "folder");
        String valueStorage = (String)getTestValue("String", "setEmbeddedFontFromRequest", "storage");
        try {
            valueFont = (byte[])invalidizeTestValue("byte[]", valueFont, "setEmbeddedFontFromRequest", "font");
            initialize("setEmbeddedFontFromRequest", "font", "byte[]", valueFont);
            FontsData response = api.setEmbeddedFontFromRequest(valueFont, valueName, valueOnlyUsed, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "font", "setEmbeddedFontFromRequest", valueFont);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "font", "setEmbeddedFontFromRequest");
        }
    }
    /**
     * Embeds font from request and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontFromRequestInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueFont = (byte[])getTestValue("byte[]", "setEmbeddedFontFromRequest", "font");
        String valueName = (String)getTestValue("String", "setEmbeddedFontFromRequest", "name");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFontFromRequest", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFontFromRequest", "password");
        String valueFolder = (String)getTestValue("String", "setEmbeddedFontFromRequest", "folder");
        String valueStorage = (String)getTestValue("String", "setEmbeddedFontFromRequest", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setEmbeddedFontFromRequest", "name");
            initialize("setEmbeddedFontFromRequest", "name", "String", valueName);
            FontsData response = api.setEmbeddedFontFromRequest(valueFont, valueName, valueOnlyUsed, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "setEmbeddedFontFromRequest", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "setEmbeddedFontFromRequest");
        }
    }
    /**
     * Embeds font from request and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontFromRequestInvalidOnlyUsedTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueFont = (byte[])getTestValue("byte[]", "setEmbeddedFontFromRequest", "font");
        String valueName = (String)getTestValue("String", "setEmbeddedFontFromRequest", "name");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFontFromRequest", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFontFromRequest", "password");
        String valueFolder = (String)getTestValue("String", "setEmbeddedFontFromRequest", "folder");
        String valueStorage = (String)getTestValue("String", "setEmbeddedFontFromRequest", "storage");
        try {
            valueOnlyUsed = (Boolean)invalidizeTestValue("Boolean", valueOnlyUsed, "setEmbeddedFontFromRequest", "onlyUsed");
            initialize("setEmbeddedFontFromRequest", "onlyUsed", "Boolean", valueOnlyUsed);
            FontsData response = api.setEmbeddedFontFromRequest(valueFont, valueName, valueOnlyUsed, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "onlyUsed", "setEmbeddedFontFromRequest", valueOnlyUsed);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "onlyUsed", "setEmbeddedFontFromRequest");
        }
    }
    /**
     * Embeds font from request and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontFromRequestInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueFont = (byte[])getTestValue("byte[]", "setEmbeddedFontFromRequest", "font");
        String valueName = (String)getTestValue("String", "setEmbeddedFontFromRequest", "name");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFontFromRequest", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFontFromRequest", "password");
        String valueFolder = (String)getTestValue("String", "setEmbeddedFontFromRequest", "folder");
        String valueStorage = (String)getTestValue("String", "setEmbeddedFontFromRequest", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setEmbeddedFontFromRequest", "password");
            initialize("setEmbeddedFontFromRequest", "password", "String", valuePassword);
            FontsData response = api.setEmbeddedFontFromRequest(valueFont, valueName, valueOnlyUsed, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "setEmbeddedFontFromRequest", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "setEmbeddedFontFromRequest");
        }
    }
    /**
     * Embeds font from request and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontFromRequestInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueFont = (byte[])getTestValue("byte[]", "setEmbeddedFontFromRequest", "font");
        String valueName = (String)getTestValue("String", "setEmbeddedFontFromRequest", "name");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFontFromRequest", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFontFromRequest", "password");
        String valueFolder = (String)getTestValue("String", "setEmbeddedFontFromRequest", "folder");
        String valueStorage = (String)getTestValue("String", "setEmbeddedFontFromRequest", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setEmbeddedFontFromRequest", "folder");
            initialize("setEmbeddedFontFromRequest", "folder", "String", valueFolder);
            FontsData response = api.setEmbeddedFontFromRequest(valueFont, valueName, valueOnlyUsed, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "setEmbeddedFontFromRequest", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "setEmbeddedFontFromRequest");
        }
    }
    /**
     * Embeds font from request and returns presentation fonts info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontFromRequestInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueFont = (byte[])getTestValue("byte[]", "setEmbeddedFontFromRequest", "font");
        String valueName = (String)getTestValue("String", "setEmbeddedFontFromRequest", "name");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFontFromRequest", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFontFromRequest", "password");
        String valueFolder = (String)getTestValue("String", "setEmbeddedFontFromRequest", "folder");
        String valueStorage = (String)getTestValue("String", "setEmbeddedFontFromRequest", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setEmbeddedFontFromRequest", "storage");
            initialize("setEmbeddedFontFromRequest", "storage", "String", valueStorage);
            FontsData response = api.setEmbeddedFontFromRequest(valueFont, valueName, valueOnlyUsed, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "setEmbeddedFontFromRequest", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "setEmbeddedFontFromRequest");
        }
    }
    
    /**
     * Embeds font from request and returns presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontFromRequestOnlineTest() throws ApiException, Exception {
        initialize("setEmbeddedFontFromRequestOnline", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "setEmbeddedFontFromRequestOnline", "document");
        byte[] valueFont = (byte[])getTestValue("byte[]", "setEmbeddedFontFromRequestOnline", "font");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFontFromRequestOnline", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFontFromRequestOnline", "password");
        response = api.setEmbeddedFontFromRequestOnline(valueDocument, valueFont, valueOnlyUsed, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Embeds font from request and returns presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontFromRequestOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "setEmbeddedFontFromRequestOnline", "document");
        byte[] valueFont = (byte[])getTestValue("byte[]", "setEmbeddedFontFromRequestOnline", "font");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFontFromRequestOnline", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFontFromRequestOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "setEmbeddedFontFromRequestOnline", "document");
            initialize("setEmbeddedFontFromRequestOnline", "document", "byte[]", valueDocument);
            File response = api.setEmbeddedFontFromRequestOnline(valueDocument, valueFont, valueOnlyUsed, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "setEmbeddedFontFromRequestOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "setEmbeddedFontFromRequestOnline");
        }
    }
    /**
     * Embeds font from request and returns presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontFromRequestOnlineInvalidFontTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "setEmbeddedFontFromRequestOnline", "document");
        byte[] valueFont = (byte[])getTestValue("byte[]", "setEmbeddedFontFromRequestOnline", "font");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFontFromRequestOnline", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFontFromRequestOnline", "password");
        try {
            valueFont = (byte[])invalidizeTestValue("byte[]", valueFont, "setEmbeddedFontFromRequestOnline", "font");
            initialize("setEmbeddedFontFromRequestOnline", "font", "byte[]", valueFont);
            File response = api.setEmbeddedFontFromRequestOnline(valueDocument, valueFont, valueOnlyUsed, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "font", "setEmbeddedFontFromRequestOnline", valueFont);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "font", "setEmbeddedFontFromRequestOnline");
        }
    }
    /**
     * Embeds font from request and returns presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontFromRequestOnlineInvalidOnlyUsedTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "setEmbeddedFontFromRequestOnline", "document");
        byte[] valueFont = (byte[])getTestValue("byte[]", "setEmbeddedFontFromRequestOnline", "font");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFontFromRequestOnline", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFontFromRequestOnline", "password");
        try {
            valueOnlyUsed = (Boolean)invalidizeTestValue("Boolean", valueOnlyUsed, "setEmbeddedFontFromRequestOnline", "onlyUsed");
            initialize("setEmbeddedFontFromRequestOnline", "onlyUsed", "Boolean", valueOnlyUsed);
            File response = api.setEmbeddedFontFromRequestOnline(valueDocument, valueFont, valueOnlyUsed, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "onlyUsed", "setEmbeddedFontFromRequestOnline", valueOnlyUsed);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "onlyUsed", "setEmbeddedFontFromRequestOnline");
        }
    }
    /**
     * Embeds font from request and returns presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontFromRequestOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "setEmbeddedFontFromRequestOnline", "document");
        byte[] valueFont = (byte[])getTestValue("byte[]", "setEmbeddedFontFromRequestOnline", "font");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFontFromRequestOnline", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFontFromRequestOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setEmbeddedFontFromRequestOnline", "password");
            initialize("setEmbeddedFontFromRequestOnline", "password", "String", valuePassword);
            File response = api.setEmbeddedFontFromRequestOnline(valueDocument, valueFont, valueOnlyUsed, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "setEmbeddedFontFromRequestOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "setEmbeddedFontFromRequestOnline");
        }
    }
    
    /**
     * Embeds specified font and returns presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontOnlineTest() throws ApiException, Exception {
        initialize("setEmbeddedFontOnline", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "setEmbeddedFontOnline", "document");
        String valueFontName = (String)getTestValue("String", "setEmbeddedFontOnline", "fontName");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFontOnline", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFontOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "setEmbeddedFontOnline", "fontsFolder");
        response = api.setEmbeddedFontOnline(valueDocument, valueFontName, valueOnlyUsed, valuePassword, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Embeds specified font and returns presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "setEmbeddedFontOnline", "document");
        String valueFontName = (String)getTestValue("String", "setEmbeddedFontOnline", "fontName");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFontOnline", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFontOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "setEmbeddedFontOnline", "fontsFolder");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "setEmbeddedFontOnline", "document");
            initialize("setEmbeddedFontOnline", "document", "byte[]", valueDocument);
            File response = api.setEmbeddedFontOnline(valueDocument, valueFontName, valueOnlyUsed, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "setEmbeddedFontOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "setEmbeddedFontOnline");
        }
    }
    /**
     * Embeds specified font and returns presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontOnlineInvalidFontNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "setEmbeddedFontOnline", "document");
        String valueFontName = (String)getTestValue("String", "setEmbeddedFontOnline", "fontName");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFontOnline", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFontOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "setEmbeddedFontOnline", "fontsFolder");
        try {
            valueFontName = (String)invalidizeTestValue("String", valueFontName, "setEmbeddedFontOnline", "fontName");
            initialize("setEmbeddedFontOnline", "fontName", "String", valueFontName);
            File response = api.setEmbeddedFontOnline(valueDocument, valueFontName, valueOnlyUsed, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontName", "setEmbeddedFontOnline", valueFontName);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontName", "setEmbeddedFontOnline");
        }
    }
    /**
     * Embeds specified font and returns presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontOnlineInvalidOnlyUsedTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "setEmbeddedFontOnline", "document");
        String valueFontName = (String)getTestValue("String", "setEmbeddedFontOnline", "fontName");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFontOnline", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFontOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "setEmbeddedFontOnline", "fontsFolder");
        try {
            valueOnlyUsed = (Boolean)invalidizeTestValue("Boolean", valueOnlyUsed, "setEmbeddedFontOnline", "onlyUsed");
            initialize("setEmbeddedFontOnline", "onlyUsed", "Boolean", valueOnlyUsed);
            File response = api.setEmbeddedFontOnline(valueDocument, valueFontName, valueOnlyUsed, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Boolean", "onlyUsed", "setEmbeddedFontOnline", valueOnlyUsed);
        }
        if (needAssertResponse) {
            assertResponse("Boolean", "onlyUsed", "setEmbeddedFontOnline");
        }
    }
    /**
     * Embeds specified font and returns presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "setEmbeddedFontOnline", "document");
        String valueFontName = (String)getTestValue("String", "setEmbeddedFontOnline", "fontName");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFontOnline", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFontOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "setEmbeddedFontOnline", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setEmbeddedFontOnline", "password");
            initialize("setEmbeddedFontOnline", "password", "String", valuePassword);
            File response = api.setEmbeddedFontOnline(valueDocument, valueFontName, valueOnlyUsed, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "setEmbeddedFontOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "setEmbeddedFontOnline");
        }
    }
    /**
     * Embeds specified font and returns presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmbeddedFontOnlineInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "setEmbeddedFontOnline", "document");
        String valueFontName = (String)getTestValue("String", "setEmbeddedFontOnline", "fontName");
        Boolean valueOnlyUsed = (Boolean)getTestValue("Boolean", "setEmbeddedFontOnline", "onlyUsed");
        String valuePassword = (String)getTestValue("String", "setEmbeddedFontOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "setEmbeddedFontOnline", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "setEmbeddedFontOnline", "fontsFolder");
            initialize("setEmbeddedFontOnline", "fontsFolder", "String", valueFontsFolder);
            File response = api.setEmbeddedFontOnline(valueDocument, valueFontName, valueOnlyUsed, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontsFolder", "setEmbeddedFontOnline", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontsFolder", "setEmbeddedFontOnline");
        }
    }
    
    /**
     * Set header/footer the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setNotesSlideHeaderFooterTest() throws ApiException, Exception {
        initialize("setNotesSlideHeaderFooter", null, null, null);
        NotesSlideHeaderFooter response = null;
        String valueName = (String)getTestValue("String", "setNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setNotesSlideHeaderFooter", "slideIndex");
        NotesSlideHeaderFooter valueDto = (NotesSlideHeaderFooter)getTestValue("NotesSlideHeaderFooter", "setNotesSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setNotesSlideHeaderFooter", "storage");
        response = api.setNotesSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set header/footer the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setNotesSlideHeaderFooterInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setNotesSlideHeaderFooter", "slideIndex");
        NotesSlideHeaderFooter valueDto = (NotesSlideHeaderFooter)getTestValue("NotesSlideHeaderFooter", "setNotesSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setNotesSlideHeaderFooter", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setNotesSlideHeaderFooter", "name");
            initialize("setNotesSlideHeaderFooter", "name", "String", valueName);
            NotesSlideHeaderFooter response = api.setNotesSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "setNotesSlideHeaderFooter", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "setNotesSlideHeaderFooter");
        }
    }
    /**
     * Set header/footer the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setNotesSlideHeaderFooterInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setNotesSlideHeaderFooter", "slideIndex");
        NotesSlideHeaderFooter valueDto = (NotesSlideHeaderFooter)getTestValue("NotesSlideHeaderFooter", "setNotesSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setNotesSlideHeaderFooter", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "setNotesSlideHeaderFooter", "slideIndex");
            initialize("setNotesSlideHeaderFooter", "slideIndex", "Integer", valueSlideIndex);
            NotesSlideHeaderFooter response = api.setNotesSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "setNotesSlideHeaderFooter", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "setNotesSlideHeaderFooter");
        }
    }
    /**
     * Set header/footer the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setNotesSlideHeaderFooterInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setNotesSlideHeaderFooter", "slideIndex");
        NotesSlideHeaderFooter valueDto = (NotesSlideHeaderFooter)getTestValue("NotesSlideHeaderFooter", "setNotesSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setNotesSlideHeaderFooter", "storage");
        try {
            valueDto = (NotesSlideHeaderFooter)invalidizeTestValue("NotesSlideHeaderFooter", valueDto, "setNotesSlideHeaderFooter", "dto");
            initialize("setNotesSlideHeaderFooter", "dto", "NotesSlideHeaderFooter", valueDto);
            NotesSlideHeaderFooter response = api.setNotesSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "NotesSlideHeaderFooter", "dto", "setNotesSlideHeaderFooter", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("NotesSlideHeaderFooter", "dto", "setNotesSlideHeaderFooter");
        }
    }
    /**
     * Set header/footer the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setNotesSlideHeaderFooterInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setNotesSlideHeaderFooter", "slideIndex");
        NotesSlideHeaderFooter valueDto = (NotesSlideHeaderFooter)getTestValue("NotesSlideHeaderFooter", "setNotesSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setNotesSlideHeaderFooter", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setNotesSlideHeaderFooter", "password");
            initialize("setNotesSlideHeaderFooter", "password", "String", valuePassword);
            NotesSlideHeaderFooter response = api.setNotesSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "setNotesSlideHeaderFooter", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "setNotesSlideHeaderFooter");
        }
    }
    /**
     * Set header/footer the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setNotesSlideHeaderFooterInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setNotesSlideHeaderFooter", "slideIndex");
        NotesSlideHeaderFooter valueDto = (NotesSlideHeaderFooter)getTestValue("NotesSlideHeaderFooter", "setNotesSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setNotesSlideHeaderFooter", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setNotesSlideHeaderFooter", "folder");
            initialize("setNotesSlideHeaderFooter", "folder", "String", valueFolder);
            NotesSlideHeaderFooter response = api.setNotesSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "setNotesSlideHeaderFooter", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "setNotesSlideHeaderFooter");
        }
    }
    /**
     * Set header/footer the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setNotesSlideHeaderFooterInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setNotesSlideHeaderFooter", "slideIndex");
        NotesSlideHeaderFooter valueDto = (NotesSlideHeaderFooter)getTestValue("NotesSlideHeaderFooter", "setNotesSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setNotesSlideHeaderFooter", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setNotesSlideHeaderFooter", "storage");
            initialize("setNotesSlideHeaderFooter", "storage", "String", valueStorage);
            NotesSlideHeaderFooter response = api.setNotesSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "setNotesSlideHeaderFooter", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "setNotesSlideHeaderFooter");
        }
    }
    
    /**
     * Set footers for all slides in a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPresentationHeaderFooterTest() throws ApiException, Exception {
        initialize("setPresentationHeaderFooter", null, null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "setPresentationHeaderFooter", "name");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setPresentationHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setPresentationHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setPresentationHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setPresentationHeaderFooter", "storage");
        response = api.setPresentationHeaderFooter(valueName, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set footers for all slides in a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPresentationHeaderFooterInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setPresentationHeaderFooter", "name");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setPresentationHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setPresentationHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setPresentationHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setPresentationHeaderFooter", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setPresentationHeaderFooter", "name");
            initialize("setPresentationHeaderFooter", "name", "String", valueName);
            Document response = api.setPresentationHeaderFooter(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "setPresentationHeaderFooter", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "setPresentationHeaderFooter");
        }
    }
    /**
     * Set footers for all slides in a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPresentationHeaderFooterInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setPresentationHeaderFooter", "name");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setPresentationHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setPresentationHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setPresentationHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setPresentationHeaderFooter", "storage");
        try {
            valueDto = (HeaderFooter)invalidizeTestValue("HeaderFooter", valueDto, "setPresentationHeaderFooter", "dto");
            initialize("setPresentationHeaderFooter", "dto", "HeaderFooter", valueDto);
            Document response = api.setPresentationHeaderFooter(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "HeaderFooter", "dto", "setPresentationHeaderFooter", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("HeaderFooter", "dto", "setPresentationHeaderFooter");
        }
    }
    /**
     * Set footers for all slides in a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPresentationHeaderFooterInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setPresentationHeaderFooter", "name");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setPresentationHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setPresentationHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setPresentationHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setPresentationHeaderFooter", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setPresentationHeaderFooter", "password");
            initialize("setPresentationHeaderFooter", "password", "String", valuePassword);
            Document response = api.setPresentationHeaderFooter(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "setPresentationHeaderFooter", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "setPresentationHeaderFooter");
        }
    }
    /**
     * Set footers for all slides in a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPresentationHeaderFooterInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setPresentationHeaderFooter", "name");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setPresentationHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setPresentationHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setPresentationHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setPresentationHeaderFooter", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setPresentationHeaderFooter", "folder");
            initialize("setPresentationHeaderFooter", "folder", "String", valueFolder);
            Document response = api.setPresentationHeaderFooter(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "setPresentationHeaderFooter", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "setPresentationHeaderFooter");
        }
    }
    /**
     * Set footers for all slides in a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPresentationHeaderFooterInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setPresentationHeaderFooter", "name");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setPresentationHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setPresentationHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setPresentationHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setPresentationHeaderFooter", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setPresentationHeaderFooter", "storage");
            initialize("setPresentationHeaderFooter", "storage", "String", valueStorage);
            Document response = api.setPresentationHeaderFooter(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "setPresentationHeaderFooter", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "setPresentationHeaderFooter");
        }
    }
    
    /**
     * Updates presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setProtectionTest() throws ApiException, Exception {
        initialize("setProtection", null, null, null);
        ProtectionProperties response = null;
        String valueName = (String)getTestValue("String", "setProtection", "name");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "setProtection", "dto");
        String valuePassword = (String)getTestValue("String", "setProtection", "password");
        String valueFolder = (String)getTestValue("String", "setProtection", "folder");
        String valueStorage = (String)getTestValue("String", "setProtection", "storage");
        response = api.setProtection(valueName, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Updates presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setProtectionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setProtection", "name");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "setProtection", "dto");
        String valuePassword = (String)getTestValue("String", "setProtection", "password");
        String valueFolder = (String)getTestValue("String", "setProtection", "folder");
        String valueStorage = (String)getTestValue("String", "setProtection", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setProtection", "name");
            initialize("setProtection", "name", "String", valueName);
            ProtectionProperties response = api.setProtection(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "setProtection", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "setProtection");
        }
    }
    /**
     * Updates presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setProtectionInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setProtection", "name");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "setProtection", "dto");
        String valuePassword = (String)getTestValue("String", "setProtection", "password");
        String valueFolder = (String)getTestValue("String", "setProtection", "folder");
        String valueStorage = (String)getTestValue("String", "setProtection", "storage");
        try {
            valueDto = (ProtectionProperties)invalidizeTestValue("ProtectionProperties", valueDto, "setProtection", "dto");
            initialize("setProtection", "dto", "ProtectionProperties", valueDto);
            ProtectionProperties response = api.setProtection(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ProtectionProperties", "dto", "setProtection", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("ProtectionProperties", "dto", "setProtection");
        }
    }
    /**
     * Updates presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setProtectionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setProtection", "name");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "setProtection", "dto");
        String valuePassword = (String)getTestValue("String", "setProtection", "password");
        String valueFolder = (String)getTestValue("String", "setProtection", "folder");
        String valueStorage = (String)getTestValue("String", "setProtection", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setProtection", "password");
            initialize("setProtection", "password", "String", valuePassword);
            ProtectionProperties response = api.setProtection(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "setProtection", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "setProtection");
        }
    }
    /**
     * Updates presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setProtectionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setProtection", "name");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "setProtection", "dto");
        String valuePassword = (String)getTestValue("String", "setProtection", "password");
        String valueFolder = (String)getTestValue("String", "setProtection", "folder");
        String valueStorage = (String)getTestValue("String", "setProtection", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setProtection", "folder");
            initialize("setProtection", "folder", "String", valueFolder);
            ProtectionProperties response = api.setProtection(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "setProtection", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "setProtection");
        }
    }
    /**
     * Updates presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setProtectionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setProtection", "name");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "setProtection", "dto");
        String valuePassword = (String)getTestValue("String", "setProtection", "password");
        String valueFolder = (String)getTestValue("String", "setProtection", "folder");
        String valueStorage = (String)getTestValue("String", "setProtection", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setProtection", "storage");
            initialize("setProtection", "storage", "String", valueStorage);
            ProtectionProperties response = api.setProtection(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "setProtection", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "setProtection");
        }
    }
    
    /**
     * Sets presentation protection options. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setProtectionOnlineTest() throws ApiException, Exception {
        initialize("setProtectionOnline", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "setProtectionOnline", "document");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "setProtectionOnline", "dto");
        String valuePassword = (String)getTestValue("String", "setProtectionOnline", "password");
        response = api.setProtectionOnline(valueDocument, valueDto, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Sets presentation protection options. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setProtectionOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "setProtectionOnline", "document");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "setProtectionOnline", "dto");
        String valuePassword = (String)getTestValue("String", "setProtectionOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "setProtectionOnline", "document");
            initialize("setProtectionOnline", "document", "byte[]", valueDocument);
            File response = api.setProtectionOnline(valueDocument, valueDto, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "setProtectionOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "setProtectionOnline");
        }
    }
    /**
     * Sets presentation protection options. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setProtectionOnlineInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "setProtectionOnline", "document");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "setProtectionOnline", "dto");
        String valuePassword = (String)getTestValue("String", "setProtectionOnline", "password");
        try {
            valueDto = (ProtectionProperties)invalidizeTestValue("ProtectionProperties", valueDto, "setProtectionOnline", "dto");
            initialize("setProtectionOnline", "dto", "ProtectionProperties", valueDto);
            File response = api.setProtectionOnline(valueDocument, valueDto, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ProtectionProperties", "dto", "setProtectionOnline", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("ProtectionProperties", "dto", "setProtectionOnline");
        }
    }
    /**
     * Sets presentation protection options. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setProtectionOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "setProtectionOnline", "document");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "setProtectionOnline", "dto");
        String valuePassword = (String)getTestValue("String", "setProtectionOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setProtectionOnline", "password");
            initialize("setProtectionOnline", "password", "String", valuePassword);
            File response = api.setProtectionOnline(valueDocument, valueDto, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "setProtectionOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "setProtectionOnline");
        }
    }
    
    /**
     * Replace existing presentation sections with the ones provided in the sections DTO.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSectionsTest() throws ApiException, Exception {
        initialize("setSections", null, null, null);
        Sections response = null;
        String valueName = (String)getTestValue("String", "setSections", "name");
        Sections valueSections = (Sections)getTestValue("Sections", "setSections", "sections");
        String valuePassword = (String)getTestValue("String", "setSections", "password");
        String valueFolder = (String)getTestValue("String", "setSections", "folder");
        String valueStorage = (String)getTestValue("String", "setSections", "storage");
        response = api.setSections(valueName, valueSections, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Replace existing presentation sections with the ones provided in the sections DTO.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSectionsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSections", "name");
        Sections valueSections = (Sections)getTestValue("Sections", "setSections", "sections");
        String valuePassword = (String)getTestValue("String", "setSections", "password");
        String valueFolder = (String)getTestValue("String", "setSections", "folder");
        String valueStorage = (String)getTestValue("String", "setSections", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setSections", "name");
            initialize("setSections", "name", "String", valueName);
            Sections response = api.setSections(valueName, valueSections, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "setSections", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "setSections");
        }
    }
    /**
     * Replace existing presentation sections with the ones provided in the sections DTO.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSectionsInvalidSectionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSections", "name");
        Sections valueSections = (Sections)getTestValue("Sections", "setSections", "sections");
        String valuePassword = (String)getTestValue("String", "setSections", "password");
        String valueFolder = (String)getTestValue("String", "setSections", "folder");
        String valueStorage = (String)getTestValue("String", "setSections", "storage");
        try {
            valueSections = (Sections)invalidizeTestValue("Sections", valueSections, "setSections", "sections");
            initialize("setSections", "sections", "Sections", valueSections);
            Sections response = api.setSections(valueName, valueSections, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Sections", "sections", "setSections", valueSections);
        }
        if (needAssertResponse) {
            assertResponse("Sections", "sections", "setSections");
        }
    }
    /**
     * Replace existing presentation sections with the ones provided in the sections DTO.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSectionsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSections", "name");
        Sections valueSections = (Sections)getTestValue("Sections", "setSections", "sections");
        String valuePassword = (String)getTestValue("String", "setSections", "password");
        String valueFolder = (String)getTestValue("String", "setSections", "folder");
        String valueStorage = (String)getTestValue("String", "setSections", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setSections", "password");
            initialize("setSections", "password", "String", valuePassword);
            Sections response = api.setSections(valueName, valueSections, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "setSections", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "setSections");
        }
    }
    /**
     * Replace existing presentation sections with the ones provided in the sections DTO.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSectionsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSections", "name");
        Sections valueSections = (Sections)getTestValue("Sections", "setSections", "sections");
        String valuePassword = (String)getTestValue("String", "setSections", "password");
        String valueFolder = (String)getTestValue("String", "setSections", "folder");
        String valueStorage = (String)getTestValue("String", "setSections", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setSections", "folder");
            initialize("setSections", "folder", "String", valueFolder);
            Sections response = api.setSections(valueName, valueSections, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "setSections", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "setSections");
        }
    }
    /**
     * Replace existing presentation sections with the ones provided in the sections DTO.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSectionsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSections", "name");
        Sections valueSections = (Sections)getTestValue("Sections", "setSections", "sections");
        String valuePassword = (String)getTestValue("String", "setSections", "password");
        String valueFolder = (String)getTestValue("String", "setSections", "folder");
        String valueStorage = (String)getTestValue("String", "setSections", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setSections", "storage");
            initialize("setSections", "storage", "String", valueStorage);
            Sections response = api.setSections(valueName, valueSections, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "setSections", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "setSections");
        }
    }
    
    /**
     * Sets geometry path to the shape
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setShapeGeometryPathTest() throws ApiException, Exception {
        initialize("setShapeGeometryPath", null, null, null);
        ShapeBase response = null;
        String valueName = (String)getTestValue("String", "setShapeGeometryPath", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setShapeGeometryPath", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setShapeGeometryPath", "shapeIndex");
        GeometryPaths valueDto = (GeometryPaths)getTestValue("GeometryPaths", "setShapeGeometryPath", "dto");
        String valuePassword = (String)getTestValue("String", "setShapeGeometryPath", "password");
        String valueFolder = (String)getTestValue("String", "setShapeGeometryPath", "folder");
        String valueStorage = (String)getTestValue("String", "setShapeGeometryPath", "storage");
        response = api.setShapeGeometryPath(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Sets geometry path to the shape
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setShapeGeometryPathInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setShapeGeometryPath", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setShapeGeometryPath", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setShapeGeometryPath", "shapeIndex");
        GeometryPaths valueDto = (GeometryPaths)getTestValue("GeometryPaths", "setShapeGeometryPath", "dto");
        String valuePassword = (String)getTestValue("String", "setShapeGeometryPath", "password");
        String valueFolder = (String)getTestValue("String", "setShapeGeometryPath", "folder");
        String valueStorage = (String)getTestValue("String", "setShapeGeometryPath", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setShapeGeometryPath", "name");
            initialize("setShapeGeometryPath", "name", "String", valueName);
            ShapeBase response = api.setShapeGeometryPath(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "setShapeGeometryPath", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "setShapeGeometryPath");
        }
    }
    /**
     * Sets geometry path to the shape
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setShapeGeometryPathInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setShapeGeometryPath", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setShapeGeometryPath", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setShapeGeometryPath", "shapeIndex");
        GeometryPaths valueDto = (GeometryPaths)getTestValue("GeometryPaths", "setShapeGeometryPath", "dto");
        String valuePassword = (String)getTestValue("String", "setShapeGeometryPath", "password");
        String valueFolder = (String)getTestValue("String", "setShapeGeometryPath", "folder");
        String valueStorage = (String)getTestValue("String", "setShapeGeometryPath", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "setShapeGeometryPath", "slideIndex");
            initialize("setShapeGeometryPath", "slideIndex", "Integer", valueSlideIndex);
            ShapeBase response = api.setShapeGeometryPath(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "setShapeGeometryPath", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "setShapeGeometryPath");
        }
    }
    /**
     * Sets geometry path to the shape
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setShapeGeometryPathInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setShapeGeometryPath", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setShapeGeometryPath", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setShapeGeometryPath", "shapeIndex");
        GeometryPaths valueDto = (GeometryPaths)getTestValue("GeometryPaths", "setShapeGeometryPath", "dto");
        String valuePassword = (String)getTestValue("String", "setShapeGeometryPath", "password");
        String valueFolder = (String)getTestValue("String", "setShapeGeometryPath", "folder");
        String valueStorage = (String)getTestValue("String", "setShapeGeometryPath", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "setShapeGeometryPath", "shapeIndex");
            initialize("setShapeGeometryPath", "shapeIndex", "Integer", valueShapeIndex);
            ShapeBase response = api.setShapeGeometryPath(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "setShapeGeometryPath", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "setShapeGeometryPath");
        }
    }
    /**
     * Sets geometry path to the shape
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setShapeGeometryPathInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setShapeGeometryPath", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setShapeGeometryPath", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setShapeGeometryPath", "shapeIndex");
        GeometryPaths valueDto = (GeometryPaths)getTestValue("GeometryPaths", "setShapeGeometryPath", "dto");
        String valuePassword = (String)getTestValue("String", "setShapeGeometryPath", "password");
        String valueFolder = (String)getTestValue("String", "setShapeGeometryPath", "folder");
        String valueStorage = (String)getTestValue("String", "setShapeGeometryPath", "storage");
        try {
            valueDto = (GeometryPaths)invalidizeTestValue("GeometryPaths", valueDto, "setShapeGeometryPath", "dto");
            initialize("setShapeGeometryPath", "dto", "GeometryPaths", valueDto);
            ShapeBase response = api.setShapeGeometryPath(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "GeometryPaths", "dto", "setShapeGeometryPath", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("GeometryPaths", "dto", "setShapeGeometryPath");
        }
    }
    /**
     * Sets geometry path to the shape
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setShapeGeometryPathInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setShapeGeometryPath", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setShapeGeometryPath", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setShapeGeometryPath", "shapeIndex");
        GeometryPaths valueDto = (GeometryPaths)getTestValue("GeometryPaths", "setShapeGeometryPath", "dto");
        String valuePassword = (String)getTestValue("String", "setShapeGeometryPath", "password");
        String valueFolder = (String)getTestValue("String", "setShapeGeometryPath", "folder");
        String valueStorage = (String)getTestValue("String", "setShapeGeometryPath", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setShapeGeometryPath", "password");
            initialize("setShapeGeometryPath", "password", "String", valuePassword);
            ShapeBase response = api.setShapeGeometryPath(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "setShapeGeometryPath", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "setShapeGeometryPath");
        }
    }
    /**
     * Sets geometry path to the shape
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setShapeGeometryPathInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setShapeGeometryPath", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setShapeGeometryPath", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setShapeGeometryPath", "shapeIndex");
        GeometryPaths valueDto = (GeometryPaths)getTestValue("GeometryPaths", "setShapeGeometryPath", "dto");
        String valuePassword = (String)getTestValue("String", "setShapeGeometryPath", "password");
        String valueFolder = (String)getTestValue("String", "setShapeGeometryPath", "folder");
        String valueStorage = (String)getTestValue("String", "setShapeGeometryPath", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setShapeGeometryPath", "folder");
            initialize("setShapeGeometryPath", "folder", "String", valueFolder);
            ShapeBase response = api.setShapeGeometryPath(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "setShapeGeometryPath", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "setShapeGeometryPath");
        }
    }
    /**
     * Sets geometry path to the shape
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setShapeGeometryPathInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setShapeGeometryPath", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setShapeGeometryPath", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "setShapeGeometryPath", "shapeIndex");
        GeometryPaths valueDto = (GeometryPaths)getTestValue("GeometryPaths", "setShapeGeometryPath", "dto");
        String valuePassword = (String)getTestValue("String", "setShapeGeometryPath", "password");
        String valueFolder = (String)getTestValue("String", "setShapeGeometryPath", "folder");
        String valueStorage = (String)getTestValue("String", "setShapeGeometryPath", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setShapeGeometryPath", "storage");
            initialize("setShapeGeometryPath", "storage", "String", valueStorage);
            ShapeBase response = api.setShapeGeometryPath(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "setShapeGeometryPath", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "setShapeGeometryPath");
        }
    }
    
    /**
     * Set footer the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlideHeaderFooterTest() throws ApiException, Exception {
        initialize("setSlideHeaderFooter", null, null, null);
        HeaderFooter response = null;
        String valueName = (String)getTestValue("String", "setSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setSlideHeaderFooter", "slideIndex");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideHeaderFooter", "storage");
        response = api.setSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set footer the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlideHeaderFooterInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setSlideHeaderFooter", "slideIndex");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideHeaderFooter", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setSlideHeaderFooter", "name");
            initialize("setSlideHeaderFooter", "name", "String", valueName);
            HeaderFooter response = api.setSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "setSlideHeaderFooter", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "setSlideHeaderFooter");
        }
    }
    /**
     * Set footer the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlideHeaderFooterInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setSlideHeaderFooter", "slideIndex");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideHeaderFooter", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "setSlideHeaderFooter", "slideIndex");
            initialize("setSlideHeaderFooter", "slideIndex", "Integer", valueSlideIndex);
            HeaderFooter response = api.setSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "setSlideHeaderFooter", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "setSlideHeaderFooter");
        }
    }
    /**
     * Set footer the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlideHeaderFooterInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setSlideHeaderFooter", "slideIndex");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideHeaderFooter", "storage");
        try {
            valueDto = (HeaderFooter)invalidizeTestValue("HeaderFooter", valueDto, "setSlideHeaderFooter", "dto");
            initialize("setSlideHeaderFooter", "dto", "HeaderFooter", valueDto);
            HeaderFooter response = api.setSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "HeaderFooter", "dto", "setSlideHeaderFooter", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("HeaderFooter", "dto", "setSlideHeaderFooter");
        }
    }
    /**
     * Set footer the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlideHeaderFooterInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setSlideHeaderFooter", "slideIndex");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideHeaderFooter", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setSlideHeaderFooter", "password");
            initialize("setSlideHeaderFooter", "password", "String", valuePassword);
            HeaderFooter response = api.setSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "setSlideHeaderFooter", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "setSlideHeaderFooter");
        }
    }
    /**
     * Set footer the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlideHeaderFooterInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setSlideHeaderFooter", "slideIndex");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideHeaderFooter", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setSlideHeaderFooter", "folder");
            initialize("setSlideHeaderFooter", "folder", "String", valueFolder);
            HeaderFooter response = api.setSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "setSlideHeaderFooter", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "setSlideHeaderFooter");
        }
    }
    /**
     * Set footer the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlideHeaderFooterInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setSlideHeaderFooter", "slideIndex");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideHeaderFooter", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setSlideHeaderFooter", "storage");
            initialize("setSlideHeaderFooter", "storage", "String", valueStorage);
            HeaderFooter response = api.setSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "setSlideHeaderFooter", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "setSlideHeaderFooter");
        }
    }
    
    /**
     * Update presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlidePropertiesTest() throws ApiException, Exception {
        initialize("setSlideProperties", null, null, null);
        SlideProperties response = null;
        String valueName = (String)getTestValue("String", "setSlideProperties", "name");
        SlideProperties valueDto = (SlideProperties)getTestValue("SlideProperties", "setSlideProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "setSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideProperties", "storage");
        response = api.setSlideProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlidePropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideProperties", "name");
        SlideProperties valueDto = (SlideProperties)getTestValue("SlideProperties", "setSlideProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "setSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setSlideProperties", "name");
            initialize("setSlideProperties", "name", "String", valueName);
            SlideProperties response = api.setSlideProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "setSlideProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "setSlideProperties");
        }
    }
    /**
     * Update presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlidePropertiesInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideProperties", "name");
        SlideProperties valueDto = (SlideProperties)getTestValue("SlideProperties", "setSlideProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "setSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideProperties", "storage");
        try {
            valueDto = (SlideProperties)invalidizeTestValue("SlideProperties", valueDto, "setSlideProperties", "dto");
            initialize("setSlideProperties", "dto", "SlideProperties", valueDto);
            SlideProperties response = api.setSlideProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SlideProperties", "dto", "setSlideProperties", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("SlideProperties", "dto", "setSlideProperties");
        }
    }
    /**
     * Update presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlidePropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideProperties", "name");
        SlideProperties valueDto = (SlideProperties)getTestValue("SlideProperties", "setSlideProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "setSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setSlideProperties", "password");
            initialize("setSlideProperties", "password", "String", valuePassword);
            SlideProperties response = api.setSlideProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "setSlideProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "setSlideProperties");
        }
    }
    /**
     * Update presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlidePropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideProperties", "name");
        SlideProperties valueDto = (SlideProperties)getTestValue("SlideProperties", "setSlideProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "setSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setSlideProperties", "folder");
            initialize("setSlideProperties", "folder", "String", valueFolder);
            SlideProperties response = api.setSlideProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "setSlideProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "setSlideProperties");
        }
    }
    /**
     * Update presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlidePropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideProperties", "name");
        SlideProperties valueDto = (SlideProperties)getTestValue("SlideProperties", "setSlideProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "setSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setSlideProperties", "storage");
            initialize("setSlideProperties", "storage", "String", valueStorage);
            SlideProperties response = api.setSlideProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "setSlideProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "setSlideProperties");
        }
    }
    
    /**
     * Update presentation slide show properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlideShowPropertiesTest() throws ApiException, Exception {
        initialize("setSlideShowProperties", null, null, null);
        SlideShowProperties response = null;
        String valueName = (String)getTestValue("String", "setSlideShowProperties", "name");
        SlideShowProperties valueDto = (SlideShowProperties)getTestValue("SlideShowProperties", "setSlideShowProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideShowProperties", "password");
        String valueFolder = (String)getTestValue("String", "setSlideShowProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideShowProperties", "storage");
        response = api.setSlideShowProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update presentation slide show properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlideShowPropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideShowProperties", "name");
        SlideShowProperties valueDto = (SlideShowProperties)getTestValue("SlideShowProperties", "setSlideShowProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideShowProperties", "password");
        String valueFolder = (String)getTestValue("String", "setSlideShowProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideShowProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setSlideShowProperties", "name");
            initialize("setSlideShowProperties", "name", "String", valueName);
            SlideShowProperties response = api.setSlideShowProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "setSlideShowProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "setSlideShowProperties");
        }
    }
    /**
     * Update presentation slide show properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlideShowPropertiesInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideShowProperties", "name");
        SlideShowProperties valueDto = (SlideShowProperties)getTestValue("SlideShowProperties", "setSlideShowProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideShowProperties", "password");
        String valueFolder = (String)getTestValue("String", "setSlideShowProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideShowProperties", "storage");
        try {
            valueDto = (SlideShowProperties)invalidizeTestValue("SlideShowProperties", valueDto, "setSlideShowProperties", "dto");
            initialize("setSlideShowProperties", "dto", "SlideShowProperties", valueDto);
            SlideShowProperties response = api.setSlideShowProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SlideShowProperties", "dto", "setSlideShowProperties", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("SlideShowProperties", "dto", "setSlideShowProperties");
        }
    }
    /**
     * Update presentation slide show properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlideShowPropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideShowProperties", "name");
        SlideShowProperties valueDto = (SlideShowProperties)getTestValue("SlideShowProperties", "setSlideShowProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideShowProperties", "password");
        String valueFolder = (String)getTestValue("String", "setSlideShowProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideShowProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setSlideShowProperties", "password");
            initialize("setSlideShowProperties", "password", "String", valuePassword);
            SlideShowProperties response = api.setSlideShowProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "setSlideShowProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "setSlideShowProperties");
        }
    }
    /**
     * Update presentation slide show properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlideShowPropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideShowProperties", "name");
        SlideShowProperties valueDto = (SlideShowProperties)getTestValue("SlideShowProperties", "setSlideShowProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideShowProperties", "password");
        String valueFolder = (String)getTestValue("String", "setSlideShowProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideShowProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setSlideShowProperties", "folder");
            initialize("setSlideShowProperties", "folder", "String", valueFolder);
            SlideShowProperties response = api.setSlideShowProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "setSlideShowProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "setSlideShowProperties");
        }
    }
    /**
     * Update presentation slide show properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlideShowPropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideShowProperties", "name");
        SlideShowProperties valueDto = (SlideShowProperties)getTestValue("SlideShowProperties", "setSlideShowProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideShowProperties", "password");
        String valueFolder = (String)getTestValue("String", "setSlideShowProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideShowProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setSlideShowProperties", "storage");
            initialize("setSlideShowProperties", "storage", "String", valueStorage);
            SlideShowProperties response = api.setSlideShowProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "setSlideShowProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "setSlideShowProperties");
        }
    }
    
    /**
     * Set special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSpecialSlideAnimationTest() throws ApiException, Exception {
        initialize("setSpecialSlideAnimation", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "setSpecialSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setSpecialSlideAnimation", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "setSpecialSlideAnimation", "slideType");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "setSpecialSlideAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "setSpecialSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "setSpecialSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "setSpecialSlideAnimation", "storage");
        response = api.setSpecialSlideAnimation(valueName, valueSlideIndex, valueSlideType, valueAnimation, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSpecialSlideAnimationInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSpecialSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setSpecialSlideAnimation", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "setSpecialSlideAnimation", "slideType");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "setSpecialSlideAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "setSpecialSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "setSpecialSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "setSpecialSlideAnimation", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setSpecialSlideAnimation", "name");
            initialize("setSpecialSlideAnimation", "name", "String", valueName);
            SlideAnimation response = api.setSpecialSlideAnimation(valueName, valueSlideIndex, valueSlideType, valueAnimation, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "setSpecialSlideAnimation", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "setSpecialSlideAnimation");
        }
    }
    /**
     * Set special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSpecialSlideAnimationInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSpecialSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setSpecialSlideAnimation", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "setSpecialSlideAnimation", "slideType");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "setSpecialSlideAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "setSpecialSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "setSpecialSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "setSpecialSlideAnimation", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "setSpecialSlideAnimation", "slideIndex");
            initialize("setSpecialSlideAnimation", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.setSpecialSlideAnimation(valueName, valueSlideIndex, valueSlideType, valueAnimation, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "setSpecialSlideAnimation", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "setSpecialSlideAnimation");
        }
    }
    /**
     * Set special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSpecialSlideAnimationInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSpecialSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setSpecialSlideAnimation", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "setSpecialSlideAnimation", "slideType");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "setSpecialSlideAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "setSpecialSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "setSpecialSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "setSpecialSlideAnimation", "storage");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "setSpecialSlideAnimation", "slideType");
            initialize("setSpecialSlideAnimation", "slideType", "SpecialSlideType", valueSlideType);
            SlideAnimation response = api.setSpecialSlideAnimation(valueName, valueSlideIndex, valueSlideType, valueAnimation, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "setSpecialSlideAnimation", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "setSpecialSlideAnimation");
        }
    }
    /**
     * Set special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSpecialSlideAnimationInvalidAnimationTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSpecialSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setSpecialSlideAnimation", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "setSpecialSlideAnimation", "slideType");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "setSpecialSlideAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "setSpecialSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "setSpecialSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "setSpecialSlideAnimation", "storage");
        try {
            valueAnimation = (SlideAnimation)invalidizeTestValue("SlideAnimation", valueAnimation, "setSpecialSlideAnimation", "animation");
            initialize("setSpecialSlideAnimation", "animation", "SlideAnimation", valueAnimation);
            SlideAnimation response = api.setSpecialSlideAnimation(valueName, valueSlideIndex, valueSlideType, valueAnimation, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SlideAnimation", "animation", "setSpecialSlideAnimation", valueAnimation);
        }
        if (needAssertResponse) {
            assertResponse("SlideAnimation", "animation", "setSpecialSlideAnimation");
        }
    }
    /**
     * Set special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSpecialSlideAnimationInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSpecialSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setSpecialSlideAnimation", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "setSpecialSlideAnimation", "slideType");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "setSpecialSlideAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "setSpecialSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "setSpecialSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "setSpecialSlideAnimation", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setSpecialSlideAnimation", "password");
            initialize("setSpecialSlideAnimation", "password", "String", valuePassword);
            SlideAnimation response = api.setSpecialSlideAnimation(valueName, valueSlideIndex, valueSlideType, valueAnimation, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "setSpecialSlideAnimation", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "setSpecialSlideAnimation");
        }
    }
    /**
     * Set special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSpecialSlideAnimationInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSpecialSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setSpecialSlideAnimation", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "setSpecialSlideAnimation", "slideType");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "setSpecialSlideAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "setSpecialSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "setSpecialSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "setSpecialSlideAnimation", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setSpecialSlideAnimation", "folder");
            initialize("setSpecialSlideAnimation", "folder", "String", valueFolder);
            SlideAnimation response = api.setSpecialSlideAnimation(valueName, valueSlideIndex, valueSlideType, valueAnimation, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "setSpecialSlideAnimation", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "setSpecialSlideAnimation");
        }
    }
    /**
     * Set special slide (master, layout, notes) animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSpecialSlideAnimationInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSpecialSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setSpecialSlideAnimation", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "setSpecialSlideAnimation", "slideType");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "setSpecialSlideAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "setSpecialSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "setSpecialSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "setSpecialSlideAnimation", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setSpecialSlideAnimation", "storage");
            initialize("setSpecialSlideAnimation", "storage", "String", valueStorage);
            SlideAnimation response = api.setSpecialSlideAnimation(valueName, valueSlideIndex, valueSlideType, valueAnimation, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "setSpecialSlideAnimation", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "setSpecialSlideAnimation");
        }
    }
    
    /**
     * Update presentation view properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setViewPropertiesTest() throws ApiException, Exception {
        initialize("setViewProperties", null, null, null);
        ViewProperties response = null;
        String valueName = (String)getTestValue("String", "setViewProperties", "name");
        ViewProperties valueDto = (ViewProperties)getTestValue("ViewProperties", "setViewProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "setViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setViewProperties", "storage");
        response = api.setViewProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update presentation view properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setViewPropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setViewProperties", "name");
        ViewProperties valueDto = (ViewProperties)getTestValue("ViewProperties", "setViewProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "setViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setViewProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setViewProperties", "name");
            initialize("setViewProperties", "name", "String", valueName);
            ViewProperties response = api.setViewProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "setViewProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "setViewProperties");
        }
    }
    /**
     * Update presentation view properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setViewPropertiesInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setViewProperties", "name");
        ViewProperties valueDto = (ViewProperties)getTestValue("ViewProperties", "setViewProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "setViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setViewProperties", "storage");
        try {
            valueDto = (ViewProperties)invalidizeTestValue("ViewProperties", valueDto, "setViewProperties", "dto");
            initialize("setViewProperties", "dto", "ViewProperties", valueDto);
            ViewProperties response = api.setViewProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ViewProperties", "dto", "setViewProperties", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("ViewProperties", "dto", "setViewProperties");
        }
    }
    /**
     * Update presentation view properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setViewPropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setViewProperties", "name");
        ViewProperties valueDto = (ViewProperties)getTestValue("ViewProperties", "setViewProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "setViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setViewProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setViewProperties", "password");
            initialize("setViewProperties", "password", "String", valuePassword);
            ViewProperties response = api.setViewProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "setViewProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "setViewProperties");
        }
    }
    /**
     * Update presentation view properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setViewPropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setViewProperties", "name");
        ViewProperties valueDto = (ViewProperties)getTestValue("ViewProperties", "setViewProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "setViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setViewProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setViewProperties", "folder");
            initialize("setViewProperties", "folder", "String", valueFolder);
            ViewProperties response = api.setViewProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "setViewProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "setViewProperties");
        }
    }
    /**
     * Update presentation view properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setViewPropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setViewProperties", "name");
        ViewProperties valueDto = (ViewProperties)getTestValue("ViewProperties", "setViewProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "setViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setViewProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setViewProperties", "storage");
            initialize("setViewProperties", "storage", "String", valueStorage);
            ViewProperties response = api.setViewProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "setViewProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "setViewProperties");
        }
    }
    
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitTest() throws ApiException, Exception {
        initialize("split", null, null, null);
        SplitDocumentResult response = null;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
        assertNotNull(response);
    }

    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "split", "name");
            initialize("split", "name", "String", valueName);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "split", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "split");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        try {
            valueOptions = (ExportOptions)invalidizeTestValue("ExportOptions", valueOptions, "split", "options");
            initialize("split", "options", "ExportOptions", valueOptions);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ExportOptions", "options", "split", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("ExportOptions", "options", "split");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        try {
            valueFormat = (SlideExportFormat)invalidizeTestValue("SlideExportFormat", valueFormat, "split", "format");
            initialize("split", "format", "SlideExportFormat", valueFormat);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SlideExportFormat", "format", "split", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("SlideExportFormat", "format", "split");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "split", "width");
            initialize("split", "width", "Integer", valueWidth);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "width", "split", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "width", "split");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "split", "height");
            initialize("split", "height", "Integer", valueHeight);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "height", "split", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "height", "split");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitInvalidFromTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        try {
            valueFrom = (Integer)invalidizeTestValue("Integer", valueFrom, "split", "from");
            initialize("split", "from", "Integer", valueFrom);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "from", "split", valueFrom);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "from", "split");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitInvalidToTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        try {
            valueTo = (Integer)invalidizeTestValue("Integer", valueTo, "split", "to");
            initialize("split", "to", "Integer", valueTo);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "to", "split", valueTo);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "to", "split");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitInvalidDestFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        try {
            valueDestFolder = (String)invalidizeTestValue("String", valueDestFolder, "split", "destFolder");
            initialize("split", "destFolder", "String", valueDestFolder);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "destFolder", "split", valueDestFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "destFolder", "split");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "split", "password");
            initialize("split", "password", "String", valuePassword);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "split", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "split");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "split", "folder");
            initialize("split", "folder", "String", valueFolder);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "split", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "split");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "split", "storage");
            initialize("split", "storage", "String", valueStorage);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "split", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "split");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "split", "fontsFolder");
            initialize("split", "fontsFolder", "String", valueFontsFolder);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontsFolder", "split", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontsFolder", "split");
        }
    }
    
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitAndSaveOnlineTest() throws ApiException, Exception {
        initialize("splitAndSaveOnline", null, null, null);
        SplitDocumentResult response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitAndSaveOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitAndSaveOnline", "format");
        String valueDestFolder = (String)getTestValue("String", "splitAndSaveOnline", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitAndSaveOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitAndSaveOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitAndSaveOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitAndSaveOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitAndSaveOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitAndSaveOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitAndSaveOnline", "fontsFolder");
        response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
        assertNotNull(response);
    }

    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitAndSaveOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitAndSaveOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitAndSaveOnline", "format");
        String valueDestFolder = (String)getTestValue("String", "splitAndSaveOnline", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitAndSaveOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitAndSaveOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitAndSaveOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitAndSaveOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitAndSaveOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitAndSaveOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitAndSaveOnline", "fontsFolder");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "splitAndSaveOnline", "document");
            initialize("splitAndSaveOnline", "document", "byte[]", valueDocument);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "splitAndSaveOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "splitAndSaveOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitAndSaveOnlineInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitAndSaveOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitAndSaveOnline", "format");
        String valueDestFolder = (String)getTestValue("String", "splitAndSaveOnline", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitAndSaveOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitAndSaveOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitAndSaveOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitAndSaveOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitAndSaveOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitAndSaveOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitAndSaveOnline", "fontsFolder");
        try {
            valueFormat = (SlideExportFormat)invalidizeTestValue("SlideExportFormat", valueFormat, "splitAndSaveOnline", "format");
            initialize("splitAndSaveOnline", "format", "SlideExportFormat", valueFormat);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SlideExportFormat", "format", "splitAndSaveOnline", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("SlideExportFormat", "format", "splitAndSaveOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitAndSaveOnlineInvalidDestFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitAndSaveOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitAndSaveOnline", "format");
        String valueDestFolder = (String)getTestValue("String", "splitAndSaveOnline", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitAndSaveOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitAndSaveOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitAndSaveOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitAndSaveOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitAndSaveOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitAndSaveOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitAndSaveOnline", "fontsFolder");
        try {
            valueDestFolder = (String)invalidizeTestValue("String", valueDestFolder, "splitAndSaveOnline", "destFolder");
            initialize("splitAndSaveOnline", "destFolder", "String", valueDestFolder);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "destFolder", "splitAndSaveOnline", valueDestFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "destFolder", "splitAndSaveOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitAndSaveOnlineInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitAndSaveOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitAndSaveOnline", "format");
        String valueDestFolder = (String)getTestValue("String", "splitAndSaveOnline", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitAndSaveOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitAndSaveOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitAndSaveOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitAndSaveOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitAndSaveOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitAndSaveOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitAndSaveOnline", "fontsFolder");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "splitAndSaveOnline", "width");
            initialize("splitAndSaveOnline", "width", "Integer", valueWidth);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "width", "splitAndSaveOnline", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "width", "splitAndSaveOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitAndSaveOnlineInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitAndSaveOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitAndSaveOnline", "format");
        String valueDestFolder = (String)getTestValue("String", "splitAndSaveOnline", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitAndSaveOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitAndSaveOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitAndSaveOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitAndSaveOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitAndSaveOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitAndSaveOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitAndSaveOnline", "fontsFolder");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "splitAndSaveOnline", "height");
            initialize("splitAndSaveOnline", "height", "Integer", valueHeight);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "height", "splitAndSaveOnline", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "height", "splitAndSaveOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitAndSaveOnlineInvalidFromTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitAndSaveOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitAndSaveOnline", "format");
        String valueDestFolder = (String)getTestValue("String", "splitAndSaveOnline", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitAndSaveOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitAndSaveOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitAndSaveOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitAndSaveOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitAndSaveOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitAndSaveOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitAndSaveOnline", "fontsFolder");
        try {
            valueFrom = (Integer)invalidizeTestValue("Integer", valueFrom, "splitAndSaveOnline", "from");
            initialize("splitAndSaveOnline", "from", "Integer", valueFrom);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "from", "splitAndSaveOnline", valueFrom);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "from", "splitAndSaveOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitAndSaveOnlineInvalidToTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitAndSaveOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitAndSaveOnline", "format");
        String valueDestFolder = (String)getTestValue("String", "splitAndSaveOnline", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitAndSaveOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitAndSaveOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitAndSaveOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitAndSaveOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitAndSaveOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitAndSaveOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitAndSaveOnline", "fontsFolder");
        try {
            valueTo = (Integer)invalidizeTestValue("Integer", valueTo, "splitAndSaveOnline", "to");
            initialize("splitAndSaveOnline", "to", "Integer", valueTo);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "to", "splitAndSaveOnline", valueTo);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "to", "splitAndSaveOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitAndSaveOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitAndSaveOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitAndSaveOnline", "format");
        String valueDestFolder = (String)getTestValue("String", "splitAndSaveOnline", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitAndSaveOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitAndSaveOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitAndSaveOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitAndSaveOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitAndSaveOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitAndSaveOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitAndSaveOnline", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "splitAndSaveOnline", "password");
            initialize("splitAndSaveOnline", "password", "String", valuePassword);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "splitAndSaveOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "splitAndSaveOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitAndSaveOnlineInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitAndSaveOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitAndSaveOnline", "format");
        String valueDestFolder = (String)getTestValue("String", "splitAndSaveOnline", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitAndSaveOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitAndSaveOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitAndSaveOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitAndSaveOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitAndSaveOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitAndSaveOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitAndSaveOnline", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "splitAndSaveOnline", "storage");
            initialize("splitAndSaveOnline", "storage", "String", valueStorage);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "splitAndSaveOnline", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "splitAndSaveOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitAndSaveOnlineInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitAndSaveOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitAndSaveOnline", "format");
        String valueDestFolder = (String)getTestValue("String", "splitAndSaveOnline", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitAndSaveOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitAndSaveOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitAndSaveOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitAndSaveOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitAndSaveOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitAndSaveOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitAndSaveOnline", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "splitAndSaveOnline", "fontsFolder");
            initialize("splitAndSaveOnline", "fontsFolder", "String", valueFontsFolder);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontsFolder", "splitAndSaveOnline", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontsFolder", "splitAndSaveOnline");
        }
    }
    
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitOnlineTest() throws ApiException, Exception {
        initialize("splitOnline", null, null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitOnline", "fontsFolder");
        response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitOnline", "fontsFolder");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "splitOnline", "document");
            initialize("splitOnline", "document", "byte[]", valueDocument);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "document", "splitOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "document", "splitOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitOnlineInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitOnline", "fontsFolder");
        try {
            valueFormat = (SlideExportFormat)invalidizeTestValue("SlideExportFormat", valueFormat, "splitOnline", "format");
            initialize("splitOnline", "format", "SlideExportFormat", valueFormat);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SlideExportFormat", "format", "splitOnline", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("SlideExportFormat", "format", "splitOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitOnlineInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitOnline", "fontsFolder");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "splitOnline", "width");
            initialize("splitOnline", "width", "Integer", valueWidth);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "width", "splitOnline", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "width", "splitOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitOnlineInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitOnline", "fontsFolder");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "splitOnline", "height");
            initialize("splitOnline", "height", "Integer", valueHeight);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "height", "splitOnline", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "height", "splitOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitOnlineInvalidFromTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitOnline", "fontsFolder");
        try {
            valueFrom = (Integer)invalidizeTestValue("Integer", valueFrom, "splitOnline", "from");
            initialize("splitOnline", "from", "Integer", valueFrom);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "from", "splitOnline", valueFrom);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "from", "splitOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitOnlineInvalidToTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitOnline", "fontsFolder");
        try {
            valueTo = (Integer)invalidizeTestValue("Integer", valueTo, "splitOnline", "to");
            initialize("splitOnline", "to", "Integer", valueTo);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "to", "splitOnline", valueTo);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "to", "splitOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitOnline", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "splitOnline", "password");
            initialize("splitOnline", "password", "String", valuePassword);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "splitOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "splitOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitOnlineInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitOnline", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "splitOnline", "storage");
            initialize("splitOnline", "storage", "String", valueStorage);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "splitOnline", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "splitOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitOnlineInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitOnline", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "splitOnline", "fontsFolder");
            initialize("splitOnline", "fontsFolder", "String", valueFontsFolder);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "fontsFolder", "splitOnline", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "fontsFolder", "splitOnline");
        }
    }
    
    /**
     * Check if storage exists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void storageExistsTest() throws ApiException, Exception {
        initialize("storageExists", null, null, null);
        StorageExist response = null;
        String valueStorageName = (String)getTestValue("String", "storageExists", "storageName");
        response = api.storageExists(valueStorageName);
        assertNotNull(response);
    }

    /**
     * Check if storage exists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void storageExistsInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueStorageName = (String)getTestValue("String", "storageExists", "storageName");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "storageExists", "storageName");
            initialize("storageExists", "storageName", "String", valueStorageName);
            StorageExist response = api.storageExists(valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storageName", "storageExists", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("String", "storageName", "storageExists");
        }
    }
    
    /**
     * Modify an animation effect for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationEffectTest() throws ApiException, Exception {
        initialize("updateAnimationEffect", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "updateAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationEffect", "storage");
        response = api.updateAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Modify an animation effect for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationEffectInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationEffect", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateAnimationEffect", "name");
            initialize("updateAnimationEffect", "name", "String", valueName);
            SlideAnimation response = api.updateAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "updateAnimationEffect", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "updateAnimationEffect");
        }
    }
    /**
     * Modify an animation effect for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationEffectInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationEffect", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateAnimationEffect", "slideIndex");
            initialize("updateAnimationEffect", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.updateAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "updateAnimationEffect", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "updateAnimationEffect");
        }
    }
    /**
     * Modify an animation effect for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationEffectInvalidEffectIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationEffect", "storage");
        try {
            valueEffectIndex = (Integer)invalidizeTestValue("Integer", valueEffectIndex, "updateAnimationEffect", "effectIndex");
            initialize("updateAnimationEffect", "effectIndex", "Integer", valueEffectIndex);
            SlideAnimation response = api.updateAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "effectIndex", "updateAnimationEffect", valueEffectIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "effectIndex", "updateAnimationEffect");
        }
    }
    /**
     * Modify an animation effect for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationEffectInvalidEffectTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationEffect", "storage");
        try {
            valueEffect = (Effect)invalidizeTestValue("Effect", valueEffect, "updateAnimationEffect", "effect");
            initialize("updateAnimationEffect", "effect", "Effect", valueEffect);
            SlideAnimation response = api.updateAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Effect", "effect", "updateAnimationEffect", valueEffect);
        }
        if (needAssertResponse) {
            assertResponse("Effect", "effect", "updateAnimationEffect");
        }
    }
    /**
     * Modify an animation effect for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationEffectInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationEffect", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateAnimationEffect", "password");
            initialize("updateAnimationEffect", "password", "String", valuePassword);
            SlideAnimation response = api.updateAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "updateAnimationEffect", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "updateAnimationEffect");
        }
    }
    /**
     * Modify an animation effect for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationEffectInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationEffect", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateAnimationEffect", "folder");
            initialize("updateAnimationEffect", "folder", "String", valueFolder);
            SlideAnimation response = api.updateAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "updateAnimationEffect", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "updateAnimationEffect");
        }
    }
    /**
     * Modify an animation effect for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationEffectInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationEffect", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateAnimationEffect", "storage");
            initialize("updateAnimationEffect", "storage", "String", valueStorage);
            SlideAnimation response = api.updateAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "updateAnimationEffect", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "updateAnimationEffect");
        }
    }
    
    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationInteractiveSequenceEffectTest() throws ApiException, Exception {
        initialize("updateAnimationInteractiveSequenceEffect", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "storage");
        response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationInteractiveSequenceEffectInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateAnimationInteractiveSequenceEffect", "name");
            initialize("updateAnimationInteractiveSequenceEffect", "name", "String", valueName);
            SlideAnimation response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "updateAnimationInteractiveSequenceEffect", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "updateAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationInteractiveSequenceEffectInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateAnimationInteractiveSequenceEffect", "slideIndex");
            initialize("updateAnimationInteractiveSequenceEffect", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "updateAnimationInteractiveSequenceEffect", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "updateAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationInteractiveSequenceEffectInvalidSequenceIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSequenceIndex = (Integer)invalidizeTestValue("Integer", valueSequenceIndex, "updateAnimationInteractiveSequenceEffect", "sequenceIndex");
            initialize("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "Integer", valueSequenceIndex);
            SlideAnimation response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "sequenceIndex", "updateAnimationInteractiveSequenceEffect", valueSequenceIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "sequenceIndex", "updateAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationInteractiveSequenceEffectInvalidEffectIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "storage");
        try {
            valueEffectIndex = (Integer)invalidizeTestValue("Integer", valueEffectIndex, "updateAnimationInteractiveSequenceEffect", "effectIndex");
            initialize("updateAnimationInteractiveSequenceEffect", "effectIndex", "Integer", valueEffectIndex);
            SlideAnimation response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "effectIndex", "updateAnimationInteractiveSequenceEffect", valueEffectIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "effectIndex", "updateAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationInteractiveSequenceEffectInvalidEffectTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "storage");
        try {
            valueEffect = (Effect)invalidizeTestValue("Effect", valueEffect, "updateAnimationInteractiveSequenceEffect", "effect");
            initialize("updateAnimationInteractiveSequenceEffect", "effect", "Effect", valueEffect);
            SlideAnimation response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Effect", "effect", "updateAnimationInteractiveSequenceEffect", valueEffect);
        }
        if (needAssertResponse) {
            assertResponse("Effect", "effect", "updateAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationInteractiveSequenceEffectInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateAnimationInteractiveSequenceEffect", "password");
            initialize("updateAnimationInteractiveSequenceEffect", "password", "String", valuePassword);
            SlideAnimation response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "updateAnimationInteractiveSequenceEffect", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "updateAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationInteractiveSequenceEffectInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateAnimationInteractiveSequenceEffect", "folder");
            initialize("updateAnimationInteractiveSequenceEffect", "folder", "String", valueFolder);
            SlideAnimation response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "updateAnimationInteractiveSequenceEffect", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "updateAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationInteractiveSequenceEffectInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateAnimationInteractiveSequenceEffect", "storage");
            initialize("updateAnimationInteractiveSequenceEffect", "storage", "String", valueStorage);
            SlideAnimation response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "updateAnimationInteractiveSequenceEffect", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "updateAnimationInteractiveSequenceEffect");
        }
    }
    
    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartCategoryTest() throws ApiException, Exception {
        initialize("updateChartCategory", null, null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "updateChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "updateChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "updateChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "updateChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "updateChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartCategory", "storage");
        response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartCategoryInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "updateChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "updateChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "updateChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "updateChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartCategory", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateChartCategory", "name");
            initialize("updateChartCategory", "name", "String", valueName);
            Chart response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "updateChartCategory", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "updateChartCategory");
        }
    }
    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartCategoryInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "updateChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "updateChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "updateChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "updateChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartCategory", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateChartCategory", "slideIndex");
            initialize("updateChartCategory", "slideIndex", "Integer", valueSlideIndex);
            Chart response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "updateChartCategory", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "updateChartCategory");
        }
    }
    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartCategoryInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "updateChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "updateChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "updateChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "updateChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartCategory", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "updateChartCategory", "shapeIndex");
            initialize("updateChartCategory", "shapeIndex", "Integer", valueShapeIndex);
            Chart response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "updateChartCategory", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "updateChartCategory");
        }
    }
    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartCategoryInvalidCategoryIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "updateChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "updateChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "updateChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "updateChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartCategory", "storage");
        try {
            valueCategoryIndex = (Integer)invalidizeTestValue("Integer", valueCategoryIndex, "updateChartCategory", "categoryIndex");
            initialize("updateChartCategory", "categoryIndex", "Integer", valueCategoryIndex);
            Chart response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "categoryIndex", "updateChartCategory", valueCategoryIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "categoryIndex", "updateChartCategory");
        }
    }
    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartCategoryInvalidCategoryTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "updateChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "updateChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "updateChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "updateChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartCategory", "storage");
        try {
            valueCategory = (ChartCategory)invalidizeTestValue("ChartCategory", valueCategory, "updateChartCategory", "category");
            initialize("updateChartCategory", "category", "ChartCategory", valueCategory);
            Chart response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ChartCategory", "category", "updateChartCategory", valueCategory);
        }
        if (needAssertResponse) {
            assertResponse("ChartCategory", "category", "updateChartCategory");
        }
    }
    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartCategoryInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "updateChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "updateChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "updateChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "updateChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartCategory", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateChartCategory", "password");
            initialize("updateChartCategory", "password", "String", valuePassword);
            Chart response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "updateChartCategory", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "updateChartCategory");
        }
    }
    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartCategoryInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "updateChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "updateChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "updateChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "updateChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartCategory", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateChartCategory", "folder");
            initialize("updateChartCategory", "folder", "String", valueFolder);
            Chart response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "updateChartCategory", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "updateChartCategory");
        }
    }
    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartCategoryInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "updateChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "updateChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "updateChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "updateChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartCategory", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateChartCategory", "storage");
            initialize("updateChartCategory", "storage", "String", valueStorage);
            Chart response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "updateChartCategory", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "updateChartCategory");
        }
    }
    
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartDataPointTest() throws ApiException, Exception {
        initialize("updateChartDataPoint", null, null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "updateChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "updateChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "updateChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "updateChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartDataPoint", "storage");
        response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartDataPointInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "updateChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "updateChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "updateChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartDataPoint", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateChartDataPoint", "name");
            initialize("updateChartDataPoint", "name", "String", valueName);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "updateChartDataPoint", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "updateChartDataPoint");
        }
    }
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartDataPointInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "updateChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "updateChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "updateChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartDataPoint", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateChartDataPoint", "slideIndex");
            initialize("updateChartDataPoint", "slideIndex", "Integer", valueSlideIndex);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "updateChartDataPoint", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "updateChartDataPoint");
        }
    }
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartDataPointInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "updateChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "updateChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "updateChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartDataPoint", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "updateChartDataPoint", "shapeIndex");
            initialize("updateChartDataPoint", "shapeIndex", "Integer", valueShapeIndex);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "updateChartDataPoint", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "updateChartDataPoint");
        }
    }
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartDataPointInvalidSeriesIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "updateChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "updateChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "updateChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartDataPoint", "storage");
        try {
            valueSeriesIndex = (Integer)invalidizeTestValue("Integer", valueSeriesIndex, "updateChartDataPoint", "seriesIndex");
            initialize("updateChartDataPoint", "seriesIndex", "Integer", valueSeriesIndex);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "seriesIndex", "updateChartDataPoint", valueSeriesIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "seriesIndex", "updateChartDataPoint");
        }
    }
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartDataPointInvalidPointIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "updateChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "updateChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "updateChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartDataPoint", "storage");
        try {
            valuePointIndex = (Integer)invalidizeTestValue("Integer", valuePointIndex, "updateChartDataPoint", "pointIndex");
            initialize("updateChartDataPoint", "pointIndex", "Integer", valuePointIndex);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "pointIndex", "updateChartDataPoint", valuePointIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "pointIndex", "updateChartDataPoint");
        }
    }
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartDataPointInvalidDataPointTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "updateChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "updateChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "updateChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartDataPoint", "storage");
        try {
            valueDataPoint = (DataPoint)invalidizeTestValue("DataPoint", valueDataPoint, "updateChartDataPoint", "dataPoint");
            initialize("updateChartDataPoint", "dataPoint", "DataPoint", valueDataPoint);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "DataPoint", "dataPoint", "updateChartDataPoint", valueDataPoint);
        }
        if (needAssertResponse) {
            assertResponse("DataPoint", "dataPoint", "updateChartDataPoint");
        }
    }
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartDataPointInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "updateChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "updateChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "updateChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartDataPoint", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateChartDataPoint", "password");
            initialize("updateChartDataPoint", "password", "String", valuePassword);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "updateChartDataPoint", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "updateChartDataPoint");
        }
    }
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartDataPointInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "updateChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "updateChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "updateChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartDataPoint", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateChartDataPoint", "folder");
            initialize("updateChartDataPoint", "folder", "String", valueFolder);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "updateChartDataPoint", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "updateChartDataPoint");
        }
    }
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartDataPointInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "updateChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "updateChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "updateChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartDataPoint", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateChartDataPoint", "storage");
            initialize("updateChartDataPoint", "storage", "String", valueStorage);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "updateChartDataPoint", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "updateChartDataPoint");
        }
    }
    
    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartSeriesTest() throws ApiException, Exception {
        initialize("updateChartSeries", null, null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "updateChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "updateChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "updateChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "updateChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartSeries", "storage");
        response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartSeriesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "updateChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "updateChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "updateChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartSeries", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateChartSeries", "name");
            initialize("updateChartSeries", "name", "String", valueName);
            Chart response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "updateChartSeries", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "updateChartSeries");
        }
    }
    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartSeriesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "updateChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "updateChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "updateChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartSeries", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateChartSeries", "slideIndex");
            initialize("updateChartSeries", "slideIndex", "Integer", valueSlideIndex);
            Chart response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "updateChartSeries", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "updateChartSeries");
        }
    }
    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartSeriesInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "updateChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "updateChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "updateChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartSeries", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "updateChartSeries", "shapeIndex");
            initialize("updateChartSeries", "shapeIndex", "Integer", valueShapeIndex);
            Chart response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "updateChartSeries", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "updateChartSeries");
        }
    }
    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartSeriesInvalidSeriesIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "updateChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "updateChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "updateChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartSeries", "storage");
        try {
            valueSeriesIndex = (Integer)invalidizeTestValue("Integer", valueSeriesIndex, "updateChartSeries", "seriesIndex");
            initialize("updateChartSeries", "seriesIndex", "Integer", valueSeriesIndex);
            Chart response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "seriesIndex", "updateChartSeries", valueSeriesIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "seriesIndex", "updateChartSeries");
        }
    }
    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartSeriesInvalidSeriesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "updateChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "updateChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "updateChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartSeries", "storage");
        try {
            valueSeries = (Series)invalidizeTestValue("Series", valueSeries, "updateChartSeries", "series");
            initialize("updateChartSeries", "series", "Series", valueSeries);
            Chart response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Series", "series", "updateChartSeries", valueSeries);
        }
        if (needAssertResponse) {
            assertResponse("Series", "series", "updateChartSeries");
        }
    }
    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartSeriesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "updateChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "updateChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "updateChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartSeries", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateChartSeries", "password");
            initialize("updateChartSeries", "password", "String", valuePassword);
            Chart response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "updateChartSeries", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "updateChartSeries");
        }
    }
    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartSeriesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "updateChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "updateChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "updateChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartSeries", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateChartSeries", "folder");
            initialize("updateChartSeries", "folder", "String", valueFolder);
            Chart response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "updateChartSeries", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "updateChartSeries");
        }
    }
    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartSeriesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "updateChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "updateChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "updateChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartSeries", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateChartSeries", "storage");
            initialize("updateChartSeries", "storage", "String", valueStorage);
            Chart response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "updateChartSeries", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "updateChartSeries");
        }
    }
    
    /**
     * Update a layoutSlide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLayoutSlideTest() throws ApiException, Exception {
        initialize("updateLayoutSlide", null, null, null);
        LayoutSlide response = null;
        String valueName = (String)getTestValue("String", "updateLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateLayoutSlide", "slideIndex");
        LayoutSlide valueSlideDto = (LayoutSlide)getTestValue("LayoutSlide", "updateLayoutSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateLayoutSlide", "storage");
        response = api.updateLayoutSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update a layoutSlide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLayoutSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateLayoutSlide", "slideIndex");
        LayoutSlide valueSlideDto = (LayoutSlide)getTestValue("LayoutSlide", "updateLayoutSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateLayoutSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateLayoutSlide", "name");
            initialize("updateLayoutSlide", "name", "String", valueName);
            LayoutSlide response = api.updateLayoutSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "updateLayoutSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "updateLayoutSlide");
        }
    }
    /**
     * Update a layoutSlide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLayoutSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateLayoutSlide", "slideIndex");
        LayoutSlide valueSlideDto = (LayoutSlide)getTestValue("LayoutSlide", "updateLayoutSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateLayoutSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateLayoutSlide", "slideIndex");
            initialize("updateLayoutSlide", "slideIndex", "Integer", valueSlideIndex);
            LayoutSlide response = api.updateLayoutSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "updateLayoutSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "updateLayoutSlide");
        }
    }
    /**
     * Update a layoutSlide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLayoutSlideInvalidSlideDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateLayoutSlide", "slideIndex");
        LayoutSlide valueSlideDto = (LayoutSlide)getTestValue("LayoutSlide", "updateLayoutSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateLayoutSlide", "storage");
        try {
            valueSlideDto = (LayoutSlide)invalidizeTestValue("LayoutSlide", valueSlideDto, "updateLayoutSlide", "slideDto");
            initialize("updateLayoutSlide", "slideDto", "LayoutSlide", valueSlideDto);
            LayoutSlide response = api.updateLayoutSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "LayoutSlide", "slideDto", "updateLayoutSlide", valueSlideDto);
        }
        if (needAssertResponse) {
            assertResponse("LayoutSlide", "slideDto", "updateLayoutSlide");
        }
    }
    /**
     * Update a layoutSlide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLayoutSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateLayoutSlide", "slideIndex");
        LayoutSlide valueSlideDto = (LayoutSlide)getTestValue("LayoutSlide", "updateLayoutSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateLayoutSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateLayoutSlide", "password");
            initialize("updateLayoutSlide", "password", "String", valuePassword);
            LayoutSlide response = api.updateLayoutSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "updateLayoutSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "updateLayoutSlide");
        }
    }
    /**
     * Update a layoutSlide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLayoutSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateLayoutSlide", "slideIndex");
        LayoutSlide valueSlideDto = (LayoutSlide)getTestValue("LayoutSlide", "updateLayoutSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateLayoutSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateLayoutSlide", "folder");
            initialize("updateLayoutSlide", "folder", "String", valueFolder);
            LayoutSlide response = api.updateLayoutSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "updateLayoutSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "updateLayoutSlide");
        }
    }
    /**
     * Update a layoutSlide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLayoutSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateLayoutSlide", "slideIndex");
        LayoutSlide valueSlideDto = (LayoutSlide)getTestValue("LayoutSlide", "updateLayoutSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateLayoutSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateLayoutSlide", "storage");
            initialize("updateLayoutSlide", "storage", "String", valueStorage);
            LayoutSlide response = api.updateLayoutSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "updateLayoutSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "updateLayoutSlide");
        }
    }
    
    /**
     * Update notes slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideTest() throws ApiException, Exception {
        initialize("updateNotesSlide", null, null, null);
        NotesSlide response = null;
        String valueName = (String)getTestValue("String", "updateNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "updateNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlide", "storage");
        response = api.updateNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update notes slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "updateNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateNotesSlide", "name");
            initialize("updateNotesSlide", "name", "String", valueName);
            NotesSlide response = api.updateNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "updateNotesSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "updateNotesSlide");
        }
    }
    /**
     * Update notes slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "updateNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateNotesSlide", "slideIndex");
            initialize("updateNotesSlide", "slideIndex", "Integer", valueSlideIndex);
            NotesSlide response = api.updateNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "updateNotesSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "updateNotesSlide");
        }
    }
    /**
     * Update notes slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "updateNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlide", "storage");
        try {
            valueDto = (NotesSlide)invalidizeTestValue("NotesSlide", valueDto, "updateNotesSlide", "dto");
            initialize("updateNotesSlide", "dto", "NotesSlide", valueDto);
            NotesSlide response = api.updateNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "NotesSlide", "dto", "updateNotesSlide", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("NotesSlide", "dto", "updateNotesSlide");
        }
    }
    /**
     * Update notes slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "updateNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateNotesSlide", "password");
            initialize("updateNotesSlide", "password", "String", valuePassword);
            NotesSlide response = api.updateNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "updateNotesSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "updateNotesSlide");
        }
    }
    /**
     * Update notes slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "updateNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateNotesSlide", "folder");
            initialize("updateNotesSlide", "folder", "String", valueFolder);
            NotesSlide response = api.updateNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "updateNotesSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "updateNotesSlide");
        }
    }
    /**
     * Update notes slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "updateNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateNotesSlide", "storage");
            initialize("updateNotesSlide", "storage", "String", valueStorage);
            NotesSlide response = api.updateNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "updateNotesSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "updateNotesSlide");
        }
    }
    
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateParagraphTest() throws ApiException, Exception {
        initialize("updateParagraph", null, null, null);
        Paragraph response = null;
        String valueName = (String)getTestValue("String", "updateParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "updateParagraph", "subShape");
        response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "updateParagraph", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateParagraph", "name");
            initialize("updateParagraph", "name", "String", valueName);
            Paragraph response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "updateParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "updateParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "updateParagraph", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateParagraph", "slideIndex");
            initialize("updateParagraph", "slideIndex", "Integer", valueSlideIndex);
            Paragraph response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "updateParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "updateParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "updateParagraph", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "updateParagraph", "shapeIndex");
            initialize("updateParagraph", "shapeIndex", "Integer", valueShapeIndex);
            Paragraph response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "updateParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "updateParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateParagraphInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "updateParagraph", "subShape");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "updateParagraph", "paragraphIndex");
            initialize("updateParagraph", "paragraphIndex", "Integer", valueParagraphIndex);
            Paragraph response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "updateParagraph", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "updateParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateParagraphInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "updateParagraph", "subShape");
        try {
            valueDto = (Paragraph)invalidizeTestValue("Paragraph", valueDto, "updateParagraph", "dto");
            initialize("updateParagraph", "dto", "Paragraph", valueDto);
            Paragraph response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Paragraph", "dto", "updateParagraph", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("Paragraph", "dto", "updateParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "updateParagraph", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateParagraph", "password");
            initialize("updateParagraph", "password", "String", valuePassword);
            Paragraph response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "updateParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "updateParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "updateParagraph", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateParagraph", "folder");
            initialize("updateParagraph", "folder", "String", valueFolder);
            Paragraph response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "updateParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "updateParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "updateParagraph", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateParagraph", "storage");
            initialize("updateParagraph", "storage", "String", valueStorage);
            Paragraph response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "updateParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "updateParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateParagraphInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "updateParagraph", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "updateParagraph", "subShape");
            initialize("updateParagraph", "subShape", "String", valueSubShape);
            Paragraph response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "updateParagraph", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "updateParagraph");
        }
    }
    
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortionTest() throws ApiException, Exception {
        initialize("updatePortion", null, null, null);
        Portion response = null;
        String valueName = (String)getTestValue("String", "updatePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updatePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updatePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updatePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updatePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updatePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updatePortion", "password");
        String valueFolder = (String)getTestValue("String", "updatePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updatePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "updatePortion", "subShape");
        response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updatePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updatePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updatePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updatePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updatePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updatePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updatePortion", "password");
        String valueFolder = (String)getTestValue("String", "updatePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updatePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "updatePortion", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updatePortion", "name");
            initialize("updatePortion", "name", "String", valueName);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "updatePortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "updatePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updatePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updatePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updatePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updatePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updatePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updatePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updatePortion", "password");
        String valueFolder = (String)getTestValue("String", "updatePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updatePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "updatePortion", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updatePortion", "slideIndex");
            initialize("updatePortion", "slideIndex", "Integer", valueSlideIndex);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "updatePortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "updatePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updatePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updatePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updatePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updatePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updatePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updatePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updatePortion", "password");
        String valueFolder = (String)getTestValue("String", "updatePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updatePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "updatePortion", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "updatePortion", "shapeIndex");
            initialize("updatePortion", "shapeIndex", "Integer", valueShapeIndex);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "updatePortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "updatePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updatePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updatePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updatePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updatePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updatePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updatePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updatePortion", "password");
        String valueFolder = (String)getTestValue("String", "updatePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updatePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "updatePortion", "subShape");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "updatePortion", "paragraphIndex");
            initialize("updatePortion", "paragraphIndex", "Integer", valueParagraphIndex);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "updatePortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "updatePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortionInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updatePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updatePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updatePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updatePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updatePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updatePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updatePortion", "password");
        String valueFolder = (String)getTestValue("String", "updatePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updatePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "updatePortion", "subShape");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "updatePortion", "portionIndex");
            initialize("updatePortion", "portionIndex", "Integer", valuePortionIndex);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "portionIndex", "updatePortion", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "portionIndex", "updatePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortionInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updatePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updatePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updatePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updatePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updatePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updatePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updatePortion", "password");
        String valueFolder = (String)getTestValue("String", "updatePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updatePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "updatePortion", "subShape");
        try {
            valueDto = (Portion)invalidizeTestValue("Portion", valueDto, "updatePortion", "dto");
            initialize("updatePortion", "dto", "Portion", valueDto);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Portion", "dto", "updatePortion", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("Portion", "dto", "updatePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updatePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updatePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updatePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updatePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updatePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updatePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updatePortion", "password");
        String valueFolder = (String)getTestValue("String", "updatePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updatePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "updatePortion", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updatePortion", "password");
            initialize("updatePortion", "password", "String", valuePassword);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "updatePortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "updatePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updatePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updatePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updatePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updatePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updatePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updatePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updatePortion", "password");
        String valueFolder = (String)getTestValue("String", "updatePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updatePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "updatePortion", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updatePortion", "folder");
            initialize("updatePortion", "folder", "String", valueFolder);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "updatePortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "updatePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updatePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updatePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updatePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updatePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updatePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updatePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updatePortion", "password");
        String valueFolder = (String)getTestValue("String", "updatePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updatePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "updatePortion", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updatePortion", "storage");
            initialize("updatePortion", "storage", "String", valueStorage);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "updatePortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "updatePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortionInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updatePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updatePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updatePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updatePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updatePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updatePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updatePortion", "password");
        String valueFolder = (String)getTestValue("String", "updatePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updatePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "updatePortion", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "updatePortion", "subShape");
            initialize("updatePortion", "subShape", "String", valueSubShape);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "updatePortion", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "updatePortion");
        }
    }
    
    /**
     * Update section name.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSectionTest() throws ApiException, Exception {
        initialize("updateSection", null, null, null);
        Sections response = null;
        String valueName = (String)getTestValue("String", "updateSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "updateSection", "sectionIndex");
        String valueSectionName = (String)getTestValue("String", "updateSection", "sectionName");
        String valuePassword = (String)getTestValue("String", "updateSection", "password");
        String valueFolder = (String)getTestValue("String", "updateSection", "folder");
        String valueStorage = (String)getTestValue("String", "updateSection", "storage");
        response = api.updateSection(valueName, valueSectionIndex, valueSectionName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update section name.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSectionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "updateSection", "sectionIndex");
        String valueSectionName = (String)getTestValue("String", "updateSection", "sectionName");
        String valuePassword = (String)getTestValue("String", "updateSection", "password");
        String valueFolder = (String)getTestValue("String", "updateSection", "folder");
        String valueStorage = (String)getTestValue("String", "updateSection", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateSection", "name");
            initialize("updateSection", "name", "String", valueName);
            Sections response = api.updateSection(valueName, valueSectionIndex, valueSectionName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "updateSection", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "updateSection");
        }
    }
    /**
     * Update section name.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSectionInvalidSectionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "updateSection", "sectionIndex");
        String valueSectionName = (String)getTestValue("String", "updateSection", "sectionName");
        String valuePassword = (String)getTestValue("String", "updateSection", "password");
        String valueFolder = (String)getTestValue("String", "updateSection", "folder");
        String valueStorage = (String)getTestValue("String", "updateSection", "storage");
        try {
            valueSectionIndex = (Integer)invalidizeTestValue("Integer", valueSectionIndex, "updateSection", "sectionIndex");
            initialize("updateSection", "sectionIndex", "Integer", valueSectionIndex);
            Sections response = api.updateSection(valueName, valueSectionIndex, valueSectionName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "sectionIndex", "updateSection", valueSectionIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "sectionIndex", "updateSection");
        }
    }
    /**
     * Update section name.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSectionInvalidSectionNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "updateSection", "sectionIndex");
        String valueSectionName = (String)getTestValue("String", "updateSection", "sectionName");
        String valuePassword = (String)getTestValue("String", "updateSection", "password");
        String valueFolder = (String)getTestValue("String", "updateSection", "folder");
        String valueStorage = (String)getTestValue("String", "updateSection", "storage");
        try {
            valueSectionName = (String)invalidizeTestValue("String", valueSectionName, "updateSection", "sectionName");
            initialize("updateSection", "sectionName", "String", valueSectionName);
            Sections response = api.updateSection(valueName, valueSectionIndex, valueSectionName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "sectionName", "updateSection", valueSectionName);
        }
        if (needAssertResponse) {
            assertResponse("String", "sectionName", "updateSection");
        }
    }
    /**
     * Update section name.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSectionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "updateSection", "sectionIndex");
        String valueSectionName = (String)getTestValue("String", "updateSection", "sectionName");
        String valuePassword = (String)getTestValue("String", "updateSection", "password");
        String valueFolder = (String)getTestValue("String", "updateSection", "folder");
        String valueStorage = (String)getTestValue("String", "updateSection", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateSection", "password");
            initialize("updateSection", "password", "String", valuePassword);
            Sections response = api.updateSection(valueName, valueSectionIndex, valueSectionName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "updateSection", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "updateSection");
        }
    }
    /**
     * Update section name.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSectionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "updateSection", "sectionIndex");
        String valueSectionName = (String)getTestValue("String", "updateSection", "sectionName");
        String valuePassword = (String)getTestValue("String", "updateSection", "password");
        String valueFolder = (String)getTestValue("String", "updateSection", "folder");
        String valueStorage = (String)getTestValue("String", "updateSection", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateSection", "folder");
            initialize("updateSection", "folder", "String", valueFolder);
            Sections response = api.updateSection(valueName, valueSectionIndex, valueSectionName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "updateSection", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "updateSection");
        }
    }
    /**
     * Update section name.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSectionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "updateSection", "sectionIndex");
        String valueSectionName = (String)getTestValue("String", "updateSection", "sectionName");
        String valuePassword = (String)getTestValue("String", "updateSection", "password");
        String valueFolder = (String)getTestValue("String", "updateSection", "folder");
        String valueStorage = (String)getTestValue("String", "updateSection", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateSection", "storage");
            initialize("updateSection", "storage", "String", valueStorage);
            Sections response = api.updateSection(valueName, valueSectionIndex, valueSectionName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "updateSection", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "updateSection");
        }
    }
    
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateShapeTest() throws ApiException, Exception {
        initialize("updateShape", null, null, null);
        ShapeBase response = null;
        String valueName = (String)getTestValue("String", "updateShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateShape", "password");
        String valueFolder = (String)getTestValue("String", "updateShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateShape", "storage");
        String valueSubShape = (String)getTestValue("String", "updateShape", "subShape");
        response = api.updateShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateShape", "password");
        String valueFolder = (String)getTestValue("String", "updateShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateShape", "storage");
        String valueSubShape = (String)getTestValue("String", "updateShape", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateShape", "name");
            initialize("updateShape", "name", "String", valueName);
            ShapeBase response = api.updateShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "updateShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "updateShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateShape", "password");
        String valueFolder = (String)getTestValue("String", "updateShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateShape", "storage");
        String valueSubShape = (String)getTestValue("String", "updateShape", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateShape", "slideIndex");
            initialize("updateShape", "slideIndex", "Integer", valueSlideIndex);
            ShapeBase response = api.updateShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "updateShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "updateShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateShape", "password");
        String valueFolder = (String)getTestValue("String", "updateShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateShape", "storage");
        String valueSubShape = (String)getTestValue("String", "updateShape", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "updateShape", "shapeIndex");
            initialize("updateShape", "shapeIndex", "Integer", valueShapeIndex);
            ShapeBase response = api.updateShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "updateShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "updateShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateShapeInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateShape", "password");
        String valueFolder = (String)getTestValue("String", "updateShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateShape", "storage");
        String valueSubShape = (String)getTestValue("String", "updateShape", "subShape");
        try {
            valueDto = (ShapeBase)invalidizeTestValue("ShapeBase", valueDto, "updateShape", "dto");
            initialize("updateShape", "dto", "ShapeBase", valueDto);
            ShapeBase response = api.updateShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ShapeBase", "dto", "updateShape", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("ShapeBase", "dto", "updateShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateShape", "password");
        String valueFolder = (String)getTestValue("String", "updateShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateShape", "storage");
        String valueSubShape = (String)getTestValue("String", "updateShape", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateShape", "password");
            initialize("updateShape", "password", "String", valuePassword);
            ShapeBase response = api.updateShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "updateShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "updateShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateShape", "password");
        String valueFolder = (String)getTestValue("String", "updateShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateShape", "storage");
        String valueSubShape = (String)getTestValue("String", "updateShape", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateShape", "folder");
            initialize("updateShape", "folder", "String", valueFolder);
            ShapeBase response = api.updateShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "updateShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "updateShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateShape", "password");
        String valueFolder = (String)getTestValue("String", "updateShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateShape", "storage");
        String valueSubShape = (String)getTestValue("String", "updateShape", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateShape", "storage");
            initialize("updateShape", "storage", "String", valueStorage);
            ShapeBase response = api.updateShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "updateShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "updateShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateShapeInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateShape", "password");
        String valueFolder = (String)getTestValue("String", "updateShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateShape", "storage");
        String valueSubShape = (String)getTestValue("String", "updateShape", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "updateShape", "subShape");
            initialize("updateShape", "subShape", "String", valueSubShape);
            ShapeBase response = api.updateShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "updateShape", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "updateShape");
        }
    }
    
    /**
     * Update a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSlideTest() throws ApiException, Exception {
        initialize("updateSlide", null, null, null);
        Slide response = null;
        String valueName = (String)getTestValue("String", "updateSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSlide", "slideIndex");
        Slide valueSlideDto = (Slide)getTestValue("Slide", "updateSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateSlide", "storage");
        response = api.updateSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSlide", "slideIndex");
        Slide valueSlideDto = (Slide)getTestValue("Slide", "updateSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateSlide", "name");
            initialize("updateSlide", "name", "String", valueName);
            Slide response = api.updateSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "updateSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "updateSlide");
        }
    }
    /**
     * Update a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSlide", "slideIndex");
        Slide valueSlideDto = (Slide)getTestValue("Slide", "updateSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateSlide", "slideIndex");
            initialize("updateSlide", "slideIndex", "Integer", valueSlideIndex);
            Slide response = api.updateSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "updateSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "updateSlide");
        }
    }
    /**
     * Update a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSlideInvalidSlideDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSlide", "slideIndex");
        Slide valueSlideDto = (Slide)getTestValue("Slide", "updateSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateSlide", "storage");
        try {
            valueSlideDto = (Slide)invalidizeTestValue("Slide", valueSlideDto, "updateSlide", "slideDto");
            initialize("updateSlide", "slideDto", "Slide", valueSlideDto);
            Slide response = api.updateSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Slide", "slideDto", "updateSlide", valueSlideDto);
        }
        if (needAssertResponse) {
            assertResponse("Slide", "slideDto", "updateSlide");
        }
    }
    /**
     * Update a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSlide", "slideIndex");
        Slide valueSlideDto = (Slide)getTestValue("Slide", "updateSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateSlide", "password");
            initialize("updateSlide", "password", "String", valuePassword);
            Slide response = api.updateSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "updateSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "updateSlide");
        }
    }
    /**
     * Update a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSlide", "slideIndex");
        Slide valueSlideDto = (Slide)getTestValue("Slide", "updateSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateSlide", "folder");
            initialize("updateSlide", "folder", "String", valueFolder);
            Slide response = api.updateSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "updateSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "updateSlide");
        }
    }
    /**
     * Update a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSlide", "slideIndex");
        Slide valueSlideDto = (Slide)getTestValue("Slide", "updateSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateSlide", "storage");
            initialize("updateSlide", "storage", "String", valueStorage);
            Slide response = api.updateSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "updateSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "updateSlide");
        }
    }
    
    /**
     * Modify an animation effect for a special slide (master, layout, notes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideAnimationEffectTest() throws ApiException, Exception {
        initialize("updateSpecialSlideAnimationEffect", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideAnimationEffect", "slideType");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateSpecialSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "storage");
        response = api.updateSpecialSlideAnimationEffect(valueName, valueSlideIndex, valueSlideType, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Modify an animation effect for a special slide (master, layout, notes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideAnimationEffectInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideAnimationEffect", "slideType");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateSpecialSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateSpecialSlideAnimationEffect", "name");
            initialize("updateSpecialSlideAnimationEffect", "name", "String", valueName);
            SlideAnimation response = api.updateSpecialSlideAnimationEffect(valueName, valueSlideIndex, valueSlideType, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "updateSpecialSlideAnimationEffect", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "updateSpecialSlideAnimationEffect");
        }
    }
    /**
     * Modify an animation effect for a special slide (master, layout, notes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideAnimationEffectInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideAnimationEffect", "slideType");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateSpecialSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateSpecialSlideAnimationEffect", "slideIndex");
            initialize("updateSpecialSlideAnimationEffect", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.updateSpecialSlideAnimationEffect(valueName, valueSlideIndex, valueSlideType, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "updateSpecialSlideAnimationEffect", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "updateSpecialSlideAnimationEffect");
        }
    }
    /**
     * Modify an animation effect for a special slide (master, layout, notes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideAnimationEffectInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideAnimationEffect", "slideType");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateSpecialSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "storage");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "updateSpecialSlideAnimationEffect", "slideType");
            initialize("updateSpecialSlideAnimationEffect", "slideType", "SpecialSlideType", valueSlideType);
            SlideAnimation response = api.updateSpecialSlideAnimationEffect(valueName, valueSlideIndex, valueSlideType, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "updateSpecialSlideAnimationEffect", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "updateSpecialSlideAnimationEffect");
        }
    }
    /**
     * Modify an animation effect for a special slide (master, layout, notes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideAnimationEffectInvalidEffectIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideAnimationEffect", "slideType");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateSpecialSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "storage");
        try {
            valueEffectIndex = (Integer)invalidizeTestValue("Integer", valueEffectIndex, "updateSpecialSlideAnimationEffect", "effectIndex");
            initialize("updateSpecialSlideAnimationEffect", "effectIndex", "Integer", valueEffectIndex);
            SlideAnimation response = api.updateSpecialSlideAnimationEffect(valueName, valueSlideIndex, valueSlideType, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "effectIndex", "updateSpecialSlideAnimationEffect", valueEffectIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "effectIndex", "updateSpecialSlideAnimationEffect");
        }
    }
    /**
     * Modify an animation effect for a special slide (master, layout, notes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideAnimationEffectInvalidEffectTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideAnimationEffect", "slideType");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateSpecialSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "storage");
        try {
            valueEffect = (Effect)invalidizeTestValue("Effect", valueEffect, "updateSpecialSlideAnimationEffect", "effect");
            initialize("updateSpecialSlideAnimationEffect", "effect", "Effect", valueEffect);
            SlideAnimation response = api.updateSpecialSlideAnimationEffect(valueName, valueSlideIndex, valueSlideType, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Effect", "effect", "updateSpecialSlideAnimationEffect", valueEffect);
        }
        if (needAssertResponse) {
            assertResponse("Effect", "effect", "updateSpecialSlideAnimationEffect");
        }
    }
    /**
     * Modify an animation effect for a special slide (master, layout, notes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideAnimationEffectInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideAnimationEffect", "slideType");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateSpecialSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateSpecialSlideAnimationEffect", "password");
            initialize("updateSpecialSlideAnimationEffect", "password", "String", valuePassword);
            SlideAnimation response = api.updateSpecialSlideAnimationEffect(valueName, valueSlideIndex, valueSlideType, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "updateSpecialSlideAnimationEffect", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "updateSpecialSlideAnimationEffect");
        }
    }
    /**
     * Modify an animation effect for a special slide (master, layout, notes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideAnimationEffectInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideAnimationEffect", "slideType");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateSpecialSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateSpecialSlideAnimationEffect", "folder");
            initialize("updateSpecialSlideAnimationEffect", "folder", "String", valueFolder);
            SlideAnimation response = api.updateSpecialSlideAnimationEffect(valueName, valueSlideIndex, valueSlideType, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "updateSpecialSlideAnimationEffect", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "updateSpecialSlideAnimationEffect");
        }
    }
    /**
     * Modify an animation effect for a special slide (master, layout, notes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideAnimationEffectInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideAnimationEffect", "slideType");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateSpecialSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideAnimationEffect", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateSpecialSlideAnimationEffect", "storage");
            initialize("updateSpecialSlideAnimationEffect", "storage", "String", valueStorage);
            SlideAnimation response = api.updateSpecialSlideAnimationEffect(valueName, valueSlideIndex, valueSlideType, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "updateSpecialSlideAnimationEffect", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "updateSpecialSlideAnimationEffect");
        }
    }
    
    /**
     * Modify an animation effect for a special slide (master, layout, notes) interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideAnimationInteractiveSequenceEffectTest() throws ApiException, Exception {
        initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", null, null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateSpecialSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        response = api.updateSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Modify an animation effect for a special slide (master, layout, notes) interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideAnimationInteractiveSequenceEffectInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateSpecialSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateSpecialSlideAnimationInteractiveSequenceEffect", "name");
            initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", "String", valueName);
            SlideAnimation response = api.updateSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "updateSpecialSlideAnimationInteractiveSequenceEffect", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "updateSpecialSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a special slide (master, layout, notes) interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateSpecialSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
            initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", "Integer", valueSlideIndex);
            SlideAnimation response = api.updateSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "updateSpecialSlideAnimationInteractiveSequenceEffect", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "updateSpecialSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a special slide (master, layout, notes) interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateSpecialSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
            initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", "SpecialSlideType", valueSlideType);
            SlideAnimation response = api.updateSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "updateSpecialSlideAnimationInteractiveSequenceEffect", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "updateSpecialSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a special slide (master, layout, notes) interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideAnimationInteractiveSequenceEffectInvalidSequenceIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateSpecialSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSequenceIndex = (Integer)invalidizeTestValue("Integer", valueSequenceIndex, "updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
            initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "Integer", valueSequenceIndex);
            SlideAnimation response = api.updateSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "sequenceIndex", "updateSpecialSlideAnimationInteractiveSequenceEffect", valueSequenceIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "sequenceIndex", "updateSpecialSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a special slide (master, layout, notes) interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideAnimationInteractiveSequenceEffectInvalidEffectIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateSpecialSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueEffectIndex = (Integer)invalidizeTestValue("Integer", valueEffectIndex, "updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex");
            initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", "Integer", valueEffectIndex);
            SlideAnimation response = api.updateSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "effectIndex", "updateSpecialSlideAnimationInteractiveSequenceEffect", valueEffectIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "effectIndex", "updateSpecialSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a special slide (master, layout, notes) interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideAnimationInteractiveSequenceEffectInvalidEffectTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateSpecialSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueEffect = (Effect)invalidizeTestValue("Effect", valueEffect, "updateSpecialSlideAnimationInteractiveSequenceEffect", "effect");
            initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", "Effect", valueEffect);
            SlideAnimation response = api.updateSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Effect", "effect", "updateSpecialSlideAnimationInteractiveSequenceEffect", valueEffect);
        }
        if (needAssertResponse) {
            assertResponse("Effect", "effect", "updateSpecialSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a special slide (master, layout, notes) interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideAnimationInteractiveSequenceEffectInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateSpecialSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateSpecialSlideAnimationInteractiveSequenceEffect", "password");
            initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", "String", valuePassword);
            SlideAnimation response = api.updateSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "updateSpecialSlideAnimationInteractiveSequenceEffect", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "updateSpecialSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a special slide (master, layout, notes) interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideAnimationInteractiveSequenceEffectInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateSpecialSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateSpecialSlideAnimationInteractiveSequenceEffect", "folder");
            initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", "String", valueFolder);
            SlideAnimation response = api.updateSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "updateSpecialSlideAnimationInteractiveSequenceEffect", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "updateSpecialSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a special slide (master, layout, notes) interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideAnimationInteractiveSequenceEffectInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateSpecialSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateSpecialSlideAnimationInteractiveSequenceEffect", "storage");
            initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", "String", valueStorage);
            SlideAnimation response = api.updateSpecialSlideAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSlideType, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "updateSpecialSlideAnimationInteractiveSequenceEffect", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "updateSpecialSlideAnimationInteractiveSequenceEffect");
        }
    }
    
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideParagraphTest() throws ApiException, Exception {
        initialize("updateSpecialSlideParagraph", null, null, null);
        Paragraph response = null;
        String valueName = (String)getTestValue("String", "updateSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateSpecialSlideParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlideParagraph", "subShape");
        response = api.updateSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateSpecialSlideParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlideParagraph", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateSpecialSlideParagraph", "name");
            initialize("updateSpecialSlideParagraph", "name", "String", valueName);
            Paragraph response = api.updateSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "updateSpecialSlideParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "updateSpecialSlideParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateSpecialSlideParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlideParagraph", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateSpecialSlideParagraph", "slideIndex");
            initialize("updateSpecialSlideParagraph", "slideIndex", "Integer", valueSlideIndex);
            Paragraph response = api.updateSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "updateSpecialSlideParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "updateSpecialSlideParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideParagraphInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateSpecialSlideParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlideParagraph", "subShape");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "updateSpecialSlideParagraph", "slideType");
            initialize("updateSpecialSlideParagraph", "slideType", "SpecialSlideType", valueSlideType);
            Paragraph response = api.updateSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "updateSpecialSlideParagraph", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "updateSpecialSlideParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateSpecialSlideParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlideParagraph", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "updateSpecialSlideParagraph", "shapeIndex");
            initialize("updateSpecialSlideParagraph", "shapeIndex", "Integer", valueShapeIndex);
            Paragraph response = api.updateSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "updateSpecialSlideParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "updateSpecialSlideParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideParagraphInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateSpecialSlideParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlideParagraph", "subShape");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "updateSpecialSlideParagraph", "paragraphIndex");
            initialize("updateSpecialSlideParagraph", "paragraphIndex", "Integer", valueParagraphIndex);
            Paragraph response = api.updateSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "updateSpecialSlideParagraph", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "updateSpecialSlideParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideParagraphInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateSpecialSlideParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlideParagraph", "subShape");
        try {
            valueDto = (Paragraph)invalidizeTestValue("Paragraph", valueDto, "updateSpecialSlideParagraph", "dto");
            initialize("updateSpecialSlideParagraph", "dto", "Paragraph", valueDto);
            Paragraph response = api.updateSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Paragraph", "dto", "updateSpecialSlideParagraph", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("Paragraph", "dto", "updateSpecialSlideParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateSpecialSlideParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlideParagraph", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateSpecialSlideParagraph", "password");
            initialize("updateSpecialSlideParagraph", "password", "String", valuePassword);
            Paragraph response = api.updateSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "updateSpecialSlideParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "updateSpecialSlideParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateSpecialSlideParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlideParagraph", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateSpecialSlideParagraph", "folder");
            initialize("updateSpecialSlideParagraph", "folder", "String", valueFolder);
            Paragraph response = api.updateSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "updateSpecialSlideParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "updateSpecialSlideParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateSpecialSlideParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlideParagraph", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateSpecialSlideParagraph", "storage");
            initialize("updateSpecialSlideParagraph", "storage", "String", valueStorage);
            Paragraph response = api.updateSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "updateSpecialSlideParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "updateSpecialSlideParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideParagraphInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideParagraph", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSpecialSlideParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateSpecialSlideParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideParagraph", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlideParagraph", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "updateSpecialSlideParagraph", "subShape");
            initialize("updateSpecialSlideParagraph", "subShape", "String", valueSubShape);
            Paragraph response = api.updateSpecialSlideParagraph(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "updateSpecialSlideParagraph", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "updateSpecialSlideParagraph");
        }
    }
    
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlidePortionTest() throws ApiException, Exception {
        initialize("updateSpecialSlidePortion", null, null, null);
        Portion response = null;
        String valueName = (String)getTestValue("String", "updateSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateSpecialSlidePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlidePortion", "subShape");
        response = api.updateSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlidePortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateSpecialSlidePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlidePortion", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateSpecialSlidePortion", "name");
            initialize("updateSpecialSlidePortion", "name", "String", valueName);
            Portion response = api.updateSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "updateSpecialSlidePortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "updateSpecialSlidePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlidePortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateSpecialSlidePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlidePortion", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateSpecialSlidePortion", "slideIndex");
            initialize("updateSpecialSlidePortion", "slideIndex", "Integer", valueSlideIndex);
            Portion response = api.updateSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "updateSpecialSlidePortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "updateSpecialSlidePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlidePortionInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateSpecialSlidePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlidePortion", "subShape");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "updateSpecialSlidePortion", "slideType");
            initialize("updateSpecialSlidePortion", "slideType", "SpecialSlideType", valueSlideType);
            Portion response = api.updateSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "updateSpecialSlidePortion", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "updateSpecialSlidePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlidePortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateSpecialSlidePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlidePortion", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "updateSpecialSlidePortion", "shapeIndex");
            initialize("updateSpecialSlidePortion", "shapeIndex", "Integer", valueShapeIndex);
            Portion response = api.updateSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "updateSpecialSlidePortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "updateSpecialSlidePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlidePortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateSpecialSlidePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlidePortion", "subShape");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "updateSpecialSlidePortion", "paragraphIndex");
            initialize("updateSpecialSlidePortion", "paragraphIndex", "Integer", valueParagraphIndex);
            Portion response = api.updateSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "paragraphIndex", "updateSpecialSlidePortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "paragraphIndex", "updateSpecialSlidePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlidePortionInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateSpecialSlidePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlidePortion", "subShape");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "updateSpecialSlidePortion", "portionIndex");
            initialize("updateSpecialSlidePortion", "portionIndex", "Integer", valuePortionIndex);
            Portion response = api.updateSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "portionIndex", "updateSpecialSlidePortion", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "portionIndex", "updateSpecialSlidePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlidePortionInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateSpecialSlidePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlidePortion", "subShape");
        try {
            valueDto = (Portion)invalidizeTestValue("Portion", valueDto, "updateSpecialSlidePortion", "dto");
            initialize("updateSpecialSlidePortion", "dto", "Portion", valueDto);
            Portion response = api.updateSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Portion", "dto", "updateSpecialSlidePortion", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("Portion", "dto", "updateSpecialSlidePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlidePortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateSpecialSlidePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlidePortion", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateSpecialSlidePortion", "password");
            initialize("updateSpecialSlidePortion", "password", "String", valuePassword);
            Portion response = api.updateSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "updateSpecialSlidePortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "updateSpecialSlidePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlidePortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateSpecialSlidePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlidePortion", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateSpecialSlidePortion", "folder");
            initialize("updateSpecialSlidePortion", "folder", "String", valueFolder);
            Portion response = api.updateSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "updateSpecialSlidePortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "updateSpecialSlidePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlidePortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateSpecialSlidePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlidePortion", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateSpecialSlidePortion", "storage");
            initialize("updateSpecialSlidePortion", "storage", "String", valueStorage);
            Portion response = api.updateSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "updateSpecialSlidePortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "updateSpecialSlidePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlidePortionInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlidePortion", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateSpecialSlidePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateSpecialSlidePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlidePortion", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlidePortion", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "updateSpecialSlidePortion", "subShape");
            initialize("updateSpecialSlidePortion", "subShape", "String", valueSubShape);
            Portion response = api.updateSpecialSlidePortion(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "updateSpecialSlidePortion", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "updateSpecialSlidePortion");
        }
    }
    
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideShapeTest() throws ApiException, Exception {
        initialize("updateSpecialSlideShape", null, null, null);
        ShapeBase response = null;
        String valueName = (String)getTestValue("String", "updateSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateSpecialSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlideShape", "subShape");
        response = api.updateSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
        assertNotNull(response);
    }

    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateSpecialSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlideShape", "subShape");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateSpecialSlideShape", "name");
            initialize("updateSpecialSlideShape", "name", "String", valueName);
            ShapeBase response = api.updateSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "name", "updateSpecialSlideShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("String", "name", "updateSpecialSlideShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateSpecialSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlideShape", "subShape");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateSpecialSlideShape", "slideIndex");
            initialize("updateSpecialSlideShape", "slideIndex", "Integer", valueSlideIndex);
            ShapeBase response = api.updateSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "slideIndex", "updateSpecialSlideShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "slideIndex", "updateSpecialSlideShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideShapeInvalidSlideTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateSpecialSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlideShape", "subShape");
        try {
            valueSlideType = (SpecialSlideType)invalidizeTestValue("SpecialSlideType", valueSlideType, "updateSpecialSlideShape", "slideType");
            initialize("updateSpecialSlideShape", "slideType", "SpecialSlideType", valueSlideType);
            ShapeBase response = api.updateSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "SpecialSlideType", "slideType", "updateSpecialSlideShape", valueSlideType);
        }
        if (needAssertResponse) {
            assertResponse("SpecialSlideType", "slideType", "updateSpecialSlideShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateSpecialSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlideShape", "subShape");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "updateSpecialSlideShape", "shapeIndex");
            initialize("updateSpecialSlideShape", "shapeIndex", "Integer", valueShapeIndex);
            ShapeBase response = api.updateSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "Integer", "shapeIndex", "updateSpecialSlideShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("Integer", "shapeIndex", "updateSpecialSlideShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideShapeInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateSpecialSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlideShape", "subShape");
        try {
            valueDto = (ShapeBase)invalidizeTestValue("ShapeBase", valueDto, "updateSpecialSlideShape", "dto");
            initialize("updateSpecialSlideShape", "dto", "ShapeBase", valueDto);
            ShapeBase response = api.updateSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ShapeBase", "dto", "updateSpecialSlideShape", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("ShapeBase", "dto", "updateSpecialSlideShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateSpecialSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlideShape", "subShape");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateSpecialSlideShape", "password");
            initialize("updateSpecialSlideShape", "password", "String", valuePassword);
            ShapeBase response = api.updateSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "password", "updateSpecialSlideShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("String", "password", "updateSpecialSlideShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateSpecialSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlideShape", "subShape");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateSpecialSlideShape", "folder");
            initialize("updateSpecialSlideShape", "folder", "String", valueFolder);
            ShapeBase response = api.updateSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "folder", "updateSpecialSlideShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("String", "folder", "updateSpecialSlideShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateSpecialSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlideShape", "subShape");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateSpecialSlideShape", "storage");
            initialize("updateSpecialSlideShape", "storage", "String", valueStorage);
            ShapeBase response = api.updateSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storage", "updateSpecialSlideShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("String", "storage", "updateSpecialSlideShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialSlideShapeInvalidSubShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSpecialSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSpecialSlideShape", "slideIndex");
        SpecialSlideType valueSlideType = (SpecialSlideType)getTestValue("SpecialSlideType", "updateSpecialSlideShape", "slideType");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSpecialSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateSpecialSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateSpecialSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "updateSpecialSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateSpecialSlideShape", "storage");
        String valueSubShape = (String)getTestValue("String", "updateSpecialSlideShape", "subShape");
        try {
            valueSubShape = (String)invalidizeTestValue("String", valueSubShape, "updateSpecialSlideShape", "subShape");
            initialize("updateSpecialSlideShape", "subShape", "String", valueSubShape);
            ShapeBase response = api.updateSpecialSlideShape(valueName, valueSlideIndex, valueSlideType, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage, valueSubShape);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "subShape", "updateSpecialSlideShape", valueSubShape);
        }
        if (needAssertResponse) {
            assertResponse("String", "subShape", "updateSpecialSlideShape");
        }
    }
    
    /**
     * Upload file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadFileTest() throws ApiException, Exception {
        initialize("uploadFile", null, null, null);
        FilesUploadResult response = null;
        String valuePath = (String)getTestValue("String", "uploadFile", "path");
        byte[] valueFile = (byte[])getTestValue("byte[]", "uploadFile", "file");
        String valueStorageName = (String)getTestValue("String", "uploadFile", "storageName");
        response = api.uploadFile(valuePath, valueFile, valueStorageName);
        assertNotNull(response);
    }

    /**
     * Upload file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadFileInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "uploadFile", "path");
        byte[] valueFile = (byte[])getTestValue("byte[]", "uploadFile", "file");
        String valueStorageName = (String)getTestValue("String", "uploadFile", "storageName");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "uploadFile", "path");
            initialize("uploadFile", "path", "String", valuePath);
            FilesUploadResult response = api.uploadFile(valuePath, valueFile, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "path", "uploadFile", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("String", "path", "uploadFile");
        }
    }
    /**
     * Upload file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadFileInvalidFileTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "uploadFile", "path");
        byte[] valueFile = (byte[])getTestValue("byte[]", "uploadFile", "file");
        String valueStorageName = (String)getTestValue("String", "uploadFile", "storageName");
        try {
            valueFile = (byte[])invalidizeTestValue("byte[]", valueFile, "uploadFile", "file");
            initialize("uploadFile", "file", "byte[]", valueFile);
            FilesUploadResult response = api.uploadFile(valuePath, valueFile, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "byte[]", "file", "uploadFile", valueFile);
        }
        if (needAssertResponse) {
            assertResponse("byte[]", "file", "uploadFile");
        }
    }
    /**
     * Upload file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadFileInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "uploadFile", "path");
        byte[] valueFile = (byte[])getTestValue("byte[]", "uploadFile", "file");
        String valueStorageName = (String)getTestValue("String", "uploadFile", "storageName");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "uploadFile", "storageName");
            initialize("uploadFile", "storageName", "String", valueStorageName);
            FilesUploadResult response = api.uploadFile(valuePath, valueFile, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "String", "storageName", "uploadFile", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("String", "storageName", "uploadFile");
        }
    }
    
}
